{"componentChunkName":"component---src-templates-post-article-index-js","path":"/composicao-e-react-hoc/","result":{"data":{"markdownRemark":{"id":"7fd45a7e-336e-533e-ab7a-5dc0b5e9cce5","html":"<p>Composição é um tópico bastante abordado quando o assunto é programação funcional.</p>\n<p>Os exemplos mais comuns seguem algumas regras como: dada uma sequência de funções, você deve executar essa sequência em ordem.</p>\n<p>Muito provavelmente você já deve ter visto um exemplo com algumas operações de adição/subtração, onde você deve executá-las. Algo que você faria dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adicao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtracao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">adicao</span><span class=\"token punctuation\">(</span><span class=\"token function\">subtracao</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pensando num cenário onde essas funções tendem a crescer, você pode aprimorar a legibilidade do seu código e facilitar a manutenção, utilizando uma função principal responsável por executar toda essa sequência de funções, sendo algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adicao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtracao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// função que recebe outras funções e as executa em ordem</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span>\n  fn<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returned<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>returned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>adicao<span class=\"token punctuation\">,</span> subtracao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Deixando seu código muito mais fácil de estender, sem a necessidade de ficar encadeando uma função diretamente na chamada da outra (imagine se a sequência em adicao(subtracao()) tendesse a crescer com o tempo?).</p>\n<hr>\n<h3 id=\"higher-order-functions\" style=\"position:relative;\"><a href=\"#higher-order-functions\" aria-label=\"higher order functions permalink\" class=\"anchor before\">#</a>Higher Order Functions</h3>\n<p><code class=\"language-text\">Higher order functions</code> são funções que, em resumo, recebem outras funções como argumentos e retornam novas funções como resultado (geralmente relacionada ao termo <code class=\"language-text\">currying</code>, que é representado pelo fato de uma função justamente retornar outra função a ser executada futuramente).</p>\n<p>Ainda no exemplo anterior, pensemos no seguinte cenário: você precisa criar uma função de cálculo que recebe como parâmetro uma função qualquer que realizará esse determinado cálculo (soma/subtração), então, você retornará uma outra função que, ao ser executada, receberá o valor a ser calculado como parâmetro e executará essa determinada operação de cálculo.</p>\n<p>Escrevendo tudo isso parece até um pouco complexo, mas se olharmos o código, é um pouco mais prático de enxergar:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Mesmas funções</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adicao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">subtracao</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Função de calculo</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcular</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">operacao</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> <span class=\"token function\">operacao</span><span class=\"token punctuation\">(</span>valor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calcular</span><span class=\"token punctuation\">(</span>adicao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ao executar esse trecho de código, você verá que o resultado ocorreu como esperávamos. Entretanto, aplicamos o conceito de <code class=\"language-text\">Higher Order Function</code>, retornando uma outra função a ser executada posteriormente.</p>\n<hr>\n<h3 id=\"e-o-que-tudo-isso-tem-a-ver-com-interfaces\" style=\"position:relative;\"><a href=\"#e-o-que-tudo-isso-tem-a-ver-com-interfaces\" aria-label=\"e o que tudo isso tem a ver com interfaces permalink\" class=\"anchor before\">#</a>E o que tudo isso tem a ver com interfaces?</h3>\n<p>Tendo os exemplos acima em mente, podemos avançar um pouco e pensar em que cenário tudo isso se aplica às interfaces.</p>\n<p>Após trabalhar algum tempo com <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">React</code></a> você acaba conhecendo, se interesando e aplicando alguns padrões que tornam seu dia-a-dia mais fácil enquanto escreve seus componentes.</p>\n<p>Construir interfaces é uma tarefa que envolve reutilização de componentes e criação de abstrações para facilitar lógicas reutilizadas em diversos trechos de seu site/sistema.</p>\n<p>Imagine outro cenário: você possui um botão que é responsável por disparar um alerta (um modal ou qualquer mensagem na tela).</p>\n<p>Essa responsabilidade de disparar uma mensagem pode ser implementada diretamente no seu componente ou pode ser abstraída para que outros botões possam se beneficiar dessa implementação futuramente através de alguma <code class=\"language-text\">prop</code> que será compartilhada e responsável por fazer a ligação entre seu componente e essa \"camada\" de abstração.</p>\n<p>E uma das formas de criar essa camada de abstração é justamente aplicando <strong>HoC (ou Higher-order Components)</strong> e permitindo compartilhamento de lógica entre componentes.</p>\n<h4 id=\"vamos-deixar-os-exemplos-mais-praticos\" style=\"position:relative;\"><a href=\"#vamos-deixar-os-exemplos-mais-praticos\" aria-label=\"vamos deixar os exemplos mais praticos permalink\" class=\"anchor before\">#</a>Vamos deixar os exemplos mais práticos</h4>\n<p>Pense no cenário onde seu componente implementa essa lógica por si só:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'components/modal'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isVisible<span class=\"token punctuation\">,</span> setVisible<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Clique aqui para disparar a notificação\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">{</span>\n      isVisible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">notificação</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que fizemos foi: criamos o componente de botão, que dispara uma função no click e inserimos uma variável de estado que controla a visibilidade da notificação (no caso, a modal).</p>\n<p>Agora, vamos pensar no segundo cenário, onde essa implementação será abstraída do componente de botão e tudo que ela saberá é, basicamente, chamar uma <code class=\"language-text\">prop</code> com nome de <code class=\"language-text\">dispatchNotification</code> e não tenha ligação qualquer com o componente <code class=\"language-text\">Modal</code> ou seja lá qual notificação é renderizada.</p>\n<p>Em outras palavras, queremos que nosso componente se comporte da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatchNotification <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatchNotification<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Clique aqui para disparar a notificação\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Bem mais limpo, certo? Dessa forma, também removemos qualquer lógica de estado atrelado ao componente <code class=\"language-text\">Button</code>.</p>\n<p>Agora, vamos implementar nosso <strong>HoC</strong> chamado <strong>withMessage</strong>, onde ele será responsável por receber um componente e tratar esse estado que iremos abstrair:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'components/modal'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withMessage</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">Component</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isVisible<span class=\"token punctuation\">,</span> setVisibility<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dispatchNotification</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">dispatchNotification</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatchNotification<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>isVisible <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">notificação</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Modal</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> withMessage<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Talvez pareça meio confuso olhando de primeira, mas o que fizemos aqui foi:</p>\n<ul>\n<li>Declaramos o <strong>HoC</strong> <code class=\"language-text\">withMessage</code></li>\n<li>Recebemos um componente genérico como primeiro parâmetro e retornamos uma nova função</li>\n<li>Essa nova função, basicamente, recebe as <code class=\"language-text\">props</code> do componente que foi passado como primeiro parâmetro para que ele, dessa forma, possa ser renderizado normalmente</li>\n<li>Criamos toda a lógica de estado e visibilidade da notificação no <strong>HoC</strong> e passamos uma nova <code class=\"language-text\">prop</code> para o componente recebido, na hora de ser renderizado, em outras palavras, \"decoramos\" nosso componente (inclusive poderíamos manipular se ele seria ou não renderizado, entrando também no conceito de <code class=\"language-text\">render highjacking</code>)</li>\n</ul>\n<p>Dessa forma, o componente que antes exportávamos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora passará pelo processamento do nosso <strong>HoC</strong>, onde, simplesmente faremos o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// importamos nosso HoC</span>\n<span class=\"token keyword\">import</span> withMessage <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-message'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatchNotification <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>dispatchNotification<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Clique aqui para disparar a notificação\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// exportamos o componente após processá-lo no HoC</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>E assim, criamos nosso <strong>HoC</strong>.</p>\n<h3 id=\"compondo-multiplos-hoc\" style=\"position:relative;\"><a href=\"#compondo-multiplos-hoc\" aria-label=\"compondo multiplos hoc permalink\" class=\"anchor before\">#</a>Compondo múltiplos HoC</h3>\n<p>O problema dessa abordagem é quando seus <strong>HoC</strong> começam a crescer e alguns de seus componentes precisam de lógicas que são compartilhadas por diferentes <strong>HoC</strong>.</p>\n<p>Imagine que seu componente de botão (por um motivo qualquer) precisará agora:</p>\n<ul>\n<li>Receber os dados de um usuário para mostrar alguma mensagem qualquer</li>\n<li>Receber uma função para fazer log de eventos</li>\n<li>Receber uma função que realizará alguma requisição</li>\n</ul>\n<p>Logo você perceberá que conforme a quantidade de <strong>HoC</strong> utilizada em seu componente cresce, as execuções de cada uma dessas funções tende a crescer junto, da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// a quantidade de HoC aumentou</span>\n<span class=\"token keyword\">import</span> withMessage <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-message'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withUserdata <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-userdata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withLogging <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-logging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withFetching <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-fetching'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// seu componente recebe novos parâmetros</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatchNotification<span class=\"token punctuation\">,</span> dispatchLogging<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> fetching <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/*\n    implementação do botão\n  */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// precisamos procesar o componente por todos os HoC</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">withFetching</span><span class=\"token punctuation\">(</span><span class=\"token function\">withLogging</span><span class=\"token punctuation\">(</span><span class=\"token function\">withUserdata</span><span class=\"token punctuation\">(</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Um pouco custoso, não?\nAgora, com cada inserção de um novo <strong>Hoc</strong>, uma nova chamada para processar seu componente é necessária, dificultando a legibilidade do seu código.</p>\n<h3 id=\"utilizando-composicao-nos-hoc\" style=\"position:relative;\"><a href=\"#utilizando-composicao-nos-hoc\" aria-label=\"utilizando composicao nos hoc permalink\" class=\"anchor before\">#</a>Utilizando composição nos HoC</h3>\n<p>É ai que podemos utilizar a composição de forma mais clara: compondo <strong>HoC</strong> de forma a facilitar o uso dessas abstrações.</p>\n<p>Lembra da função <code class=\"language-text\">compose</code> que declaramos lá no início? Algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span>\n  fn<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">returned<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>returned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Podemos utilizá-la para compor nossos <strong>HoC</strong> de uma forma mais limpa.\nDeixando nosso código da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Compose</span>\n<span class=\"token keyword\">import</span> compose <span class=\"token keyword\">from</span> <span class=\"token string\">'./compose'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HoC</span>\n<span class=\"token keyword\">import</span> withMessage <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-message'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withUserdata <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-userdata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withLogging <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-logging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withFetching <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-fetching'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatchNotification<span class=\"token punctuation\">,</span> dispatchLogging<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> fetching <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/*\n    implementação do botão\n  */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Realizamos a composição de todos os HoC</span>\n<span class=\"token keyword\">const</span> composed <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  withMessage<span class=\"token punctuation\">,</span>\n  withUserdata<span class=\"token punctuation\">,</span>\n  withLogging<span class=\"token punctuation\">,</span>\n  withFetching\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> composed<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Muito mais legível e claro, não? Agora, independente da quantidade de <strong>HoC</strong> que seu componente tiver, sua clareza será mantida.</p>\n<h3 id=\"talvez-voce-ja-tenha-um-compose-no-seu-codebase-e-nem-tenha-percebido\" style=\"position:relative;\"><a href=\"#talvez-voce-ja-tenha-um-compose-no-seu-codebase-e-nem-tenha-percebido\" aria-label=\"talvez voce ja tenha um compose no seu codebase e nem tenha percebido permalink\" class=\"anchor before\">#</a>Talvez você já tenha um compose no seu codebase e nem tenha percebido</h3>\n<p>É muito comum em aplicações <code class=\"language-text\">React</code> utilizarmos outra ferramenta para nos auxiliar com estado, chamada <a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Redux</code></a>.\nE um método disponibilizado convenientemente pelo <code class=\"language-text\">Redux</code> é o próprio <a href=\"https://redux.js.org/api/compose#composefunctions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">compose</code></a> que funciona de forma bem parecida com a que implementamos.</p>\n<p>Dessa forma, caso sua aplicação já utilize essa ferramenta, podemos importar essa função diretamente de lá, nos poupando o trabalho de realizar essa implementação por conta própria. Ou seja, por fim, o componente ficaria parecido com:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Agora importando compose diretamente do Redux</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compose <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HoC</span>\n<span class=\"token keyword\">import</span> withMessage <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-message'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withUserdata <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-userdata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withLogging <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-logging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withFetching <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-fetching'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Button</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> dispatchNotification<span class=\"token punctuation\">,</span> dispatchLogging<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> fetching <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/*\n    implementação do botão\n  */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mantemos a composição de todos os HoC</span>\n<span class=\"token keyword\">const</span> composed <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  withMessage<span class=\"token punctuation\">,</span>\n  withUserdata<span class=\"token punctuation\">,</span>\n  withLogging<span class=\"token punctuation\">,</span>\n  withFetching\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> composed<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Simples, não?</p>\n<p>Se quiser, você ainda pode optar por externalizar essa manipulação dos <strong>HoC</strong> separando de alguma maneira. Por exemplo, deixando seu arquivo <code class=\"language-text\">index.js</code> responsável por importar seu componente e fazendo a composição, assim você separa essa \"responsabilidade\" de atrelar as <strong>HoC</strong> ao componente em si:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compose <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Importa todos os HoC</span>\n<span class=\"token keyword\">import</span> withMessage <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-message'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withUserdata <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-userdata'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withLogging <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-logging'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> withFetching <span class=\"token keyword\">from</span> <span class=\"token string\">'./with-fetching'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Importa seu componente</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">'./button'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Exporta a composição dos HoC</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>\n  withMessage<span class=\"token punctuation\">,</span>\n  withUserdata<span class=\"token punctuation\">,</span>\n  withLogging<span class=\"token punctuation\">,</span>\n  withFetching\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que achou dessa abordagem para reutilizar a lógica de seus componentes?</p>\n<hr>\n<p>Se quiser brincar um pouco mais, deixei um <a href=\"https://codesandbox.io/s/compose-react-hoc-53v3i\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Codesandbox</a> pronto para você dar uma olhada,\njá com as implementações manuais ou importando <code class=\"language-text\">compose</code> provido pelo <code class=\"language-text\">Redux</code>.</p>\n<p>Para testar os dois cenários é só comentar/descomentar as primeiras linhas no código onde tem a implementação/importação desse código:</p>\n<iframe\n     src=\"https://codesandbox.io/embed/compose-react-hoc-53v3i?autoresize=1&fontsize=12&hidenavigation=1&moduleview=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Compose React HoC\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>","timeToRead":8,"frontmatter":{"date":"13/02/2020","path":"/composicao-e-react-hoc/","title":"Composição e React HoC (Higher Order Components)","subtitle":"Alguns conceitos de programação funcional aplicados à criação de interfaces","banner":{"author":"Markus Spiske","href":"https://unsplash.com/photos/0Fd_bRYysT4","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20150v151l3%201c2%201%203%201%202%202l-3-1-2-1v78l4%201%209%204c3%202%205%202%208%202%204-1%2010-6%2011-9%201-4%202-5%203-4l18%201c19%200%2026%201%2034%206%203%202%2016%201%2017-1s23-2%2026%200c1%200%203%202%203%204%202%204%207%206%2015%209%209%202%2014%205%2015%209%202%204%207%206%2012%205%202%200%203%200%204%202%203%202%202%204-3%206l-4%204-3%204c-3%200-3%201-3%204s-3%206-5%206l-1%203c1%203%200%205-1%208l-2%206-1%204c-2%201-2%205-1%206%202%200%201%203-1%205s-3%204%200%204l1%205v6l2%203c0%203%206%209%2011%2012%209%204%2010%2011%203%2011-8%200-20%2010-20%2016%200%203%201%203%204%207l2%204c0%205-4%208-14%2011-4%201-7%203-7%204l-1%201-4%202-6%204-6%204-3%201c-2%200-2%201-2%204v4h-5l-5-1c0-1-2-2-6-2l-8-2-2-1-5-1-6-2-4-1h-1l-7%201-12%201c-5%200-5%200-5%204l-1%204c-2%200-2%201-2%204%200%204%201%205%208%205l3%201%204%201%204-1%2017-2%207-1c1-2%2032-3%2033-1v2c-3%202%206%208%2011%208l5%201%209%202%2013%202%204%201-4%202-4%203-2%201-3%202c-2%202-22%2012-28%2013-8%202-11%201-13-4-1-5-10-10-15-9-4%201-7%200-7-2%200-3-5-3-9%200-5%204-6%206-5%208s0%206-1%206c-2%200-9-4-9-6l-3-3c-5-5-24%200-26%207-2%205-9%209-20%209-16%201-14-1-14%2024s-1%2023%209%2021c3-1%205-2%205-4%202-3%206-4%2021-5%2017-1%2026-3%2032-8%202-2%205-2%2011-3%2012-1%2018-3%2024-9%208-7%2014-12%2017-13a339%20339%200%200038-13c14-4%2022-8%2026-12%203-2%205-3%208-3l9-3c8-2%2015-3%2044-2%2034%201%2052%200%2052-2l3-1h3l-3-2-3-4c0-2-3-3-10-2-2%200-3%200-3-2l-3-1-3-1-4-1-20-3-22-4c-10-1-9-1-8-3h5l1-1-2-1-2-1-2-1%201-1c3%200%203%200%2011-4l10-5c5-2%2020-12%2029-19l12-9c2%200%203-2%203-2l5-6c21-15%2032-33%2041-67%202-7%205-12%206-12v-6l2-7c0-6%201-6%203-5h4c5%2010%2025%200%2024-12%200-3-1-4-8-6-8-3-15-3-15-1l-1%203v2l-2%201c-2%200-2%200-2-5l-1-4c-2-2-1-2%2024-2l24-1v-4l2-7%201-8%201-4%201-2c0-3%209-6%2012-2l4%201c2%200-1-3-18-20l-22-21-1%203c0%205-2%209-3%2010-2%200-9-7-9-9l1-2c0-2%204-4%207-4s1-3-6-10a3364%203364%200%2001-47-49c-2-3-8-7-10-7l-4-3-8-5c-4-2-6-4-6-6-1-2-2-2-3-2-3%201-6-1-6-3l3-1%202-2c0-3%203-4%207-1%204%202%204%201%203-3%200-3%200-4-7-5-9-2-10-3-10-7%201-2%200-3-3-4h-3c-2%201-1%205%202%207l2%203%203%204c3%202%203%206%200%206-2%201-7-1-8-3v-2l-7-7-1-4%202-4c1-2%200-2-2-3l-3-2-2%201-3%204-2%202c-1%201-4%207-3%2010%200%203-2%203-9%202l-10-2c-3%200-5-1-7-3-6-5-16-8-25-8l-6-2c-4-1-4-1-3%201%201%203-1%205-4%205-2-1-3-1-3%201l-2%203-4%203c-2%202-3%201-4-1%200-2-2-4-4-5l-3-1%203-2c3-1%204-2%205-4%200-3%203-6%203-4l2%201%202%202%201%202c1%200%203-5%203-9l1-3%201-4c0-4-2-6-2-2%200%202-3%206-5%206l-1-8%201-8%201%204c0%203%200%204%202%204l1-4-1-4-1-4c0-4%200-4-2-4-3%200-3%200-3-8s0-8%203-8c2%200%202%200%202-4s0-4%203-4c2%200%202%200%202-4l-1-4-1-4c0-4%200-4%203-4%202%200%202%200%202-4%200-3%200-4%202-4l1-4c0-4%200-4%203-4%202%200%202%200%202-4%200-3%200-4%202-4l1-4v-4h8v-8h8v-8h10v-4l-1-4-1-1c0-2%201-2%204-2%204%200%204%200%204-2%200-3%200-3%204-3%203%200%204%200%204-2%200-3%205-6%2011-6%204%200%205%200%205-2s1-2%204-2l4-1%204-1%204-1%202-1%203-1h3c1%202%208%201%208-1s1-2%208-2l8-2%203-1%208-2%2012-3%209-1%204-1%204-1%2011-1a169%20169%200%200037-5l4%201%204-1%206-1%2026-3%209-1c20-2%2031-3%2031-5l12-1%2012%201%2040%201a314%20314%200%200172%205l44%201a378%20378%200%200177%204c15%200%2038%202%2039%203l12%201%2012%201%208%201%208%201%208%201c7%200%208%200%208%202s1%202%204%202l4%201%208%201%208%201%208%201c7%200%208%200%208%202l-1%202c-2%200-1%207%200%209%202%201%209%202%209%200l4-1h4v10h4l4-1%204-1h4v8h8v8h4l4%201%204%201c4%200%204%200%204%203s0%203%204%203h4v8h8v24h-4c-3%200-4%200-4%202s-1%202-4%202-4%200-4-2-1-2-4-2l-4%201-4%201-12-3c0-2-2-2-15-3l-15-3h-18l-10%201a13375%2013375%200%2001-255%2012l-14-1c-6-1-13%201-14%203l-2%201-1%201-1%202c-2%201-4%208-4%2015a705%20705%200%2001-2%2071%20626%20626%200%2001-3%2054%20372%20372%200%2001-5%2054c1%205-3%2018-6%2018l-1%203-1%205c0%206%207%2015%2013%2017h3l-3%201%208%201c9%200%209%200%205-1-6-1-6-1-2-1l4-1c-1-1%209-10%2010-10l7-3a10427%2010427%200%200126-12c7-4%2018-6%2029-6a1880%201880%200%200121-9c2-2%208-4%2016-5%2012-2%2018-3%2024-6%204-2%2016-6%2025-7l5-2%202-1%209-3c16-6%2024-8%2027-6h2c0-3%208%208%2012%2016%204%2011%201%2018-10%2020l-10%203-16%203a250%20250%200%2000-49%2017c-1%202-1%202-2%201%200-2%200-2-2-1-1%202-5%202-20%205l-49%2012c-9%204-10%203-13-2-4-9-11-12-21-9-8%202-11%207-15%2022l-2%204h-1l-1%201c-1-1-3%200-5%201l-5%202-2%202h1c1-2%202-1%201%201%200%202%200%202%203%202%205-1%208-3%208-6%201-2%201-2%201%200l-2%2011-1%207h-28a3057%203057%200%2000-30%202c0%202%202%204%206%209l5%206c5%208%2013%2011%2020%207%204-1%204-2%201-3h9l11%201v5c-2%207-1%2011%202%2017%202%204%203%205%202%206-3%201-75%200-72-2%202%200%203-2%204-4l2-4c1-3-2-12-5-13v-2l4%201c4%201%208%206%206%207l-1%203-3%207-2%204h21l4%201-41-42c-2%200-1%204%201%206%201%202%201%202-1%202-3-2-10-3-13-2-1%200-3%200-4-2-2-2-14-3-17-1v1l1%201-7%201h-7v-4c0-5-3-10-6-12-2-1-3-5%200-7%202-3%201-5-5-8-5-3-18-4-16-2l-1%201h-1l3%201h3l2%201c4%201%207%2013%204%2015v2l-2%201c1%202-7%209-13%2010l-5%203-1%201c-2%200-3%203-2%206l-1%202c-2-2-5%2022-3%2024l3-1h3l6%201c6%200%2014%203%2010%203-2%200-2%200-1%201%203%201%205%204%204%205-2%201-5%201-6-1h1l2-1c0-1-3-3-6-3l-3-1%204-1h2-17c-5%203%201%208%2010%2010%206%201%2014%200%2016-2%201-2%201-2-1-5l-2-2c2%200%206%204%206%207v16l-1%2014v-1l1-2%202-1%204-1%2018%201%2016%201-2%202v5c0%202%200%202-1%201l-2-4c0-2%200-3-4-3l-5%201c-1%201-2%201-6-1-13-4-27%203-16%208%2011%204%2026%202%2024-3l1-2%201%204c0%203%200%203%204%203l4-1%202-1c1%202%201%205-4%2052l-2%2013c-1%204%203%206%206%203%202-4%204-4%204%202%201%206%201%206-4%205-4%200-7%203-4%205l1%203c0%201%201%202%208%202%209%201%2010%200%2012-6%200-3%200-4-3-5l-2-2%202-1c3-1%203-1%203-7a358%20358%200%20019-63l1-4v-1l1%203c0%203%200%203%203%204%205%200%208-1%204-3-2-1-2-2-2-4%200-3%200-4-4-4-3%200-1-1%206-1%205%200%208%200%207%201-3%200-7%203-7%205l3%203c4%203%2021%204%2024%201%203-2%202-5-1-6l-6-3c-2-1-1-1%206-1%204%200%207%200%206%201-5%201-6%201-3%203l2%204c0%203%200%203%202%203s3%201%203%202l5%207%207%208c3%204%208%207%2013%207l9%203c4%203%204%203%207%202%203-2%204-2%205%200%201%201%200%203-2%203l-3%203-8%204-11%204-8%202c-4%200-2%202%204%202h6l3-1%204-1%209-4%202-2%201-2%207-2c4-2%205-2%204-3-2-1-2-5-1-9%200-2%201-2%203-2%202%201%202%201%202-2%200-2-1-4-4-4l-2%204c-3%206-6%208-9%205l-6-1c-2%200-5-5-2-5l3-6%202-6%202%201c3%201%204%201%202-1l-3-1-2-1c0-1-2-2-11-2l-8-1c13%200%2015-7%203-10-4-2-4-2%2012-2%208%200%2015%200%2014%201-7%202-9%203-9%206v2l-1-4c0-3-1-4-4-4-4%200-6%201-3%204%202%202%202%202%201%204-2%202%200%203%204%203l4-1c0-2%201-2%205%200l10%201c16%200%2017-7%203-10-5-2%202-2%2072-2%2076%200%2077%200%2076%202l-3%202c-4%201-3%203%200%204%204%200%204%202%201%202-4%200-8-2-8-4l-1-1c-2%200-1%204%201%205%202%202%2020%203%2024%201%203-2%204-5%201-6l-1%201c2%203-7%206-9%204-1-2-1-2%202-2%204%200%204-3%201-4l-4-2c-2-2-2-2%2016-2l20%201-3%201c-3%200-9%202-10%204-1%201%202%205%203%205v-2c0-3%201-4%203-1%202%202%202%201%204-2%201-3%201-3%204-1%202%200%203%202%203%203s5%202%207%200c1-1%201-1%201%201s2%202%203%200c2-3-1-6-7-7-10-1-3-2%2014-2%2010%200%2017%200%2016%201l-10%204c-2%201-2%204%201%206%205%202%2021%202%2024-1%204-3%204-4-2-6l-6-3a614%20614%200%200161%202h-1l-4-1c-5%200-6%201-4%204v4c-2%202-2%202%203%202s5%200%204-2c-2-1-2-2-1-4%201-3%202-3%202%200-1%201%200%203%201%205l3%203%201%2030v33c0%206%206%209%207%203%200-2%201-2%203-2s2%200%202%204%200%204-2%204c-6%200-8%201-10%205l-2%203h-65a511%20511%200%2000-80%204l2%201c1%200%202%200%201%201-1%203%205%205%2025%207l8-1c2-1%204-2%2013-2l6-2%207-1%207-1h3l12%201%2013%202%207%202%206%201h11l23-4%207-3%205-2c1-1%203-2%205-1%206%201%2014-6%209-9l-3-1c-2%200-1-2%202-3%202-1%202-1%202-6l-2-23v-19l3-1c2-2%203-2%202-4-1-3%200-6%201-5l1%204c0%204%202%206%203%202%201-2%204-3%2011-4h9c4-1%206%202%202%203-2%201-2%201-2%204v2c-1-1-2%201-1%208v6h4c3%201%208%200%2012-1l10-1h2c1-2%204-2%206%200v3l-1%202-3%206-3%207h15l-1-2c-1-1-2-11-1-12s4-1%204%201l1%204c1%203%201%203%202%202%203-3%203-2%203%204s-2%2011-6%2016l-2%203v-5c0-5-1-6-6-6-7%200-8%201-3%205l3%203h-22c-2%201%200%204%202%204l2%202%202%201c2%200%207%205%209%209%204%206%201%208-12%208-12%200-13%201-13%2010%200%206%200%207%203%2010%207%205%207%206%2021%208%208%201%2014%203%2014%204l8%203%205%202%204%203%209%205%207%204%207%204%206%202%204%202%206%202%208%202c0%201%2018%203%2028%203%2016%200%2030-2%2033-6l7-1c13%200%2020-5%2020-13%200-3%204-8%206-8l5-4c5-5%205-5%205-2%200%202%201%202%204%202l4-1%204-1%204-1-2-1c-2%200-2-1-2-4%200-5-6-11-12-13l-7-3-9-3-9-6c-6-5-14-5-17-1-3%203-5%202-3-1s-5-16-8-16l-4-2-11-1c-7-1-9-1-9-5l2-4v-8c-2-15-2-14%201-16l6-2c9%200%2012-3%2010-9s5-11%2010-7c2%202%202%202%200%205l-1%208c0%207%202%207%2013%207%2011-1%2012-2%2011-10%200-4%200-5%203-7%202-3%203-3%2011-3s15-2%2017-7l4-4c2%200%201-6-1-9-2-4%201-11%207-15%207-5%204-13-4-11-4%201-6%204-5%207%201%201%200%204-1%206l-3%204-7%201-9-1-2-1c-2%200-8-3-9-5-1-3%202-8%204-8%207-1%208-23%201-23l-3-4c-2-3-4-4-5%200%200%204-1%204-2%203l-3-19-2-20v-3h23l45%202h22v3l1-212V0H0v150m1196%205c-8%203-9%204-9%206v5c0%201%200%202-2%202v1c3%202%208%201%2012%200%203-1%203-2%203-8v-7l-4%201m-13%2028v4l1%201%202%202%201%203c0%202%203%203%206%202l4-1c3%200%203%200%203-5v-6l-8%201-8-1h-1M77%20259v4c1%202%200%203-1%205-2%203-1%203%203%206s8%204%2022%206h4v-4c-1-5%201-6%204-3l3%202%201%202c0%204%207-1%208-6%201-7-3-11-12-8-6%201-7%201-22-4-7-2-9-2-10%200m942%2023c-9%201-19%205-24%208l-3%201-8%203-8%201c-9%200-24%204-39%2011l-8%203-3%202-7%204-6%203h-13c-12-1-20%200-20%203l-7%202-15%205-15%204-9%202c-3%203-11%207-11%206l-1%201-1%202v1l2%202%204%204c3%203%204%206%202%206l-2%202-1%207c-2%205-2%206%201%2017l2%2013%208-4a966%20966%200%200019-10c5-3%206-3%206-7%201-5%202-6%208-6l4-1%2011-3c9-2%2011-2%2013-5%202-2%202-2%203-1h2l1-1%208-3%208-4%207-3c21-9%2025-11%2032-11l10-1c6-2%2022-2%2023%200l2%201%201%201%202%201%205%205%205%203c2%200%201%203-1%204l-12%204-2%201c0%201-2%202-8%202-10%201-26%207-23%209v2l-1%202c0%202%2010%205%2012%203l7-1%205-1c0-2%201-2%204-2h13c11%200%2012%200%2012%205%200%202%200%203%202%203l5%202%207%202c3%200%203%200%202-3l-5-8c-6%200-10-1-11-4s-2-3-8-5v-2c1-3%2016-3%2039%200h24l13-1%207-1c1-2%205-1%207%202v6c-3%202-2%203%200%203l9-3%208%202c3%202%203%202-1%206-2%201-3%203-2%203%201%202-5%205-9%205s-6%202-3%203c1%201%202%2017%200%2018l-12-4c-16-5-19-7-20-8-2-1-5%200-5%202l-1%203%202%203c3%201%203%202%203%205%200%207%203%209%2018%2011%209%202%2015%200%2021-6l7-4c5-1%2015-7%2016-8l6-3%203-1c-2-1%201-2%207-2%205%200%2018-4%2035-11a98%2098%200%200118-7l5-2v5a625%20625%200%20000-72c0%202-1%203-9%206l-11%205-3%202-1%201-6%203-7%205-2%201-1%201-4%201-4%201-10%201c-9%201-10%201-19%205a3234%203234%200%2001-23%2012c-5%204-6%204-10%200-3-3-6-5-14-8-13-4-11-3-28-11-16-8-25-11-31-13-5-1-6-2-7-6-1-3%200-4%207-7a211%20211%200%200026-11c9-4%2010-8%202-9a1102%201102%200%2001-26%200m-681%2055l-8%203c-6%202-10%209-5%209v4c-1%201%201%205%205%207l12%2013c1%202%202%202%2011%202h11l3%201c2-1%2013%202%2014%203l9%201c0-2-13-18-26-31-17-17-18-17-26-12m43%205c-3%203-3%206%201%208l2%203%202%202c4%202%209-10%205-14-2-2-8-1-10%201m421%204l-4%202c-2%200-4%204-4%208%200%205%201%207%204%205v-2l-1-3c0-3%200-3%205-4%203-1%206-2%207-1h1l-2-2c-2-1-2-1%203-2l6-1h-6c-6%200-7-1-2-2%201-1%201-1-2-1-2%200-3%201-5%203m-596%202c-2%201-1%207%201%208%202%200%203%201%204%203%202%203%203%203%205%202%205%200%207%202%205%205-2%201-2%202-1%203%202%202%204%201%207-2%204-3%207-2%207%202l2%204c1%201%201%201-1%203l-3%204-3%204c-4%203-8%202-8-3-1-4-5-4-6-1s-4%204-6%201l-6-1c-4%201-10-1-11-2%200%200-5-2-11-2-12-2-18-4-21-7s-7-5-16-6l-9-3-26-6c-3%200-2%202%201%203l15%207c3%203%2010%205%2014%205s5%201%2010%205%206%205%2013%206a149%20149%200%200117%205l5%203c1%203%204%205%208%205l5%201c2%203%205%203%208%201%204-3%2011-2%2027%205%205%202%206%203%208%207%206%2013%209%2015%2020%2018l11%204c1%201%201%200%201-1l-2-2v-3c2-1%202-2%201-2-2-1%200-3%202-3%203%200%204-3%202-4v-3c1-2%2013-2%2019%200%206%203%208%208%203%208-3%200-3%201%200%203l2%203-2%201c-3%200-3%203%200%204%201%200%202%201%201%202l1%203c2%202%202%202%201%208l-2%2010c-1%204-2%205-2%201%200-1-2-2-5-2s-4%200-3%201l1%203c0%202%200%202-1%201h-10l-4-1h-5l-1-2c-2-1%201-4%203-4l1-1c-1-3-2-3-4-2v1l1%201-4-2%202-1c2-1%204-12%203-14h-9c-6%200-8%200-10-2l-3-2h-3l-6-2h-3l2%203%203%203h-9c-10%200-11%200-10%203l-3%206-4%206-12-5c-7-3-8-2-9%206-1%207-4%2015-6%2017-4%203%200%207%206%206%206%200%2012%202%2013%206%200%202-1%205-3%205s-4%203-4%205l-3%203c-6%201-5%2011%201%2013l1%201c-2%201%200%203%209%205%209%203%209%203%2033%201l8%201c-1%202-21%206-44%208l-13%202-3%201c-7%200-12%204-7%206l2%201%201%201c3%200%207%202%207%204l1%202%201%205c0%208%202%2015%204%2012l2-1%201%201c-2%203%2010%202%2015-1h3c1%201%203%200%2019-6a150%20150%200%200049-34c11-3%2026-19%2034-36%205-8%2012-32%2014-42l1-3h-22c6%200%207%200%209-3%202-2%202-2%205-1%203%202%209%202%2010%201l1-12c0-6%200-10-1-9%200%201-1%201-2-1-2-2-3-5%200-7%203-3%204-9%202-10l-3%201c-1%203-3%201-4-4l-5-6-3-3h-21l-23%201-3%205c0%203-1%204-2%205-2%200-2%201-2%203%201%204-1%2016-2%2018-4%203-5%201-4-11%200-13%200-14-4-14l-5-4c-4-3-5-3-5%201-1%205-4%205-4%201v-5c1-1%200-2-1-3l-1-3c0-3-2-5-3-5-1%201-3%200-4-1-3-3-5-3-16-6l-9-2v-9h-8m597%2010l-2%203a14%2014%200%2000-7%2010v26l2-9c1-8%202-9%204-10s2-3-1-2v-11c0-2%201-3%206-3%203-1%205-2%203-2l-2-2-1-1-2%201m-85%209h-3v2c2%202%204%2022%203%2025l-1%2017c0%2016-2%2032-3%2033l-1-3c0-3%200-4-3-5-3-2-4-4-2-4%204%200-5-2-12-2-12%200-15%202-15%2011v6l-10-1h-11l2%206c2%204%203%208%202%2014-1%202%2018%203%2021%200l10-1%2012-2%203-2-4-1-8-1-6-1c-2-1-2-1%200-1l6-1c7-1%208-2%207-9%200-7%200-8%204-7%203%200%203%200%203%205v4l1%202h1l1%204c1%206%202%206%204%202%200-1%200-2%201-1%200%202%205%206%206%206%202%200%201%200-3-5l-4-7c-1-4%201-11%202-11l1-3%201-4c2-1%203-20%202-26-1-3%200-4%205-4%203%200%203%200%203%205%200%204%201%205%203%205%203%200%203%200%203-6v-6h4c5%201%206%202%205%206-2%205-1%2024%201%2026l1%204%201%204c1%201%202%205%202%2011%200%207%201%209%202%209l2%204v3h7l12-2c10-1%2011-3%203-6-5-1-5-1-3-2l2-2c0-2-2-3-2-2-1%201-1%200-1-2-2-5%205-11%2011-11%205%200%205-1%201-3l-2-3c0-2-7-4-12-4l-13%203-1%201-1-20c0-22%201-31%202-29l3%201-2-3-3-9-1-5h-9l-17-1-12-1v-1l-1%201m-281%209c-4%203-5%205-3%209%200%202%202%203%202%203l6-3c-1-1%201-3%203-3%203%200%204-4%201-6-2-3-5-3-9%200m-127%207l-3%203c-2%200-4%205-4%208l3%202%201%202c0%204%206%204%209%201l4-3c3-2%205-7%203-9l-2-4-4-2c-5-1-5-1-7%202m295%207c1%202%200%206-1%2013l-2%2010-1%204%203-3c7-7%208-14%204-21-3-5-5-7-3-3m76%206c-1%202-2%202-5%201h-6a1419%201419%200%2001-54%202c-1%201%205%2013%207%2012v3c-1%203%202%203%204%201s3-2%203-1v3c1%202%202%202%203%201l2-2%204-2c4-3%205-3%202%200l-2%202h6l19%201c17%201%2017-1-1-3l-13-1%2014%201c19%200%2018%200%2018-12l-1-6m114%204l-1%2018v3l2-2%203-1c0%202%202%201%202%200l-1-2v-1l1-5-1-3c-2%202-3%201-3-3%200-5-1-7-2-4m-404%203l-5%206c-2%203-3%2011-2%2010l1%202v2h1c0%201%201%202%202%201v2l2%201h3c4%200%208-2%208-3l1-1%203-3c0-2%201-3%202-3%202%200%201-4-2-7l-2-2h2c3%201%203%201%203-1l-1-2-2-1c-3%201-5%200-3-2%202-1%201-2-3-2-3-1-4-1-8%203m-378%201l-3%204c-1%202-4%203-6%204l-3%201v18h5a348%20348%200%200058-2l20-5%2020-5c4%200%204-5-1-7H64c-8%200-8%200-8-2l-2-2-3-1a3055%203055%200%2001-38-2m1004%2014c1%203-5%204-18%205-14%200-15%200-13%207%203%208%203%208%2026%207l35%201%2023%201h12l3-4c12-12%2012-15%201-12l-8%202-4-3c-5-5-10-5-13-1-2%202-3%202-15%202-8%200-12%201-12%202-1%201-2%200-3-2l-5-2-4-2c-2-2-6-3-5-1m-224%2013v25c1%202%202-1%202-10%200-7%200-9%202-10l2-4%201-2v-6h-4l-3-1v8m131%202c-3%2013-15%2019-24%2012-3-2-3-2-9-1l-6%201-1%204c-1%205-1%205%204%204l27-1%2024-1v-5c0-3%200-4%204-9%206-9%206-9-7-9h-10l-2%205m-622%2012l3%205c3%205%203%206-1%2010s-5%205-13%205c-4%200-5%201-2%204s8%203%2011%200l6-5%204-5c1-5%201-5-2-8l-3-5c-1-2-3-3-3-1m314%201l-5%201c-9%201-17%2012-11%2015%2010%205%2024-7%2017-15%200-2-1-2-1-1m-42%202l-3%203c-1%202-1%203-4%203l-3%201c0%205%207%207%209%203%201-3%203-4%206-3h2l-4-8-3%201m-339%203c-3%202-4%202-12%201l-9-1c-7%202-11%2019-6%2020%2014%204%2017%206%2017%2011%200%203%201%204%205%207%207%205%209%205%2017%205%206-1%207-1%208-4l3-3c2%200%202-1%202-3l2-5c1-2%202-3%201-5l1-4c2-1%203-4%201-4l-1-4c1-7-8-13-20-13-5%200-7%201-9%202m413-1c-1%200-3%201-3%203-1%202-2%203-6%204h-2l2%203c2%204%206%204%209-1l4-2c2%200%202%200%202-3-1-3-3-5-6-4m461%2026l2%2012c0%2010%201%2012%203%2012l2-8-2-9c-1-8-3-12-4-12l-1%205m-499%2026c-6%203-7%204-4%207%203%202%203%203%2013%203%209%200%2011-1%2013-2%205-6-12-11-22-8m40%200c-7%202-9%204-5%208%203%202%2023%202%2025%200%203-2%202-3%200-5-5-3-15-5-20-3m41%200c-10%202-12%206-5%209h7l-4-1-3-2c-1-2-1-2%202-2%202%201%203%201%204-1%200-3%205-2%207%201%201%202%204%203%206%201%200-2%202-1%202%201l-2%202c-5%201-5%202-1%202%204-1%207-3%207-5%200-3-12-6-20-5m153%201c-14%204-1%2012%2015%209%209-2%2012-5%206-8-4-2-16-2-21-1m47%20100l-3%201-2%202c-3%201%202%206%208%207%207%201%2011%203%2015%207l3%203%203-2c7-3%208-7%204-11-5-7-13-9-28-7M99%20621c-4%206-12%207-20%204l-4-2-5%205c-6%207-5%208%205%204l13-3c6%200%209-1%2012-3l6-3c3-1%204-4%201-4h-3c-2-1-3%200-5%202m301%2031l-13%201c-10%200-10%200-11%206-4%2016-3%2017%2013%2017%2011-1%2017-2%2019-4%203-3%203-9%202-12l-2-5c0-2-2-4-3-4l-5%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/badf5bc388593cefee1bd9e287a3622e/21095/banner.jpg","srcSet":"/static/badf5bc388593cefee1bd9e287a3622e/36b10/banner.jpg 300w,\n/static/badf5bc388593cefee1bd9e287a3622e/88367/banner.jpg 600w,\n/static/badf5bc388593cefee1bd9e287a3622e/21095/banner.jpg 1200w,\n/static/badf5bc388593cefee1bd9e287a3622e/97ce3/banner.jpg 1800w,\n/static/badf5bc388593cefee1bd9e287a3622e/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/badf5bc388593cefee1bd9e287a3622e/58d74/banner.jpg"}}}}}}},"pageContext":{}}}