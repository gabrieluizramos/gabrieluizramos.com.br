{"componentChunkName":"component---src-templates-post-article-index-js","path":"/escrevendo-suas-proprias-regras-de-lint","result":{"data":{"markdownRemark":{"id":"64300975-78c6-5289-b565-22e36fc3e1d4","html":"<p>Já parou pra pensar como ferramentas como o <a href=\"https://eslint.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ESLint</a> funcionam? Como a análise estática do seu código é realizada. Já teve vontade de criar seu plugin e não sabe como? Então, bora lá, ao fim do processo teremos um exemplo de plugin pronto para ser utilizado.</p>\n<p>Antes de começar a desenvolver, precisamos entender um conceito bem importante e vai servir de base pra criar uma regra customizada de lint (como está nesse exemplo).</p>\n<h3 id=\"arvore-de-sintaxe-abstrata-ast-ou-abstract-syntax-tree\" style=\"position:relative;\"><a href=\"#arvore-de-sintaxe-abstrata-ast-ou-abstract-syntax-tree\" aria-label=\"arvore de sintaxe abstrata ast ou abstract syntax tree permalink\" class=\"anchor before\">#</a>Árvore de Sintaxe Abstrata (AST, ou <em>abstract syntax tree</em>)</h3>\n<p>É praticamente a fundação de como as ferramentas como o ESLint (ou o <a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Babel</a>) avaliam e processam um código.</p>\n<p>Como o próprio nome entrega, é uma estrutura de dado de árvore e é o resultado do \"parseamento\" do código escrito estaticamente, contendo todas as declarações, funções, imports e estruturas presentes em um trecho de código.</p>\n<p>Para nos ajudar a entender e criar nossas regras de Lint, vamos utilizar o <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Explorer</a>. É uma ferramenta totalmente gratuita (é só acessar e usar) que gera pra gente uma <strong>AST</strong> baseado em qualquer código que a gente escreva.</p>\n<p>Para entendermos um pouco melhor e termos ideia de como funciona, podemos imaginar que, esse trecho de código em JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'gabriel'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Gera a seguinte <strong>AST</strong> (convertida para <strong>JSON</strong>):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Program\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VariableDeclaration\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"declarations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VariableDeclarator\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Identifier\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"init\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Literal\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"end\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gabriel\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"raw\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"'gabriel'\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"kind\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"const\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pode assustar à primeira vista. Mas, olhando com um pouco mais de calma podemos analisar como essa árvore foi criada e que existem várias informações nessa estrutura que servirão como base para criar as regras do nosso plugin. Vamos dar uma lida nelas:</p>\n<ul>\n<li>nosso exemplo possui um tipo (type <strong>Program</strong>) e cada declaração interna também: a declaração da nossa variável (type <strong>VariableDeclarator</strong>), com um nome (type <strong>Identifier</strong>) e um valor inserido (type <strong>Literal</strong>);</li>\n<li>possuímos o corpo do nosso programa (<strong>body</strong>) como um array de instruções, cada um dos objetos dentro é uma das instruções de nosso sistema;</li>\n<li>temos o início e o fim das declarações (<strong>start</strong> e <strong>end</strong>);</li>\n<li>podemos verificar o nome (<strong>name</strong>) e os valores (<strong>value</strong>) de cada declaração;</li>\n<li>temos, inclusive, o tipo (<strong>kind</strong>) da nossa variável (que foi declarada como \"const\").</li>\n</ul>\n<p>Com isso, podemos prosseguir pra criação e instalação dos pacotes necessários do nosso plugin.</p>\n<h3 id=\"preparando-o-ambiente-e-definicao-do-modulo\" style=\"position:relative;\"><a href=\"#preparando-o-ambiente-e-definicao-do-modulo\" aria-label=\"preparando o ambiente e definicao do modulo permalink\" class=\"anchor before\">#</a>Preparando o ambiente e definição do módulo</h3>\n<p>Não tem muito segredo na hora de preparar o ambiente pra criar um plugin ou uma regra de ESLint. Entretanto, se você quiser (como a própria documentação <a href=\"https://eslint.org/docs/developer-guide/working-with-plugins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sugere</a>), você pode instalar o <a href=\"https://yeoman.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yeoman</a> e o <a href=\"https://www.npmjs.com/package/generator-eslint\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gerador do ESLint</a>, da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> i -g yo generator-eslint</code></pre></div>\n<p>Ao executar isso no seu terminal ambos os pacotes já estarão instalados e, para criar um plugin seguindo o padrão definido pelo ESLint, basta executar:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">yo eslint:plugin</code></pre></div>\n<p>Ao executar esse comando, algumas perguntas aparecerão no seu terminal e, ao fim do processo, você terá uma estrutura base para iniciar o desenvolvimento das regras do seu plugin.</p>\n<p>Nessa hora vale ter em mente algumas pequenas restrições necessárias para criar seu plugin. De acordo com a documentação do ESLint, os plugins devem seguir um padrão:</p>\n<ul>\n<li>Devem ser um pacote do <code class=\"language-text\">NPM</code>;</li>\n<li>Devem começar o nome com <code class=\"language-text\">eslint-plugin-&lt;nome&gt;</code>;</li>\n<li>Podem conter um prefixo de escopo como <code class=\"language-text\">@&lt;escopo&gt;/eslint-plugin-&lt;nome&gt;</code>.</li>\n</ul>\n<p>Caso precise realizar algum juste de nomenclatura (como adicionar um escopo ao seu plugin), a melhor hora é agora.</p>\n<p>Podemos configurar o <a href=\"https://astexplorer.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AST Explorer</a> para simular um ambiente com ESLint em execução. Ao acessar o site, basta clicar na aba <code class=\"language-text\">transform</code> e selecionar a opção <code class=\"language-text\">ESLint V4</code>.</p>\n<p>Feito isso, algumas abas novas aparecerão na parte de baixo da tela. Uma para declararmos nossa regras customizadas e a outra com a saída de erros do ESLint.</p>\n<h3 id=\"criando-as-regras\" style=\"position:relative;\"><a href=\"#criando-as-regras\" aria-label=\"criando as regras permalink\" class=\"anchor before\">#</a>Criando as regras</h3>\n<p>Existem <a href=\"https://eslint.org/docs/developer-guide/working-with-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">diversas opções</a> para criar uma regra. Vamos imaginar que criaremos uma regra de lint que irá disparar um erro ao encontrar uma declaração de variável com <code class=\"language-text\">var</code>.</p>\n<p>Ou seja, esse trecho de código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'gabriel'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Deveria receber uma mensagem como <code class=\"language-text\">Você não deveria declarar variáveis com var. Utilize const ou let.</code></p>\n<p>Precisaremos exportar, do nosso pacote, um objeto com uma chave <code class=\"language-text\">rules</code> contendo a definição de todas as nossas regras. Algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// aqui vão nossas regras</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Podemos dar qualquer nome pra nossa regra (e é esse nome que será usado ao inserir o plugin nas configurações em um <code class=\"language-text\">eslintrc</code>). Vamos dar o nome de <code class=\"language-text\">sem-var</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'sem-var'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// código da regra</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para que as regras sejam executadas corretamente, elas precisam possuir um método <code class=\"language-text\">create</code>, que será executado pelo ESLint ao carregar nosso plugin. Esse método recebe como parâmetro um objeto chamado <code class=\"language-text\">context</code>. Com isso, uma regra deve ficar mais ou menos da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'sem-var'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">create</span><span class=\"token operator\">:</span> <span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Daqui a pouco veremos como utilizar esse <code class=\"language-text\">context</code>. Agora, precisamos definir como retorno dessa função <code class=\"language-text\">create</code> um objeto que irá conter as chaves dos tipos de cada um dos nós da <strong>AST</strong> de um código JS.</p>\n<p>Em outras palavras, como queremos verificar as declarações de variáveis, podemos atrelar uma função a uma chave <code class=\"language-text\">VariableDeclaration</code> (que é o <strong>type</strong> que encontramos na nossa <strong>AST</strong>).</p>\n<p>Para fazer isso, basta retornarmos essa chave em um objeto do método <code class=\"language-text\">create</code>. Algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'sem-var'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// agora retornamos um objeto</span>\n      <span class=\"token function-variable function\">create</span><span class=\"token operator\">:</span> <span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// atribuímos uma função</span>\n        <span class=\"token comment\">// para a chave VariableDeclaration</span>\n        <span class=\"token comment\">// que receberá como parâmetro cada um dos nós desse tipo</span>\n        <span class=\"token function-variable function\">VariableDeclaration</span><span class=\"token operator\">:</span> <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// definição da regra</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, já temos uma função que será disparada para cada nó de uma <strong>AST</strong>. Agora chegou a hora de entendermos a utilização do parâmetro <code class=\"language-text\">context</code> da função atribuída ao <code class=\"language-text\">create</code>.</p>\n<p>Esse objeto <code class=\"language-text\">context</code> possui uma <a href=\"https://eslint.org/docs/developer-guide/working-with-rules#the-context-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">série de funcionalidades</a>, a que nos interessa, nesse momento, é a funcionalidade responsável por disparar as mensagens de erro da nossa regra de lint.</p>\n<p>Essa funcionalidade é a <code class=\"language-text\">report</code>. Ou seja, para indicarmos uma erro em nossa regra, basta executarmos a função report e informar o nó que deve ser corrigido e uma mensagem de erro. Mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  node<span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'Você não deveria declarar variáveis com var. Utilize const ou let.'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso em mente, podemos criar a validação dentro de nossa regra e já disparar o método <code class=\"language-text\">report</code> ao encontrarmos alguma declaração que use <code class=\"language-text\">var</code>. Para validarmos o tipo de uma variável, podemos verificar se o nó possui a propriedade <code class=\"language-text\">kind</code> e se essa propriedade é igual a <code class=\"language-text\">var</code>. Dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'sem-var'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">create</span><span class=\"token operator\">:</span> <span class=\"token parameter\">context</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">VariableDeclaration</span><span class=\"token operator\">:</span> <span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// verificamos se existe \"kind\"</span>\n          <span class=\"token comment\">// e se é igual a \"var\"</span>\n          <span class=\"token keyword\">const</span> estaDeclarandoComVar <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'var'</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token comment\">// caso seja, reportamos o erro</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>estaDeclarandoComVar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n              node<span class=\"token punctuation\">,</span>\n              message<span class=\"token operator\">:</span>\n                <span class=\"token string\">'Você não deveria declarar variáveis com var. Utilize const ou let.'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Da parte da regra, é isso!\nAgora, precisamos também garantir que nossa regra está disparando os erros como o esperado.</p>\n<h3 id=\"testando-nossa-regra\" style=\"position:relative;\"><a href=\"#testando-nossa-regra\" aria-label=\"testando nossa regra permalink\" class=\"anchor before\">#</a>Testando nossa regra</h3>\n<p>O ESLint disponibiliza um utilitário chamado <a href=\"https://eslint.org/docs/developer-guide/nodejs-api#ruletester\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">RuleTester</code></a>, justamente para auxiliar na tarefa de testar os cenários válidos e inválidos das nossas regras.</p>\n<p>Para iniciarmos, vamos criar um arquivo e criar uma instância desse <code class=\"language-text\">RuleTester</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo teste.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eslint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso seja necessário, você pode passar configurações extras ao instanciar o <code class=\"language-text\">RuleTester</code> para realizar qualquer configuração extra do ESLint.</p>\n<p>Para executar algum deste, basta executarmos método <code class=\"language-text\">run</code> dessa instância criada, passando 3 parâmetros:</p>\n<ul>\n<li>uma string nome do teste/regra;</li>\n<li>a referência regra em si;</li>\n<li>um objeto contendo as chaves <code class=\"language-text\">valid</code> e <code class=\"language-text\">invalid</code> que são arrays com amostras de código válido e inválido (com as mensagens de erro esperadas).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> RuleTester <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eslint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tester <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleTester</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> regra <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../rules/sem-var'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntester<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Sem var'</span><span class=\"token punctuation\">,</span> regra<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  valid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">const nome = 'gabriel';</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  invalid<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      code<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">var nome = 'gabriel';</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          message<span class=\"token operator\">:</span>\n            <span class=\"token string\">'Você não deveria declarar variáveis com var. Utilize const ou let.'</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, basta executarmos esse arquivo:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">node ./teste.js</code></pre></div>\n<p>E nosso teste passará com uma mensagem de sucesso no terminal! ✨</p>\n<p>Brinque um pouco com os testes para ver as mensagens funcionando corretamente! Vale a pena se acostumar com essa ferramenta.</p>\n<p>Caso você não queira ficar escrevendo trechos de código diretamente em uma string, você também pode utilizar outras ferramentas do Node (como o módulo <code class=\"language-text\">fs</code>), para criar alguma abstração que leia o conteúdo de algum arquivo JS e evitar ficar manipulando uma string diretamente.</p>\n<h3 id=\"aplicando-o-plugin-no-seu-projeto\" style=\"position:relative;\"><a href=\"#aplicando-o-plugin-no-seu-projeto\" aria-label=\"aplicando o plugin no seu projeto permalink\" class=\"anchor before\">#</a>Aplicando o plugin no seu projeto</h3>\n<p>Agora que terminou o desenvolvimento, é só inserir o plugin no seu projeto. Você pode publicar o pacote e instalar onde quiser ou utilizar o <code class=\"language-text\">npm link</code> para testar localmente se tudo está funcionando como o esperado.</p>\n<p>Para isso, lembre-se de ajustar seu arquivo de configuração do <code class=\"language-text\">eslint</code>, inserindo seu plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    \"meu-plugin\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E aplicando a nova regra ao projeto:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"meu-plugin/sem-var\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"e-isso-ai\" style=\"position:relative;\"><a href=\"#e-isso-ai\" aria-label=\"e isso ai permalink\" class=\"anchor before\">#</a>É isso aí!</h3>\n<p>Já tinha criado seu plugin ou regra customizada do ESLint? Já tinha estudado ou ouvido falar sobre o termo <strong>AST</strong>?</p>\n<p>Espero que tenha curti e entendido um pouco como essas ferramentas funcionam. Acho que que criar uma regra de Lint customizada agora será uma tarefa mais fácil para você!</p>","timeToRead":8,"frontmatter":{"date":"22/06/2020","path":"/escrevendo-suas-proprias-regras-de-lint","title":"Escrevendo suas próprias regras lint","subtitle":"O que são Árvores de Sintaxe Abstrata e como utilizá-las para criar regras de validações específicas para o seu projeto usando ESLint","banner":{"author":"amirali mirhashemian","href":"https://unsplash.com/photos/kiH-RBm08NQ","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20375v375h599v-30a12229%2012229%200%2001-3-197%2027817%2027817%200%2001-4-164%20475%20475%200%2001-3-38v-7h-4c-8%200-9%201-9%204l-1%203c-1%200-2%200-2-2%200-3-4-4-9-3l-11%202-10%202h-4l1%207c0%208-1%2010-3%204-1-3-3-4-7-3l-1-1h-3c0%203-2%204-4%202s-2-2-3-1c0%202-3%203-3%200l-4-1h-7c-3-1-3-1-3%201%200%204-2%206-4%204-3-1-7-2-10%200h-4l-2%201-7%201-7%201-6%201c-3%200-4%200-4%202%200%203-2%204-5%202-4-3-15-3-23%200l-6%203c0%201-4%202-12%202l-8%202c-1%202-2%202-3%201h-1l-6%201c-5%200-6%200-8%202-1%203-2%203-9%203l-10%201-6%202c-20%200-30%201-32%202-6%203-10%204-17%205l-11%203-4%201-3%201c-1%202-3%202-11%202a730%20730%200%2000-35%200l-5%202-3%201h-8c0%202-9%207-13%207l-7%201c-3%203-12%201-12-2%200-2-10-3-14-1-2%201-3%202-4%201s-1-1-1%202c0%204-4%205-11%204-1-1-2%200-4%203-3%203-5%204-9%201s-13-3-16%200c-4%205-8%208-9%208l-3%203c-1%203-4%203-7%200h-4v-2c0-2-5-7-8-7l-3-1-6-2c-5-1-9-4-6-5l1-3c0-2%200-2%204-2l4-1c0-2%201-2%204-2s4%200%205-2c0-2%201-2%204-2%202%200%203-1%203-2l1-1%201-1c-1-5%203-4%207%200l2%201c-1-2%205-10%208-10l3%205c3%205%203%205%205-1l3-5%203-3c2-2%204-1%207%203%203%203%206%205%2016%207h7c1-1%201-1%201%201l1-2v-4l3-1%204-2h5c4%200%205%200%207-2l4-3c3%200%209-2%2011-4%201-1%203-1%2012%204%206%203%2010%204%2013%202l6-2%209-3%203-1%202-1%202-1%205-1%207-2%208-2c4-2%205-2%207%200h5l4-2%202-1%2016-5h8l23%201c3%201%2019-3%2022-5l8-1c10%200%2010%200%2012-2s3-3%204-2c4%202%2025%202%2029%200l10-2%208-2%204-1%203-1c2-2%209%200%2010%202h5l2-2%203-2c2-1%202-1%205%201%201%202%202%202%203%201h2l2-1c0-2%201-2%206-1h6c1-2%204-2%209-3l10-1%206-1c2%200%203-1%203-2l4-1h8c2%202%207%202%208%200s5-3%206-2h3l4-1c1%201%202%200%203-1%201-2%203-2%202%201%200%202%200%202%202%201h4l4-2%207-2c3%200%204%200%204-2l1-3%201%203c-1%203%200%204%203%203l1-49c0-44%200-48%203-48l2-4v-11c1-8%202-12%205-15%202-2%207-3%2010-1l4%202c7%200%209%2012%209%2065a3842%203842%200%20001%2067l-2%203c0%202-1%201-4-2l-5-4-2-2%202-3%201-3-1-2v-5l1%202c1%201%201-5%201-15l-2-31c-1-3-1-10%201-14v-14l-1%203c-1%202-1%201-1-2l-1-4-1-2-1%201c-1%201-1%201-1-1%200-3%200-3%203-3h3c1-6-2-24-3-24s-1%203%201%2011c0%204-3%2010-4%2010-3%200-4%2028-2%2042v30l1%2014v2l-1%204c-2%205-3%206-6%205l-3-4c-1-1-1%200-1%202a703%20703%200%2001-1%2030c2%202%203%209%205%2021a21979%2021979%200%20006%20385v11h11l-1-61a323%20323%200%2000-2-80l1-22a5641%205641%200%2001-3-173c-1-30-1-34-4-44a301%20301%200%2001-8-41c-2-11-1-16%204-17l3-3c1-6%2012%203%2020%2016%201%203%203%205%204%205l4%204c3%205%205%205%205%202s2-4%204-2%204%201%203-1c0-3%201-4%206-4%207%200%209%203%205%207-2%202-4%202-10%200-2%200-2%200-1%202%203%204%202%206%200%206-3%200-4%201-2%206s12%2012%2015%2012c2%200%203%201%203%206l3%208%202%207%203%207%203%205c2%204%203%205%207%207%205%202%205%203%205%205l1%202%209%201c4%201%204%202%201%204-2%201-2%201-1%202%201%202%206%201%206%200l2%201c2%201%202%203%202%203l1%202v3c-3%205%202%2013%2012%2022%203%202%205%205%205%206%200%202%2012%2019%2019%2026l2%206c1%204%203%206%2011%2018a46%2046%200%20016%209l4%205%2010%2012%208%2010%2010%2014%204%207%205%209%203%205%2012%2017%209%2012c6%2010%2011%2015%2014%2018l2%204%208%2014%204%208%202%202%202%202%204%205%207%207%2012%2021%202%203%204%205%204%205%208%2013%202%202%203%205%206%209%206%207%201%202%201%201%201%202c2%200%204%203%205%206l3%206h275V0H0v375m518-34c2%206%206%209%2011%207h5c5%200%207-3%204-6l-1-2-4%202c-6%203-7%203-11-1-5-4-5-4-4%200m103%2014a4624%204624%200%20002%20219l2%2096%201%2080h109c85%200%20108%200%20107-1l-3-5-7-11-5-10-1-2c-1%200-3-3-4-7l-4-8-8-13a248%20248%200%2000-11-21l-3-8-3-4-2-4-1-2a126%20126%200%2000-6-11%20112%20112%200%2000-10-21l-3-5-4-8-3-5-4-5-4-6-2-5-2-4-4-6-4-9a262%20262%200%2001-16-30l-3-3a8101%208101%200%2001-66-124l-9-14-8-8-1-9-2-10-4-6c-8-13-12-17-14-10m-125%208c-1%202%201%2010%203%2010h4l5-3c3-1%202-4-2-6-3-2-10-3-10-1m-25%2017c-4%202-4%204%200%207%203%203%206%203%207%201h2l2-1c3-6-4-11-11-7'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/78e74488e42d8c5f5bc04d667a5dc07c/21095/banner.jpg","srcSet":"/static/78e74488e42d8c5f5bc04d667a5dc07c/36b10/banner.jpg 300w,\n/static/78e74488e42d8c5f5bc04d667a5dc07c/88367/banner.jpg 600w,\n/static/78e74488e42d8c5f5bc04d667a5dc07c/21095/banner.jpg 1200w,\n/static/78e74488e42d8c5f5bc04d667a5dc07c/97ce3/banner.jpg 1800w,\n/static/78e74488e42d8c5f5bc04d667a5dc07c/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/78e74488e42d8c5f5bc04d667a5dc07c/58d74/banner.jpg"}}}}}}},"pageContext":{}}}