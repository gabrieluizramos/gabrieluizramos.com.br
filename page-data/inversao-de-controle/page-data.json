{"componentChunkName":"component---src-templates-post-article-index-js","path":"/inversao-de-controle","result":{"data":{"markdownRemark":{"id":"4adbc062-0cf3-5b08-bd32-f928b454259a","html":"<p>Talvez você já tenha ouvido falar no termo inversão de controle. É um princípio de desenvolvimento que, embora tenha um nome um pouco confuso, é mais simples do que parece e muito provavelmente você já aplicou sem perceber.</p>\n<h3 id=\"entendendo-o-conceito\" style=\"position:relative;\">Entendendo o conceito</h3>\n<p>Inversão de controle é um conceito onde, ao invés de declarativamente você executar uma ação, algum trecho de código como um framework ou algum outro método executa essa ação por você.</p>\n<p>Isso te lembra alguma coisa... ?</p>\n<p>Exatamente, estou falando de <code class=\"language-text\">callbacks</code> mesmo! Geralmente, quando um <code class=\"language-text\">callback</code> é fornecido, um outro trecho de código será responsável por disparar essa função.</p>\n<p>Vejamos esse trecho de código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicou'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Registramos a função <code class=\"language-text\">callback</code> pra ser executada quando um click de um botão em nossa interface ocorrer. Quem irá, de fato, disparar essa função, é o próprio navegador quando o evento ocorre, certo?</p>\n<p>Isso é um exemplo bem simples e direto de inversão de controle sendo aplicada. Outro bem conhecido é quando utilizamos as famosas funções de <code class=\"language-text\">.map</code>, <code class=\"language-text\">.filter</code> e <code class=\"language-text\">.reduce</code>.</p>\n<p>Quando indicamos um <code class=\"language-text\">callback</code> para uma função <code class=\"language-text\">.map</code>, por exemplo, somando <code class=\"language-text\">+1</code> em um array existente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> novoArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">valor</span> <span class=\"token operator\">=></span> valor <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O código responsável por executar esse <code class=\"language-text\">callback</code> (que incrementa <code class=\"language-text\">1</code> nos valores de nosso array) não está em nosso controle, apenas a função que será utilizada para gerar esse resultado.</p>\n<p>Essa abordagem é completamente inversa ao cenário mais explícito, onde podemos optar por criar um loop e construir um novo array manualmente, assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> novoArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  novoArray<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Quando utilizamos <code class=\"language-text\">.map</code>, indicamos a função que será executada pelo método pré-existente na linguagem, quando realizamos isso manualmente, temos controle total sobre a execução do nosso código e a inversão de controle não é aplicada.</p>\n<h3 id=\"como-frameworks-de-injecao-de-dependencia-aplicam-isso\" style=\"position:relative;\">Como frameworks de injeção de dependência aplicam isso</h3>\n<p>Inversão de controle é algo muito utilizado por frameworks de injeção de dependência (outro tópico que <a href=\"/desmistificando-injecao-de-dependencia/\">já comentei anteriormente por aqui</a>) e isso se dá pela forma como esses frameworks são feitos.</p>\n<p>Esses frameworks geralmente trabalham criando uma espécie de \"container\" que é responsável por armazenar as instâncias das dependências das aplicações. Após instanciar todas as funções e objetos necessários, a aplicação é, de fato, executada pelo próprio framework.</p>\n<p>Dessa forma, seu código passa a receber suas dependências via parâmetro e não mais através de <code class=\"language-text\">imports</code> ou utilizações diretas.</p>\n<p>Para revisar esse tópico, de forma breve, se fossemos pensar, por exemplo, numa função que depende de outra diretamente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo a.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'1234'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// arquivo b.js</span>\n<span class=\"token comment\">// importamos a</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// funcao b utiliza a internamente</span>\n  <span class=\"token keyword\">const</span> valor <span class=\"token operator\">=</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// execução da função b</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Podemos realizar a injeção desses valores, mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo a.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'1234'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// arquivo b.js</span>\n<span class=\"token comment\">// importamos a</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// agora b recebe funcaoA como parâmetro</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">funcaoA</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> valor <span class=\"token operator\">=</span> <span class=\"token function\">funcaoA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// execução da função b e fornecemos a como parâmetro</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>É uma forma simples de relembrar o conceito e começar a entender como um framework de injeção de dependências vai funcionar.</p>\n<h5 id=\"construindo-um-ingenuo-framework-injecao-de-dependencias\" style=\"position:relative;\">Construindo um (ingênuo) framework injeção de dependências</h5>\n<p>Para que possamos ter um exemplo um pouco mais real, vamos criar um framework de injeção de dependências e uma aplicação bem simples utilizando sua implementação. Ele será responsável por:</p>\n<ul>\n<li>Registrar todas as dependências e funções da nossa aplicação;</li>\n<li>Construir um container contendo as instâncias dessas funções e dependências;</li>\n<li>Iniciar a execução da aplicação.</li>\n</ul>\n<p>A aplicação será composta por algumas funções que, dado o nome de um personagem (de Star Wars), irá retornar o planeta onde esse mesmo personagem nasceu (através de um objeto estático já configurado).</p>\n<p>Para começar nossa implementação, vamos criar um objeto bem simples chamado <code class=\"language-text\">framework</code> que conterá nossa implementação.</p>\n<p>Como sabemos que precisaremos de uma lista de dependências e de um container para ter os objetos construídos, vamos iniciar esses valores também:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// criamos o framework</span>\n<span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// lista de dependências</span>\n  dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// container que irá armazenar os objetos/dependências</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, precisaremos criar uma função que será responsável por registrar as dependências de nossa aplicação, vamos chamá-la de <code class=\"language-text\">registrar</code>. Essa função vai apenas adicionar uma dependência nova no array de <code class=\"language-text\">dependencias</code>.</p>\n<p>A propriedade <code class=\"language-text\">name</code> é um valor presente em qualquer função em JavaScript, podemos utilizar ela ao longo de nosso código para nos auxiliar em alguns cenários, desde logs e até algumas que vamos realizar mais adiante.</p>\n<p>Por enquanto, vamos utilizá-la apenas para fazer um <code class=\"language-text\">log</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// criamos a função registrar</span>\n  <span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// inserimos o log de registro</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registrando </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependencia<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// realizamos o push no array de dependencias</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dependencia<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Precisaremos agora de um método para executar e construir as dependências da aplicação. Vamos chamá-lo de <code class=\"language-text\">construir</code>. Esse método também será bem simples. O que ele irá fazer, basicamente, é executar cada uma das dependências <strong>fornecendo todo o container de dependência como parâmetro</strong>. Além disso, ele também irá criar uma nova dependência nesse próprio container a cada vez que uma nova função é construída.</p>\n<p>Vamos ver como fica nosso código:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registrando </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependencia<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dependencia<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// criamos a função construir</span>\n    <span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// criamos um log para facilitar</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Iniciando injeção de dependências'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// realizamos um loop no array de dependencias</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// consultamos o nome da dependencia</span>\n        <span class=\"token keyword\">const</span> nomeFn <span class=\"token operator\">=</span> dependencia<span class=\"token punctuation\">.</span>name\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Construindo dependências em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nomeFn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// atualizamos o valor do container</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// contendo todo o valor prévio</span>\n          <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// e uma nova chave com o nome da função</span>\n          <span class=\"token comment\">// onde seu valor será a execução da própria função</span>\n          <span class=\"token comment\">// recebendo todo o container como dependência</span>\n          <span class=\"token punctuation\">[</span>nomeFn<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token function\">dependencia</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Essa etapa foi importante para que o framework possa instanciar todas as dependências necessárias. Dessa forma, o valor de <code class=\"language-text\">container</code> atua como uma grande caixa e armazena todas as dependências que é fornecida pra todas as demais funções conforme são executadas.</p>\n<p>É comum, ao trabalhar com frameworks de injeção de dependência, criar funções com prefixo <code class=\"language-text\">make</code> (que significa algo como <code class=\"language-text\">fazer</code> ou <code class=\"language-text\">criar</code> em português), para que fique claro que as funções serão utilizadas pra criar novas instâncias após terem suas dependências injetadas. Vamos adotar esse padrão para, quando criarmos nossas funções, realizar o <code class=\"language-text\">replace</code> do prefixo <code class=\"language-text\">criar</code> de seu nome.</p>\n<p>Isso será útil, pois uma função como <code class=\"language-text\">criarNome</code> poderá ser utilizada via parâmetro como <code class=\"language-text\">nome</code>. Vamos armazenar esse prefixo dentro da nossa variável <code class=\"language-text\">framework</code> e realizar o <code class=\"language-text\">replace</code> desse prefixo ao construir nossas dependências:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// criamos o prefixo</span>\n  prefixo<span class=\"token operator\">:</span> <span class=\"token string\">'criar'</span><span class=\"token punctuation\">,</span>\n  dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registrando </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependencia<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dependencia<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Iniciando injeção de dependências'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// modificamos a variável nomeFn para let</span>\n      <span class=\"token keyword\">let</span> nomeFn <span class=\"token operator\">=</span> dependencia<span class=\"token punctuation\">.</span>name\n      <span class=\"token comment\">// realizamos o replace do prefixo</span>\n      <span class=\"token comment\">// e convertemos tudo para letra minúscula</span>\n      nomeFn <span class=\"token operator\">=</span> nomeFn<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixo<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Construindo dependências em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nomeFn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>nomeFn<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token function\">dependencia</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, poderemos criar nossas funções com prefixo <code class=\"language-text\">criarFuncaoManeira</code> mas elas serão acessíveis e injetadas com o nome <code class=\"language-text\">funcaomaneira</code> nas demais funções que precisarem dela como dependência.</p>\n<p>Agora só precisamos criar uma função que irá iniciar a aplicação propriamente dita, aplicando toda a inversão de controle que comentamos. Vamos chamar essa função de <code class=\"language-text\">iniciar</code>.</p>\n<p>Para facilitar nossa vida, vamos definir que essa função que irá executar a aplicação se chamará <code class=\"language-text\">criarApp</code>. Portanto, será acessível através dhe <code class=\"language-text\">container.app</code> no nosso framework. Com isso, basta apenas executar essa função que nossa aplicação irá começar:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prefixo<span class=\"token operator\">:</span> <span class=\"token string\">'criar'</span><span class=\"token punctuation\">,</span>\n  dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registrando </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependencia<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dependencia<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Iniciando injeção de dependências'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> nomeFn <span class=\"token operator\">=</span> dependencia<span class=\"token punctuation\">.</span>name\n      nomeFn <span class=\"token operator\">=</span> nomeFn<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixo<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Construindo dependências em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nomeFn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>nomeFn<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token function\">dependencia</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// criamos a função iniciar</span>\n  <span class=\"token function\">iniciar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// um log para ajudar</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iniciando aplicação</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// executamos a função app</span>\n    <span class=\"token comment\">// que já estará no container</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Essa estrutura já é o suficiente para que nosso pequeno framework funcione. Vamos desenvolver as funções da nossa aplicação agora!</p>\n<p>Como executamos as dependências fornecendo todo o container como parâmetro dentro da função construir, para receber essas dependências iremos aplicar uma técnica chamada <code class=\"language-text\">currying</code>, onde nossa função irá retornar uma nova função, algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">funcao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// retorna uma função</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Dessa forma, as funções \"aninhadas\" servirão para o seguinte propósito: a primeira função será responsável por receber as dependências necessárias para seu funcionamento e a segunda será a função executada quando a aplicação for, de fato, executar.</p>\n<p>Dessa forma, nossa função será mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// funcao agora recebe todas as dependências</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">funcao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencias</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// retorna uma função</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// código em tempo de execução</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Para facilitar nossa leitura, podemos deixar ambas as funções com seus retornos mais simplificados já que as arrow functions nos permitem isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// funcao agora recebe todas as dependências</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">funcao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencias</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// código em tempo de execução</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vamos criar nossa primeira função, ela não receberá nada como dependência mas, ao ser executada, retornará o nome de um personagem fixo. Vamos já utilizar o prefixo <code class=\"language-text\">criar</code> como combinamos anteriormente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// função cria nome</span>\n<span class=\"token comment\">// seguindo o padrão que comentamos</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarNome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// retorna apenas um nome estático</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Anakin Skywalker'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, vamos criar a função que irá retornar o planeta do personagem. Essa função também não possuirá dependências, mas irá receber o nome do personagem em tempo de execução. Por isso, iremos receber seu parâmetro dentro da segunda função:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// função cria planeta</span>\n<span class=\"token comment\">// recebe argumentos apenas em sua execução</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarPlaneta</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">nomeCompleto</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// pega o primeiro nome do personagem</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nomeCompleto<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nome <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// objeto com os planetas</span>\n  <span class=\"token keyword\">const</span> planetas <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    luke<span class=\"token operator\">:</span> <span class=\"token string\">'asteroid'</span><span class=\"token punctuation\">,</span>\n    anakin<span class=\"token operator\">:</span> <span class=\"token string\">'tatooine'</span><span class=\"token punctuation\">,</span>\n    chewie<span class=\"token operator\">:</span> <span class=\"token string\">'kashyyyk'</span><span class=\"token punctuation\">,</span>\n    han<span class=\"token operator\">:</span> <span class=\"token string\">'corellia'</span><span class=\"token punctuation\">,</span>\n    desconhecido<span class=\"token operator\">:</span> <span class=\"token string\">'indefinido'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// consulta o planeta do personagem</span>\n  <span class=\"token comment\">// ou retorna 'indefinido' como padrão</span>\n  <span class=\"token keyword\">const</span> planeta <span class=\"token operator\">=</span> planetas<span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> planetas<span class=\"token punctuation\">.</span>desconhecido<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// retorna o planeta</span>\n  <span class=\"token keyword\">return</span> planeta<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora vamos criar a função que irá executar nossa aplicação: <code class=\"language-text\">criarApp</code>. Ela irá receber as funções que acabamos de declarar como parâmetro através da injeção de dependências:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// função criarApp</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarApp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> planeta <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lembre-se que, como renomeamos nossas funções após construí-las e removemos o prefixo <code class=\"language-text\">criar</code>, as funções <code class=\"language-text\">criarNome</code> e <code class=\"language-text\">criarPlaneta</code> agora são acessíveis somente através das chaves <code class=\"language-text\">nome</code> e <code class=\"language-text\">planeta</code> do container de dependências.</p>\n<p>Nossa função principal da aplicação apenas irá executar a função <code class=\"language-text\">nome</code> e fornecer seu resultado para <code class=\"language-text\">planeta</code>. Após isso, irá exibir uma mensagem no console indicando o planeta onde o personagem nasceu:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarApp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> planeta <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// consultamos o nome do personagem</span>\n  <span class=\"token keyword\">const</span> personagem <span class=\"token operator\">=</span> <span class=\"token function\">nome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// consultamos o planeta</span>\n  <span class=\"token comment\">// fornecendo o nome como argumento</span>\n  <span class=\"token keyword\">const</span> lugar <span class=\"token operator\">=</span> <span class=\"token function\">planeta</span><span class=\"token punctuation\">(</span>personagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// log que exibe o personagem e seu planeta</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>personagem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> nasceu em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lugar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, tudo que precisaremos fazer é registrar nossas 3 funções utilizando a função <code class=\"language-text\">registrar</code> do nosso framework. Como temos uma relação de dependência entre uma função e outra, a ordem que iremos registrar essas funções é muito importante. Não podemos registrar primeiro a função <code class=\"language-text\">criarApp</code> e depois as funções <code class=\"language-text\">criarNome</code> e <code class=\"language-text\">criarPlaneta</code> já que essas duas são dependências da nossa função principal.</p>\n<p>Com isso, vamos manter registrá-las mantendo a ordem que nossa dependências devem ser criadas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// registramos criarNome</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registramos criarPlaneta</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarPlaneta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registramos criarApp</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O próximo passo é executar a função <code class=\"language-text\">construir</code> para que as dependências possam ser instanciadas em nossa aplicação dentro do <code class=\"language-text\">container</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// registro das dependências</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarPlaneta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// construção do container e dependências</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>E agora, finalizamos com a execução da função <code class=\"language-text\">iniciar</code>, que irá realmente executar nossa aplicação:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">framework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarPlaneta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// execução da aplicação</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">iniciar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Isso fará com que o framework que desenvolvemos entre em ação corretamente, caso precise do código completo, aqui está:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// framework finalizado</span>\n<span class=\"token keyword\">const</span> framework <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prefixo<span class=\"token operator\">:</span> <span class=\"token string\">'criar'</span><span class=\"token punctuation\">,</span>\n  dependencias<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Registrando </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dependencia<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dependencia<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Iniciando injeção de dependências'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dependencias<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dependencia</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> nomeFn <span class=\"token operator\">=</span> dependencia<span class=\"token punctuation\">.</span>name\n      nomeFn <span class=\"token operator\">=</span> nomeFn<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prefixo<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Construindo dependências em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>nomeFn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>nomeFn<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token function\">dependencia</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">iniciar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Iniciando aplicação</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// funções da aplicação</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarNome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Anakin Skywalker'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarPlaneta</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">nomeCompleto</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nomeCompleto<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  nome <span class=\"token operator\">=</span> nome<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> planetas <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    luke<span class=\"token operator\">:</span> <span class=\"token string\">'asteroid'</span><span class=\"token punctuation\">,</span>\n    anakin<span class=\"token operator\">:</span> <span class=\"token string\">'tatooine'</span><span class=\"token punctuation\">,</span>\n    chewie<span class=\"token operator\">:</span> <span class=\"token string\">'kashyyyk'</span><span class=\"token punctuation\">,</span>\n    han<span class=\"token operator\">:</span> <span class=\"token string\">'corellia'</span><span class=\"token punctuation\">,</span>\n    desconhecido<span class=\"token operator\">:</span> <span class=\"token string\">'indefinido'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> planeta <span class=\"token operator\">=</span> planetas<span class=\"token punctuation\">[</span>nome<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> planetas<span class=\"token punctuation\">.</span>desconhecido<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> planeta<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">criarApp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> nome<span class=\"token punctuation\">,</span> planeta <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> personagem <span class=\"token operator\">=</span> <span class=\"token function\">nome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> lugar <span class=\"token operator\">=</span> <span class=\"token function\">planeta</span><span class=\"token punctuation\">(</span>personagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>personagem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> nasceu em </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>lugar<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// registro das dependências</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarNome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarPlaneta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">registrar</span><span class=\"token punctuation\">(</span>criarApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// construção do container e dependências</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">construir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// execução da aplicação através do framework</span>\nframework<span class=\"token punctuation\">.</span><span class=\"token function\">iniciar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Teste alterando o nome do personagem para <code class=\"language-text\">luke skywalker</code>, <code class=\"language-text\">han solo</code> e <code class=\"language-text\">chewie</code>, por exemplo. Isso fará com que diferentes valores sejam exibidos como mensagem ao fim da execução da aplicação.</p>\n<hr>\n<h3 id=\"em-resumo\" style=\"position:relative;\">Em resumo</h3>\n<p>Percebeu como, ao invés de iniciarmos nossa aplicação manualmente, todo trabalho de execução e criação das dependências ficou a cargo do \"framework\" que criamos?</p>\n<p>Com isso, \"delegamos\" essa tarefa de execução (e criação de dependências) ao \"framework\" que desenvolvemos, aplicando de forma efetiva a inversão de controle, já que o \"framework\" agora é responsável por construir e executar nossa funções.</p>\n<p>Com isso, aplicamos de forma efetiva dois conceitos bem interessantes e que, em muitos casos, andam em conjunto: a <code class=\"language-text\">inversão de controle</code> e a <code class=\"language-text\">injeção de dependência</code>.</p>\n<p>Espero que, com tudo isso, você tenha curtido nossa singela implementação e que esses princípios tenham ficado um pouquinho menos complicados de entender!</p>","timeToRead":10,"frontmatter":{"date":"12/03/2021","path":"/inversao-de-controle","title":"Inversão de controle","subtitle":"Onde você utiliza esse conceito sem notar e como frameworks de injeção de dependência o aplicam","banner":{"author":"Michal Lomza","href":"https://unsplash.com/photos/O8tsoPRQkPc","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20375v375h332l2-2c2-2%203-2%2012-1l12%202%2024%201h23v-4l2-5-1-2c-2%202-8%202-9%201-2-2%203-6%207-6s5-1%206-4c2-9%202-10%200-10l-1%201-1%201-3%202c-1%202-3%201-3-2l-1-2-1-1%205-1%205%201c0%202%203-2%204-6%202-6%201-18%200-19-2%200-5-5-5-6l3%202%202%203-1-5c0-5%201-7%202-3v-2l1-4v3h2c2-1%203%200%200%202-1%201-1%201%201%201l2%201v1c1%200%202%201%201%202l1%201c2-2%203%200%201%202-1%202-1%202%202%202h5c2%200%201%202-1%202l-2%202h2c4-1%207-2%207-4l4-3%204-3c0-3%203-5%206-5l4-1c0-1%201-2%203-1h3l-3-1h2l5-1h-1c-3%200-4-2-1-3v-1c-1-1-1-1%201-3%204-4%200-7-8-7-4%200-4%200-2-1%204%200%208-3%206-3h-3c-3%203-6%202-5-2v-3l-4%201-4%201%201-2v-1l-5-1h-2c0-1-6%200-8%202h-2c0-1-2-3-4-3s-7%203-6%204-2%204-3%203v-2c3-3%200-2-4%201-3%203-3%204-2%205l1%201h-1c-1-1-2%200-3%201v3l-1-3c0-2-2-3-2%200-1%201-1%201-2-1l-2-2-1-1-2-2-2-1h2c2%200%203-1%201-2l-2-2-1-2-1-2c1-1%200-1-2-2l-2-2c0-3-2-2-2%200-1%201-1%201-1-1l-1-2v-1h1l1-1-1-2-4-3-5-2-1-1%202-1c1-1%201-1-1-2s-2-1-2-3c1-2%201-2-1-1l-1-1v-2l-3-3-1-1c0%201%200%202-1%201l-1-2v-2h-2c-1%201-1-1-2-3l-1-4-2%203-1%202-1-2v4c0%204%200%204-2%204l-1-2c0-2-1-3-3-1-3%205-12%204-10%200l-1-2v-8h-3l-6%202h-6l-2-1%204-1%204-1h-5l-6-3c-2-2-3-2-5-1-3%201-3%201-6-1s-3-2-5%200v6l1%201-3%201-4%201-3%201%202%204%201%204c-4%201-7%207-4%208s8-4%207-8l5-3%205-2c1-2%207-1%208%200%202%202%202%202-1%207-1%203-4%205-6%206l-5%204c-1%203-2%203-7%203l-5%201h-5v-4c0-3%200-3-3-3l-5%201c-3%202-7%201-9-1-1-2-1-2-2-1l-4%201-4%201-1%201-2%201h-13c-1%203-11%204-11%202s-1-2-7-2l-8%202c-2%200-2-1-3-5%200-4-1-5-2-5s-1-1%201-2c3-3%209-2%208%200%200%202%202%203%205%201l4%201c5%202%209%202%2012%200%202-1%203-2%204-1%201%202%205%202%207%200l8-3c6-1%206-1%206%202l2%202h3c-1-1%201-2%207-3%204%200%206-1%206-2%200-3-2-4-7-4l-5-1%201-1c1%200%201-1-1-1-1-2-1-2%201-3l8-1c7%200%2011-3%2011-7%200-2%200-2-7-2l-8-1-6-2a7095%207095%200%2000-20-4c-4-4-8-6-12-6l-7-2c-3-1-3-1-9%201l-7%203-6%204-3%202c-2%201-3%202-4%201l-9-1-8-1c0-2%208-7%2010-7l9-10c1-2%203-5%206-6%202-1%205-3%205-5%201-1%201-2%202-1h2l3-1c2-1%202-1%201-2-2-2%202-3%204-1%202%201%202%201%203-1%200-2%2010-7%2011-5l3-1%208-3c3%200%208-2%2011-4l12-4%207-1%205-2a41%2041%200%200011-4l5-1c5-1%2012-3%2019-7l6-2%204-3%205-2c2%200%202-4%200-8-1-3-1-5%201-10l-2-2c-1-1-1-1-1%202%201%203%201%204-1%204l-2%201c-1%202-10%207-14%208-4%200-12%203-13%204-2%202-15%204-15%202h-1c-1%201-1%201-1-1%201-2-2-3-9-2l-5-1c-2-3-11-5-23-7-5-1-5-2-8-10l-2-5%202-2c3-2%200-2%2050%200l32%204%202%201c1-2-2-6-5-8-3-1-6-4-6-6l1-5%201-3c1-6%204-9%209-12%208-4%2014-3%2028%205%2011%205%2010%205%2010%202%200-2%200-2%206-2h15l9%201%201-4%201-4%2010%201h10l3-3c3-3%204-3%209-2%204%200%205%200%209-2l8-2%205-1c1-1%208-3%2019-4l9-2%206-1c2%200%202-1%204-4l3-7c2-4%202-4%202-2%200%204%201%203%201%200v-2c-2-1%202-8%204-7l1-1c-1-2%201-5%202-4s2%200%203-1a2377%202377%200%20015-9l1-2%202-2h1c-1-1%200-2%201-1v-1c-1-1-1-1%202-4l7-6%2017-12%202-2-4%201c-1%201-2%200-2-1l-6-1c-4-1-4-1-4-3l1-2%201-1c0-2%2011-1%2016%200%204%202%207%202%2010%200h9c9-2%2019-3%2029-3%2016%200%2016%200%2015%201l4%202%209%203%208%203%203%201%202%202%209%204-1%201%203%201%206%201%202%202%206%204%208%206c5%203%2012%2011%2013%2013l3%208%205%209%202%209%202%2012c0%2014%201%2023%202%2024l1-6c0-5%201-3%203%204v4l1-5c0-5%201-8%202-7l1%2032-1%203v3l1-2c0-2%2022-30%2026-34l8-4c5-2%208-4%205-4l-1-5c2-10%201-64%200-67-1-4%200-29%203-49l2-17v-3l2%202%202%205%202%205c3%203%204%206%205%2015%200%2012%200%2015-4%2015l-2-1c0-3-3-1-4%202%200%203%200%203-1%201-1-1-1%201-1%206l2%2016%202-5%202-6c0-6%204-8%206-2a225%20225%200%20010%2053c1%2016%201%2031-1%2035-1%203-1%203-5%203l-4-1%203%201c9%204%2014%2011%2013%2018l-2%205-11%2016-4%206-4%208-4%207-1%204c0%202-1%203-2%203l-1%202%204-2c3-1%203-1%202-2v-1c2%201%207-3%2014-9l16-12a185%20185%200%200021-15c5-3%2016-14%2014-14v-9c0-11%202-14%207-14%209%201%2010%200%2010-5l1-7c1-1%201%200%201%206s0%207%202%207%202-1%202-12a572%20572%200%20019-135l3%201%203%2029a175%20175%200%2000-1%2031l-1%204c0%203%200%204-1%203-1-5-2%200-2%209%200%2011%201%2015%202%2013%201-1%201%200%201%203l2%208%201%209c-2%2012-3%2026-2%2030%202%207%201%2022-1%2023l-1%202v3c9%208%207%2017-4%2022l-5%203-3%203-9%205-7%204-3%202c0%202-1%203-3%205l-3%203-2%201c-2%200-10%207-10%209l-7%207-1%201-6%206-3%202c0%202-4%203-9%203l-2%201h-3l-3%201c1%201%200%201-1%201l-2-1c0-2-3%202-3%204s-1%203-3%204c-2%200-3%202-4%203l-1%202-4%202-4%202c-2%200-5%202-5%204s0%202-1%201h-2a127%20127%200%2001-1%206c0%203%200%203-3%203l-3%201c0%202-10%2012-12%2012-1%200-2%201-3%205-3%205-7%206-8%200-1-5-2-5-2%200l-1%205-1%201c0%203-3%208-3%207-1-3-3-2-2%200l-2%205-3%203-4-1c-2-3-3%200-3%205l-1%205-1%203v2l-1%202-1%201-1%205c0%205%200%204-1-2%200-8-2-11-3-5%200%204-2%2010-3%2010l-1-1-1-1-1%202c2%204-4%2013-8%2010-1-1-3%201-3%204s0%203-1%202c-2-3-4-2-4%201l-2%204-1%202-1%203-5%202-2%201-1%203-1%201c-1%200-2%201-2%203l-2%202c-2%200-7%206-6%207%202%200%204%207%204%2012%200%204%200%204-2%204s-3-1-3-3-5-3-5-1-2%203-6%202c-3-1-4-1-7%201l-5%202-5%203c-3%202-3%202-5%201-1-2-2-2-2-1h-3c-4-2-12%200-13%205l-4%205-3%202-3-2c-2-3-14-10-15-9l-3-1h-3c-1%202-5%202-5%200l-2-1%202%204%205%206%204%203%202%203%201%201%202%202%204%203%206%205%206%206%204%204%20180%201c164%200%20178%200%20176-2-2-1-2-2-2-4%202-6-3-7-10-1-5%203-9%204-13%201l-11-2c-7-1-10-1-12-3l-3-2-9-4-14-1c-7%200-8-1-10-3-1-1-3-2-4-1l-3-1-7-1-7-2-5-1c-7%200-22-3-23-5s-2-2-6-2l-8-1-20-4-8-2-15-5c-2%201-9-2-11-5-2-4-7-5-9-3h-16c-1-2-9-4-17-5-10%200-12-1-10-7l3-13c4-14%206-19%2013-27l8-10c2-4%202-5%209-12%205-6%206-6%2012-6h7l3%201c2%200%202%200%201-1-3-1-1-2%204-3%202-1%203-1%203%201s2%204%204%204l2%201c0%202%202%203%205%203s7%202%206%204%204%203%208%202c6-3%2011-3%2011%200%201%204%2016%207%2020%204%201-1%200-2-3-1l-1-1-2-2c-4%201-3-2%202-5l10-2c6%200%208-2%204-3v-3c2-1%203%201%204%206l2%203c2%200%206-4%207-6s1-2%2016-2c17%200%2018%200%2018%204%200%203-3%205-8%205l-8%202-4%201-9%204-1%201v-1l-1-5-2-3-5%203-9%204c-3%200-4%202-1%202l5%202c2%201%209%202%2013%200l10%204%209%202%2011%201%205%201%205%201%205%202%207%202%206%201c2-1%2010%202%2015%204l3%201c2-2%2021%203%2021%205h4c9-1%2014%200%2015%203l1%204h12c12%200%2013%200%2018%202%204%202%207%203%208%202%203-1%208%202%208%205%200%202%202%203%204%201%201-1%202-2%205-1l10%201c8%200%2010%202%208%207-3%2010-2%2012%204%206l5-3%203-3c1-4%203-4%209-1%204%202%204%203%204%208%201%203%204%204%2014%204l8-2c0-3%201-3%204-2l6%201c4%200%209%202%2014%207l6%203%202%202c0%203-3%205-5%205l-9-2h-8v2c0%203-1%204-4%202-3-1-3-3%200-4%202%200%203-1%202-4v-5c0-1-6%203-6%205l-4%201c-6%200-7%201-4%205%202%203%203%206%201%208l-2%204c0%201%200%202-1%201h-3l2%201c3%200%200%206-4%2010-2%202-3%202-5%201l-2-1c-5-1-8-3-7-6%200-1%200-2-1-1l-2%202c-2%200-2%201-2%202l-2%202-2%202h1l3%201-1%202v2c1%202%200%205-2%205l-3-1-1-2c0-2-1-3-5-3l-5-2-6-3-1%203-1%205-12%205c-3%200-5%201-5%203l-1%202h16c16%200%2016%200%2020-3%204-2%205-2%206-1%202%201%205-1%205-3%200-1%207-3%208-2%202%201%203-1%202-3-1-1%201-3%203-2s0%208-2%2010c-3%203-2%204%204%204%204%200%206%200%206-2%201-1%208-1%208%201l6%201c5%200%205%200%203-2-4-1-4-5%200-6%203%200%203-2-1-2-3%200-3-7%201-8h4l3%202%202%202v1l5%201c4-1%2011%202%2011%204%200%204-10%206-13%203-2-1-2-1-2%202v3h16v-3l1-3v3c0%203%200%203%204%203%203%200%203-1%205-5%201-4%201-5-1-6-2-4-1-5%203-5%205%200%207%204%205%2010l-2%205%2010%201c10%200%2011%200%2011-2s0-3%202-3%202%200%201-1c-2-1%201-3%203-2%203%201%200%207-2%207-2%201-1%201%202%201%204%200%204%200%204-3l2-4c3-1%203-4%200-5-2-1-2-3%201-6l1-5%201-3%202%201%203%202c1-1%205%201%205%203h-1c-2-2-2-2-2%200v5c2%205%202%209-1%209-2%200-2%201-2%203v3h23a124%20124%200%200026-1l1-374V0H924C672%200%20647%200%20649%202l2%203c0%201-4%202-7%201l-12-5-316-1H0v375M574%2071v4c2%204%200%208-3%209l-3%203c0%202-1%202-9%202l-13%201c-2%201-4%202-5%201-6-3-17-3-17%200%200%204%202%205%207%204%204-1%205%200%208%203l3%202%205-1%205-2%208-2%209-3c3-3%208-1%206%202v11c1%203%201%204-3%205-5%202-18%202-25%201-6-1-19%200-21%201l2%2015c2%200%202%200%201%201v2c1%201-1%206-3%206-1%200-3%2013-2%2015v25l1%2025c2%202%203%202%204%201l4-1%207-3%2010-2c7%200%208%200%209-9%201-3%201-3-2-3s-3%200-1-1c4%200%207-3%207-5v-2c2%200%205%202%205%204l2%201%2024-2c26%200%2027-1%2024-10-1-3-2-3-5-3l-6%202c-2%202-5%203-6%201s-7-1-7%200v3c-1%201-10-1-10-3l-1-1-4-3c-1-1-2-2-3-1l-8%201%204-2c4-1%206-3%203-3l-2-2c0-2%203-5%203-3%201%201%207-2%207-3l-2-3c-2-4-1-5%203-5l4-1%202-3%202-1c0-3%205-4%2010-3h17a73%2073%200%200118%200c3%200%203%200%204-9l1-12%201-3h-9l-12-2h-4c-3%202-10%201-17-1-6-1-8-4-4-5%202%200%202-6-1-7s-3-7%201-8l4-2-3-1c-3-1-4-4-4-10v-5l-9-1c-11-1-11-1-11%201m486%2050a68%2068%200%2000-19%2012l-9%208h2l4%201%202%202-2%203c-4%204-4%206%201%206l9-4%202-1%203-2%203-2c2%200%2011-8%209-8-1-1-1-1%201-3%201-1%202-3%202-7l1-7c0-3-1-3-9%202m-532%2019l2%203c1%202%201%202-1%205-5%208-1%2019%204%2012%202-2%202-2%203-1h4l-2-1c-3-1-3-3%200-3l2-3%202-3c2-3%200-7-4-7l-7-2c-3-2-3-2-3%200m68%209l-5%203v2l5%201%204%201c0%203%204%204%206%203%202-2%203-4%200-6-1-1-1-1%202-1s4-1%201-4l-1-1c0%203-8%203-8%200%200-1-1-1-4%202m34%207l-1%204c-1%201-1%201%201%202l2%201h9l1-6v-5h-12v4m-42%2029l-8%202v1l3%201c2-1%209%201%2012%203%204%202%201%205-5%206l-8%201c-4%201-4%201-3%205l-2%206c-1%202-1%202%201%205%202%202%202%202%201%204-5%203-10-1-7-6%201-2-1-3-5-2l-3-1-3-2%202-2c5-1%205-2%201-4-3-1-7%200-10%204-1%201-2%202-4%201-5-1-9-1-17%203-3%201-3%201-5-1l-3-1v26c1%202%203%200%203-3s3-3%204%200l3%201%208%204-9%205c-3%200-3%201-3%203l-2%203-1-3c0-4-2-5-3-2v34a207%20207%200%2001-3%2044c-2%201-2%209%200%2010%201%202%202%208%202%2019%200%202%200%203%202%203l1-8%201-9h1l1%201%203%202c0%202%202%203%203%203l10%207c6%207%207%208%208%206l3-2%201-1h-3l-1-2c0-2%201-3%202-3%202%200%203-4%201-6v-4l-1-1%202-1%202-1-1-2c-1%200-2-4-1-6h3c2%200%202%200%202-2v-3l1-1-4-1-2%201-1%201-2%204c-1%206-3%205-5-2-1-4%201-10%203-10l7%201c5%202%207%202%2011%201%205-2%206-2%208%200l3%204c0%204%206%201%206-2l2-2%202-1%208-1%208-1c0-2%206-4%207-3%202%201%201%202-1%203h-2l2%201%203%201-3%201-2%201%202%201%206%202%205%202c2%200%202%200%200%204v4l3%204%202%204-2%204c-3%204-1%207%204%209%203%200%204-1%204-6v-6c2-2%200-7-4-12-4-4-4-5%200-5%202%200%202%200%202-3s-1-4-5-4l-3-1c2%200%202-1%202-5%200-6%202-7%206-7%202%201%203%200%204-2%204-4%201-5-17-5-42%200-56%200-58-2-2-1-2-2-1-3l1-2%203-2%204-1v-4l-4-2-6-3c-2-1-4-2-5-1l-3%201c-6%201-3%206%203%206%203%200%205%203%205%207s-1%205-6%205l-4%201h-6c-6-2-12-1-13%201l-1%202c-2%200-4-7-3-8l1-8c0-7%200-8%202-8l-1-1c-2-1-2-1-1-9l1-8c2-2%203%201%203%208v8h5l6-1%2013-1c15%200%2015%200%2017-10%201-7%206-13%2011-13%208%200%2012%207%2013%2018%200%203%201%204%203%204%202%201%203%205%201%205s-1%204%201%204c2%201%203%204%202%206-2%201%202%204%205%204%2013-4%2015-4%2015-7%200-1%200-2-4-1s-9-1-10-4c0-1-1-3-3-3-3-1-3-2%201-5%202-3%206-4%205-2-1%201%200%201%201%201l5%203c5%203%2015%203%2017%200s1-6-1-6c-3%200-6-3-6-5%201-2%203-3%207-3%204-1%205-3%203-4l-1-3h2c1%202%202%201%202-2l-3-6-3-3%202-2c2-1%202-3%202-7l1-9c1-2%200-3-1-5l-2-4-3-1c-3%200-4-2-1-4s2-8-2-10l-3-4c0-3-5-4-9-3h-7l-5-1c-1%201-12%200-16-1h-4m460%2022l-2%201-3%201-3%203c-4%202-6%204-3%204%202%200%201%202-1%202-2%201-2%201-2%2013v61c-2%2018-2%2021-1%2025a421%20421%200%20011%2081%20674%20674%200%20012%20100c-1%206%201%207%208%207l17%201%2012%201v-2l-2-6v-4c5-3%202-18-5-25-4-4-2-8%205-7%203%201%204-4%202-6l-1-5-1-4-3-4-2-3%203-3%203-3-1-5v-8l1-11%201-14v-17a252%20252%200%2001-1-36v-14c0-8%200-10-2-14l-2-4%202-3c2-4%203-13%201-13-4%200-4-3-1-8%202-4%202-5%201-7l-1-10c1-17%200-27-1-28-1-2-12-2-13%200l-3%201c-1-1-1-1%201-3l2-2-3-7c-2-5-2-7-1-8l1-5c0-3%201-4%203-5l9-5%201-2h-18m-910%2011c-2%201-2%202-2%208%200%208%201%2011%205%2011l2%202v3c-2%200-6%2011-7%2018a1319%201319%200%20003%2078l2%204-3%204c-2%204-2%205-2%2021%200%2014%200%2016-2%2019-2%204-2%207%201%2027l1%205%204-1c3%200%204%201%205%203v4l-1%204c0%204-4%208-5%206-1-3-3-2-3%200l-1%203v8l1%202%202-3c1-5%203-5%203%200l2%204%202%202c1%203-2%206-6%206l-4%202c-2%205%200%206%205%206l6%201c4%203%206%203%207%202l3-11c0-4%203-5%205-2%202%202%207%203%207%201l4-4%204-2c0%203%2010%203%2011%201%200-1%201-2%203-2s3-1%204-4l1-6%201-4c2-4%202-10%200-13-2-2-2-12%200-16%203-5%203-15%200-18s-4-9-2-20c2-19%202-29-1-31-1-1%200-2%201-4%202-2%202-3%201-7-1-3-1-4%201-7%204-5%204-12%201-16-3-2-3-3-2-6l-1-5c-2%200-2-3%200-3v-5l-7-2-4-1%201-2%201-2c5-2%204-8-1-9l-5-1-3-2h-3l-1-2-2-2-2-1-4-2-3-1%203-3c2-2%203-3%2011-3%2012-1%2013-3%209-7-5-5-3-7%206-7%207%200%2010-4%2010-12%200-5%200-6-2-7-3-1-58-1-60%201m770%2013c-3%201-3%202-3%209%200%208%200%208%203%2011%204%204%205%205%204%2015%200%2010%200%2014%202%2018l2%202%202-4%202-2%204%204c5%205%205%205%207%200%202-6%201-10-2-14-2-3-2-3-1-7%202-7-1-14-5-13-5%201-6-1-5-7%200-6%200-7-2-10-2-4-4-5-8-2m-675%202l-5%202c-5%201-5%202%200%204h4l-4%201-3%201%201%201%204%201c4%202%2011%202%2013%201v-10c-1-2-8-3-10-1m21%2029c-2%200-3%203-3%2011-1%2010%201%2040%202%2042h9l11-3%207-3%201-11%203-21%202-5c2-4%202-5%200-7-3-3-3-3-17-4l-15%201m-33%2014l-1%2013c0%2010%200%2010%203%2013l2%204v4c2%204%201%2010-2%2013l-3%203-1%2013%201%2013%202%202%201%202%201-2c0-1%200-2%201-1%202%201%201%203-1%206-3%203-3%2017-1%2019%204%203%206%201%207-4%202-11%202-14%201-17v-4c2-3%202-26%200-30v-17l1-4c2-7-2-29-7-27l-1-1c0-3-2-2-3%202m819%202c-4%201-4%202-2%205h2c1-1%203-1%203%201l-1%203-2%205c0%204%200%204%204%204%205%200%205-2%202-6l-2-2%202-2c2-2%202-2%201-4v-2c2%200%201-3-1-3-2-1-2-1-6%201m-714%2013c-2%201-3%205-2%2010l1%2016a9336%209336%200%2000-2%2028c-3%208%201%2018%206%2015l4-1c3%200%207-4%207-8l-2-6c-2-4-2-5-2-9l1-9c0-18%200-20%202-24s3-8%201-10c-2-3-9-4-14-2m457%204v9l-2%2012c-2%204-3%2012-1%2012l4-7c0-3%200-4%203-5s3-1%203-6c0-7-2-13-5-15h-2m132%200v10a731%20731%200%2000-2%2020l-1%208-1%208-1%2050a5702%205702%200%2001-1%20109c-4%206-1%2011%205%2011%202%200%203-4%202-7l1-7c2-6%203-27%203-85l1-60%203%2014v3l1%206c0%207%201%209%203%206l2-4%201-57c-3-9-3-10-8-12s-6-4-6-7c1-2-1-8-2-6m40%203c-2%206%201%2027%204%2031%202%202%202%202%203%200l2-7%202-12c2-7%201-8-4-13-4-4-6-4-7%201m-310%2013a269%20269%200%20003%2056l1-1c1%201%202-3%203-28l-1-25c-2-3-5-4-6-2m-274%202c-3%202-3%207%200%2010v14c1%206%200%2017-2%2021v8c2%204%202%209%202%2021a1618%201618%200%20001%2061c1%202%202-6%202-15l1-19c1-5%202-8%201-11-2-7-2-32%200-37v-9c-2-4-2-7-1-14a247%20247%200%20001-20c2%200%203-7%202-10-2-2-4-3-7%200m156%207a348%20348%200%20012%208l2%202%203%202%204%202c2%203%208%203%208%200s-2-7-2-5c0%203-2%201-4-4l-4-5-6-3-3-2v5m-277%208v20c2%2020%202%2043%200%2050-1%206%201%2013%204%2014l2%202%202%203c4%203%2016%200%2018-4l4-2%203-4c2-4%202-4%201-11l-2-9c0-7-1-11-3-10s-4-1-5-3l-2-2-2-1-1-2%201-2%202-1c0-2%204-4%206-3%203%201%204-2%204-10l1-10c4-4%203-14-1-17h-30l-2%202m541%201c-3%206-3%2018%201%2018%203%200%204-3%203-11-1-9-2-11-4-7m-13%203c-4%2020-5%2038-4%2046a438%20438%200%20012%2068v5c-4%200-5%2014-2%2016h8v-11a809%20809%200%20000-54l-1-35a417%20417%200%20010-30c0%203-2%201-1-2l-1-5c-1-2-1-2-1%202m-117%202c-4%205-3%2016%202%2017%203%201%204%206%206%2028l1%2010%201-1%202-12v-24l-1-11c-1%200-3-2-4-5-3-5-4-5-7-2m74%2020v18c-5%204-6%2020-5%2052%201%2017%201%2018%205%2017%202-1%204-8%202-14v-8a652%20652%200%2000-2-65m57%2010c-5%203-7%2032-5%2054%201%209%202%2020%201%2032l1%2021c1%204%203%205%204%202l3-4%202-8a860%20860%200%20012-28l-1-37c0-34-1-37-7-32m-466%203c-2%203-4%2035-2%2045%201%207%204%2012%204%207%200-2%202-4%206-6%202%200%204-2%204-4%201-3%200-18-1-20v-6c2-8%200-18-4-18l-3-1-4%203m631%2019c-3%203-3%2016%200%2018%205%206%2011-5%208-14-3-6-6-8-8-4m-733%203l-1%201c-2%200-2%201%200%204%201%202%202%206%202%2020l2%2018%202-18%202-22-1-3c-1-1-6-2-6%200m298%2025l-1%202-3%207-7%2017%204-2c2-1%204-2%205-1l24%201-4-1-4-1c0-1%203-2%208-1l3-1-4-1-2-1-1-2-1-1-1-2-2-1c0-2-4-6-8-9l-3-3h-3m-370%203c0%203-2%207-4%207l-1%204v4h7l6%201c0%202%2010%202%2012%200%204-4%201-13-3-10l-4-1-5-2-5-2c-2-2-3-3-3-1m104%205c-3%200-5%203-4%206l1%209c0%208%202%2011%206%207l6-3c5-1%205-2%205-5l1-4%201%204c0%203%200%204%202%204l1-4c0-4%200-4%203-4s3%200%203-4-1-4-3-4l-5%201h-1l-1-1-1%204c0%203%200%204-2%204s-2-1-2-4%200-4-2-4l-3-1-2-2-3%201m79%202c-1%202-6%204-7%202l-2%203c-3%208%200%2013%206%2012%205-1%207-6%205-9l-1-6-1-2m160%2023l-1%203-2%203-1%206-1%205-1%201-1%202c-1-1-8%202-8%204l-1%201c-2%200-4%207-3%208l1%202c0%203%205%202%208-1%202-2%204-1%205%202l1%204%201%209c1%2011%209%2035%2010%2031l-2-6-2-7c0-2%200-2%201%201l2%203v-2l-2-6-1-3v-1c0-3%200-3-1-2l-1%201v-3c1%201%201%200%201-2%200-3%200-4-1-3v-5l-1-5v5c0%204%200%204-1%202v-12h1l-1-2%201-24c2-10%202-11%200-9m22%206c1%202%200%203-1%204v1l2-1h1c1%201%203%202%2010%202l1%202-7%201-4%201v1l-1-1-2-1c-1-1-2%200-2%201l-1%201-1%202c0%204-3%2011-4%209l-2-2-1-1-1-1-1-2c-1-1-1%201-1%204%201%204%200%206-1%206-3%202%200%2029%207%2045l2%205c0%204%202%207%207%2012l9%2010c4%207%208%2011%209%2010l-4-6a78%2078%200%2001-13-21l-1-2-1-3-1-2c0-1%201-1%203%202l2%202h2c0-3%205-2%206%201%200%202%201%203%202%203v-2l-1-2v-2c-1-1-1-1%203-1%204%201%204%201%204%205%200%202%201%203%204%204l3%201%201%201-2-5c-4-4-5-6-2-7%202-1%203%200%205%204%204%208%2014%2019%2017%2019l1%201c0%202%207%203%2012%203%205-1%207-2%2010-5%207-5%208-10%208-25v-9h3l4%201h3c5-2%207-1%207%204l-2%2013-5%201-3%202%204-1%205%201c0%203%205%2011%208%2013%205%203%209%204%209%201h1l1%202c-2%203%2011-2%2016-7%203-3%209-7%2011-7s2%201%201%203c0%202%200%203%201%202%201-2%202-1%202%202%200%202%200%202%202%201%202-3%201-6-1-6-1%200-2%200-2-2s0-2%202-1l2%202h3l1%202%201-1h2l2-1h5c1%201%207%200%208-1s0-1-1-2h-4c-1%202-2%201-4%200-3-3-3-4%200-4%201%200%202%200%201-1l1-2c2-1%202-2-1-3-4-2-5-2-2%201%202%201%201%202-2%201-2%200-2%200-1-1v-1c-2%200-2%200-1-1l1-3v-3c-3-2-4-3-4%200l-2%201-5%201-2-1%202-1v-8l1-2%201-3c1-1%202-2%201-4l1-1c2%202%205-1%204-3%200-2%200-2%203-1%204%200%204%200%204-2l1-2%203-5%202-5v-1l3-2%203-2-2-1h1l1-1-2-1c-3%200-4-6%200-8%201-1%201-1-1-1l-4-2-5-2-8-1h-9c-2%200-7%204-7%205l4%202c3%200%204%201%204%202%200%203%200%204-7%203-6%200-6%200-5%202%200%202%200%202-5%201l-4%201c1%201%200%201-2%201l-4%201-18%204c-2%200-3%200-3-2l1-2v-2l-2-3%201-8-6-2c-4%200-5%200-3-1%201-1%201-1-1-1l-2%201-2%201v-1c1-2%200-3-4-3l1%201c3%203%201%203-6%202-6-1-7-2-7-3l-1-2-1%201c0%201-7%202-8%201h-7c-1-2-6%200-6%202l-1%202c-1%201%200%201%202%202%203%201%203%203-1%202-3%200-3%201%200%202%202%201%201%201-2%201-5-1-5-1-5%201s0%202-1%201l-2-3-4-1c-6%200-6-2%200-2%204-1%204-1%204-5%200-2%200-3-2-3v1l-3%201-3%201h-4l-2%202c-1%203-4%203-7%201l-2-1h3l4%201v-6l-1-5-1%201-1%202c-2%200-2%200-1-1v-2c-1-1-1-1%202-1%202%200%202%200%201-1h-12l-1-2-1%203m171%202l-1%207c1%205%201%206-1%207l1%201c2%201%203%2011%200%2013l-1%204h1c0-2%203-3%203%200l1%201%201-2c0-4%202-4%202-1l1%204%201-4v-5l-2-5c-1-5-1-5%201-5s2-1%202-2l-2-2c-1%200-3-5-2-6l-1-1c-2%201-2%200-2-1l1-3v-1l-3%201m-209%202l-3%201-4%201-5%203-3%202c-4%200-11%202-14%204l-10%203c-6%201-10%203-14%205-4%203-28%207-31%205l-16-4c-1%201%205%206%208%206%206%200%207%201%208%202l-3%203c-4%202-4%202%200%208%202%204%202%204%204%202h1l1-1c2-2%207-5%2012-6l18-7%2014-7a161%20161%200%200032-15l5-1c4-1%206-2%206-4h-6m61%2016v1c-2%201-2%203-2%2012a5730%205730%200%20013%2024c-1%201%200%204%202%204v-7l-1-27c0-7%200-8-2-8v1m117%206l-3%203a74%2074%200%2000-1%2025c-1-1-1-1-1%202-1%203-1%204%203%202l3-2c0-1%200-3%202-3%201-1%201-1-1-1s-2%200-1-2l1-18v-4l-1-3-1%201m-193%205l-7%201-8%201h-3l-7%202-6%203-4%203-4%203h-1c-2%203-7%206-14%206l-9%202h-2l-1-1%201%208%201%202%203%206%204%209c2%205%204%205%204%201%200-2%200-2%202-2h1l4-2%205-3%202-1%2014-6%203-3%201-1%207-5%208-5%209-5%205-4c2%200%204-3%204-6%200-2-1-3-3-3h-9m23%2010c-2%200-7%205-7%206l-2%202-2%201-2%203c-3%203-3%206%200%204l6-5%206-4%202-2%202-1c1%201%201%201%201-1l-1-3h-3m378%2011v2c1%202%2015%203%2015%201h15c3%201%205%200%204-2l-6-1h-28m168%205c-3%205%201%209%208%208l7%202c-1%201%2018%206%2020%205%202-2-2-7-4-7-3%200-19-4-21-6l-5-2c-3-2-3-2-5%200m-897%204l-3%202c-1%202%200%2029%201%2031a25532%2025532%200%200147%2014l13%203%208-2a158%20158%200%200118-6l20-7c18-6%2027-10%2027-12l4-2a107%20107%200%200020-10c4-1%205-3%202-3l-3-1-2-1%201%202v2l-11-3-5-1-8-1c-9-2-36-3-72-4a493%20493%200%2001-57-1m565%2013h-1l-1%201-1%201-5%203-5%204c-2%200-2%200-1-1l1-2c-1-1-3%201-3%203l3%201c2%200%202%200%201%202-1%201-2%202-3%201h-4l-2%201%202%202%202%204c0%203%201%203%203%202l5-3%205-3%203-3%202-3%201-1c1%200%202-1%201-2l1-3v-2l-2-2-1-1h-1v1m172%203c-2%202%205%207%2019%2011a298%20298%200%200136%2013l2%203c3%201%203%203-1%203-3%201-6%200-6-2-1-1-2-2-6-2l-5-1-12-3-10-2-13-2c-8-2-10-1-8%204l3%203%202%204%202%204%201-2c-1-3%202-3%209-2l6%203%205%203%207%202c3%201%208%201%208-1l8-1%208-1%202-2%203-1%203-1%206%201c8%200%2013%201%2018%204s8%203%2017%201a232%20232%200%200139-5l-8-1-13-2c-5-2-14-4-19-4l-8-4-9-1c-9%200-10-1-16-4l-7-4-14-3h-2l-3%201c-3%201-3%201-8-1l-10-4-8-2c-5-2-18-4-18-2m-434%204l-2%202h-3l-2%201-2%202-4%203-6%204c-4%202-4%202-4%206%201%205%202%206%203%204l2-1%201-1c0-1%207-6%2012-8%203-2%204-2%204-5l2-3v-3l-1-1m100%2013c-1%203%203%207%2011%209s9%204%209%209l1%203%201-1c0-2%204-4%204-3%202%202%204%201%203-2%200-1%200-2%201-1l7%201c6%200%207%200%207-2%201-2%203-3%208-3l3-1-1-1v-1c2%200%203-2%201-2v-1l2-1h-3l-3%202c-1%201-1%201%201%201%203%200-1%202-5%202l-4%202-3%202-2%201h-2l-4-1c-2%200-3%200-2-2v-1h-5c0%202-3%201-3-1l-2-2v-1h-3c-1%202-1%202-5%200l-3-3c0-2-5-2-5%200l-1-1c-1-3-3-4-3-1m-28%200c-1%201%200%204%201%205v1l-1%202-2%203c-2%204-1%205%205%205l9%202%207%203%205%201v-2l-2-2c0-2-3-5-5-4l-7-8-2-2-5-3-3-1m276%208c-7%205-12%2013-8%2011%202-1%202%200%202%201-1%203%204%204%206%202l3-1%202-1c1-2%2030-4%2043-3%206%201%2011%200%209-2l1-3%201-2c-1-2-18-3-25-1-5%201-6%201-9-1-3-1-4-2-5-1h-5c-6-3-10-2-15%201m-302%2012l-11%201c-11%200-15%201-13%202l8%201%206%201%203%201h6c4%201%204%201%204-2%200-4-2-6-3-4m437%207l5%202%206%202%204%201%205%202%202%202%204-1%204%201c0%202%202%201%203-1%200-2-3-6-5-6l-3-1c-1-1-25-3-25-1m-66%2041l2%202%202%203%202%202%202%201c0%202%208%203%2013%203%202-1%203-2%202-3h2c0-3-4-5-7-4l-4-1-7-2-6-1h-1m-665%203c-2%201-2%201%200%204l2%202-1%202%202%202c1%200%205%203%205%205v1h6l5-1c-1-1%200-2%201-3%202-2%201-2-3-6l-5-5c0-3-9-4-12-1m-13%204l1%203%201%204c1%202%202%202%206%202%205-1%206-1%204-5s-10-8-12-4m-17%202c-3%200-5%204-4%207l3%202%205-2%203-1%202-1c3-1%202-3-1-5h-8m171%200c-1%201-2%203-4%203-6%203-10%208-7%208l4%202%204%203%203%201-3-1c-2%200-3%200-3%202s11%201%2014-1c1-2%201-2-3-1-6%200-7-2-5-6l2-5%201-2%201-3h-4m-194%203c-2%203-3%205-1%205v1c-2%200-4%203-3%203%201%201%209-1%2011-3l3-1c1%200%202-3%201-5l-3-1h-4c-1-1-2%200-4%201m46%2022c-3%203-3%203-2%204%203%202%2013%202%2017%201%203-1%203-6-1-7-5-2-10-1-14%202m161%2030v1l1%202c0%204%2012%205%2016%202s3-4-4-5h-13m138%2019h-4l-3%201-2%201-2%201%207%201%2012%201c4%200%204%200%202-1l-2-2h2l3%202h8l4-2h-5c-3%201-7%201-6-1%201-1-13-2-14-1m513%205c-5%203-5%204%200%208%204%204%203%204%207-2%201-4%203-7%204-7%205-4-6-2-11%201m130%205c-4%205-4%205-6%205-2-1-4%202-2%204%203%201%203%201%206-1s4-3%204-1%203%200%206-3c2-2%202-3%200-5-2-3-5-3-8%201m-103%205h-6c-2%200-3%200-5%204l-2%206c1%202%207%202%209%200l6-2%204%201-1-4c0-6-1-6-5-5m63%201l-3%204-2%202c-1%200-1%201%201%201v3c-3%200-2%202%200%204%204%203%208%201%208-3%201-3%203-4%207-1%203%203%206%204%208%202s2-2%200-3l-6-2c-3%200-4-1-3-2%201-2%200-5-2-5l-3-1-5%201m84%204l-1%202v6l1%202v2l-1%203-2%203c-2%201%202%205%207%205l6%202c2%200%202%200%202-2l1-3%201-2%201-2c1-1%201-2-1-3-2-2-2-4-2-7%200-4-1-4-3-4l-3-1c-1-3-5-3-6-1m-847%205l-3%201-6%203c-4%201-7%204-7%208h8c7%200%208%200%2013-6l5-6h-10m642%207l-3%203%202%203c2%203%203%206%203%2011%200%203%200%203%203%203%202%200%203-1%203-5l1-3v-1l3-2c4-1%203-6-2-7-5%200-6-1-6-3%201-2-1-1-4%201m-699%207l-10%202-12%202c-1%201-3%202-4%201l-3%201%205%201h6l14-1c4-1%207-3%207-6%200-1-2-2-3%200'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/c5b83860f9ea189ae5fbf8b2b9257d37/21095/banner.jpg","srcSet":"/static/c5b83860f9ea189ae5fbf8b2b9257d37/36b10/banner.jpg 300w,\n/static/c5b83860f9ea189ae5fbf8b2b9257d37/88367/banner.jpg 600w,\n/static/c5b83860f9ea189ae5fbf8b2b9257d37/21095/banner.jpg 1200w,\n/static/c5b83860f9ea189ae5fbf8b2b9257d37/97ce3/banner.jpg 1800w,\n/static/c5b83860f9ea189ae5fbf8b2b9257d37/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/c5b83860f9ea189ae5fbf8b2b9257d37/58d74/banner.jpg"}}}}}}},"pageContext":{}}}