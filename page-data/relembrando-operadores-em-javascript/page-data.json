{"componentChunkName":"component---src-templates-post-article-index-js","path":"/relembrando-operadores-em-javascript","result":{"data":{"markdownRemark":{"id":"fb4efcc0-9243-57c2-ab88-46778f450c79","html":"<p>Provavelmente você já ouviu falar (e talvez até já utilize, principalmente se você já mexeu com React, e suas <a href=\"https://pt-br.reactjs.org/docs/conditional-rendering.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">renderizações condicionais</a>) sobre os operadores <strong>ternário</strong>, <strong>\"E\"</strong> <strong>\"OU\"</strong> e como eles são avaliados.</p>\n<p>Geralmente esses operadores fazem parte das primeiras coisas que aprendemos ao ter contato com lógica de programação. Entretanto, com algumas adições na linguagem (como o operador de <strong>coalescência nula</strong>), podemos aproveitar o momento para relembrar algumas coisas sobre o assunto.</p>\n<p>Mas, antes de partirmos para os operadores, vamos aproveitar e falar sobre dois conceitos importantes da linguagem: <code class=\"language-text\">coerção de tipos</code> e valores <code class=\"language-text\">truthy</code>/<code class=\"language-text\">falsy</code>.</p>\n<h3 id=\"coercao-de-tipos\" style=\"position:relative;\"><a href=\"https://developer.mozilla.org/pt-BR/docs/Glossario/Conversao_de_Tipo\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Coerção de tipos</a></h3>\n<p>Se olharmos o significado de <code class=\"language-text\">coerção</code> ou <code class=\"language-text\">coagir</code>, temos algo como reprimir ou forçar e <code class=\"language-text\">coerção de tipo</code> indica uma conversão de tipo que não é explicitamente indicada por quem desenvolve alguma operação e, por isso, \"forçada\".</p>\n<p>É uma característica da linguagem e é principalmente aplicada quando falamos de valores booleanos e comparações. É exatamente o que ocorre, por exemplo, quando utilizamos <code class=\"language-text\">==</code> em comparações ao invés de <code class=\"language-text\">===</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna true</span></code></pre></div>\n<p>Operador <code class=\"language-text\">==</code> sofre coerção de tipos, ao avaliarmos a expressão acima o JavaScript converte os números para um tipo em comum o que não acontece com <code class=\"language-text\">===</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna false</span></code></pre></div>\n<p>É o mesmo que ocorre quando realizamos operações como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna '11';</span></code></pre></div>\n<p>Nessa operação o JavaScript realizou uma conversão implícita dos valores para concatená-los, já que um era um número e outro era um string.</p>\n<p>Esse conceito é necessário para que possamos entender os valores <code class=\"language-text\">truthy</code> e <code class=\"language-text\">falsy</code> e como esses valores funcionam em operações.</p>\n<h3 id=\"valores-truthy-e-falsy\" style=\"position:relative;\">Valores <a href=\"https://developer.mozilla.org/pt-BR/docs/Glossario/Truthy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>truthy</em></a> e <a href=\"https://developer.mozilla.org/pt-BR/docs/Glossario/Falsy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>falsy</em></a></h3>\n<p>Outra características da linguagem JavaScript, são valores que são interpretados (ou \"avaliados\") como verdadeiro/falso, mesmo não sendo especificamente booleanos.</p>\n<p>Os valores <em>falsy</em> são: <code class=\"language-text\">0</code>, <code class=\"language-text\">false</code>, string vazia <code class=\"language-text\">&#39;&#39;</code>, <code class=\"language-text\">null</code>, <code class=\"language-text\">undefined</code> ou <code class=\"language-text\">NaN</code>.</p>\n<p>Isso quer dizer que em contextos e operações tradicionalmente booleanas, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'falsy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Esses valores são interpretados como falsos.</p>\n<p>Com isso, podemos resumir que valores <code class=\"language-text\">truthy</code> são todos os outros que não são <code class=\"language-text\">falsy</code>, sejam eles números, strings, objetos, arrays ou qualquer outro.</p>\n<p>Agora vamos aos operadores.</p>\n<hr>\n<h3 id=\"operador-ternario\" style=\"position:relative;\">Operador <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Operador_Condicional\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ternário</a></h3>\n<p>Particularmente, acho que fica mais fácil de compreender o ternário se análisamos ele de duas formas diferentes: pensando em um \"if reduzido\" e fazendo uma comparação com funções \"SE\", no mundo das planilhas de Excel/Google Sheets.</p>\n<h4 id=\"mas-por-que-um-if-reduzido\" style=\"position:relative;\">Mas por quê um \"if reduzido\"?</h4>\n<p>Vamos pensar em uma situação bem comum, antes de aprender o operador ternário: precisamos mudar o valor de uma variável baseado em alguma condição, faríamos algo com if/else mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> minhaVariavel <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minhaVariavel <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  minhaVariavel <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  minhaVariavel <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E, no mundo das planilhas, vamos fazer o mesmo exemplo: se uma célula tiver o valor <code class=\"language-text\">1</code>, mostraremos <code class=\"language-text\">2</code> em uma outra célula, se ela tiver qualquer outro valor, mostraremos <code class=\"language-text\">3</code>. A seguir, tem uma tentativa (bem falha) de criar duas células de uma tabela aplicando a função \"SE\" na segunda célula.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| A |         B         |\n|---|-------------------|\n| 1 | =SE(A1 = 1; 2; 3) |</code></pre></div>\n<p>Em ambos os exemplos, estamos simplesmente alterando um valor baseado no valor inicial de alguma variável. Olhando mais afundo para a função \"SE\", podemos ver que ela segue uma certa estrutura:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SE(A1 = 1; 2; 3)</code></pre></div>\n<p>Podemos entender essa função como um bloco de informações separadas por ponto e vírgula (<code class=\"language-text\">;</code>). Vamos separar cada uma dessas, informações e entender o que elas fazem:</p>\n<ul>\n<li><code class=\"language-text\">A = 1</code>: realiza alguma verificação (se o valor da célula A é igual a 1);</li>\n<li><code class=\"language-text\">2</code>: se a verificação anterior for verdadeira, exibe o valor <code class=\"language-text\">2</code>;</li>\n<li><code class=\"language-text\">3</code>: se a verificação for falsa, exibe <code class=\"language-text\">3</code>.</li>\n</ul>\n<p>Podemos agora dar um passo adiante e nomearmos esses \"pedaços\" de função. Dessa forma começamos a entender como o operador ternário funciona:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SE(verificação; valor se verdadeiro; valor se falso);</code></pre></div>\n<p>O operador ternário, segue exatamente esse mesmo modelo: realiza uma verificação, retorna um valor caso a verificação seja verdadeira ou retorna outro caso ela seja falsa.</p>\n<p>Entretanto, o operador ternário não é separado por ponto e vírgula, ele segue a seguinte estrutura:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">verificação ? valor se verdadeiro : valor se falso</code></pre></div>\n<p>No lugar do primeiro ponto e vírgula (logo após a verificação), uma interrogação é utilizada e logo depois o valor caso a operação seja verdadeira já é colocado. Por último, separamos com dois pontos (<code class=\"language-text\">:</code>) o valor a ser executado se a operação for verdadeira do valor falso.</p>\n<p>Se aplicássemos isso no nosso exemplo de if/else anterior, teremos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> minhaVariavel <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nminhaVariavel <span class=\"token operator\">=</span> minhaVariavel <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chegamos no mesmo resultado, mas com uma forma muito mais reduzida, não acha?</p>\n<p>Vale lembrar que o ternário retorna os valores verdadeiros/falsos após a verificação.</p>\n<p>No mundo React, é bem comum utilizar ternários para verificar e renderizar componentes baseado em algum dado:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Qualquer coisa\n    </span><span class=\"token punctuation\">{</span>verificacaoQualquer <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentCasoTrue</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponenteCasoFalse</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dessa forma, <code class=\"language-text\">ComponentCasoTrue</code> só será renderizado caso a <code class=\"language-text\">verificacaoQualquer</code> tenha um valor <code class=\"language-text\">truthy</code>, caso contrario o <code class=\"language-text\">ComponentCasoFalse</code> será exibido.</p>\n<h3 id=\"operador-e-logico\" style=\"position:relative;\">Operador <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Logical_AND\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"E\"</a> lógico</h3>\n<p>Muito comum utilizarmos o operador \"E\" ou \"&#x26;&#x26;\" em situações dentro de if/else, como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> minhaVariavel <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> minhaVariavel2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minhaVariavel <span class=\"token operator\">&amp;&amp;</span> minhaVariavel2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'faz algo se ambas as variáveis forem verdadeiras'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'faz algo se pelo menos alguma variável for falsa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>O que nem todo mundo sabe, é que esse operador também retorna determinado valor.</p>\n<p>Esse operador retorna o operando do lado esquerdo, caso ele seja <em>falsy</em> e retorna o do lado direito caso ele seja <em>truthy</em>, em outras palavras, o que ocorre é isso aqui:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna ''</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna ''</span></code></pre></div>\n<p>Assim como o ternário, também é outro operador muito utilizado em aplicações React:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Qualquer coisa\n    </span><span class=\"token punctuation\">{</span>verificacaoQualquer <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentCasoTrue</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dessa forma, <code class=\"language-text\">ComponentCasoTrue</code> só será renderizado caso a <code class=\"language-text\">verificacaoQualquer</code> tenha um valor <code class=\"language-text\">truthy</code>.</p>\n<h3 id=\"operador-ou-logico\" style=\"position:relative;\">Operador <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"OU\"</a> lógico</h3>\n<p>Bem parecido com o operador \"E\" lógico, o operador \"OU\" lógico é utilizado com os sinais de <em>pipe</em> <code class=\"language-text\">||</code>.</p>\n<p>Esse operador também retorna determinado operando, mas podemos pensar como se fosse o \"inverso\" do operador \"E\". Ou seja, retorna os operandos do lado direito caso os valores do lado esquerdo sejam <em>falsy</em>.</p>\n<p>Com isso, temos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">||</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span></code></pre></div>\n<h3 id=\"operador-de-coalescencia-nula-ou-nullish-coalescing\" style=\"position:relative;\">Operador de <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/operador_de_coalescencia_nula\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">coalescência nula</a> (ou <em>nullish coalescing</em>)</h3>\n<p>Bem parecido com o operador \"OU\" lógico, o operador de coalescência nula é utilizado através de <code class=\"language-text\">??</code>  também retorna um determinado operando.</p>\n<p>Entretanto, ele retorna os operandos do lado direito somente se os valores do lado esquerdo forem <code class=\"language-text\">null</code> ou <code class=\"language-text\">undefined</code>. Valores como <code class=\"language-text\">false</code>, <code class=\"language-text\">0</code> ou <code class=\"language-text\">&#39;&#39;</code>, serão retornados normalmente caso sejam os operandos do lado esquerdo.</p>\n<p>Por isso ele é bem parecido com o operador \"OU\" lógico, apenas não leva em consideração todos os valores <em>falsy</em>.</p>\n<p>Por fim, temos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 'truthy'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna ''</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">??</span> <span class=\"token string\">'truthy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna NaN</span></code></pre></div>\n<h3 id=\"e-o-encadeamento-opcional-ou-optional-chaining\" style=\"position:relative;\">E o <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Optional_chaining\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">encadeamento opcional</a> (ou <em>optional chaining</em>)?</h3>\n<p>Embora não seja um operador lógico, pode causar certa confusão já que, assim como o ternário e o operador de coalescência nula, o encadeamento opcional utiliza o sinal de <code class=\"language-text\">?</code>.</p>\n<p>Porém, ele é utilizado para acessar valores de objetos. Vamos pensar no seguinte objeto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  nome<span class=\"token operator\">:</span> <span class=\"token string\">'Gabriel'</span><span class=\"token punctuation\">,</span>\n  sobrenome<span class=\"token operator\">:</span> <span class=\"token string\">'Ramos'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso tentássemos acessar algo inexistente no objeto, por exemplo <code class=\"language-text\">pessoa.documents.cpf</code> isso não existiria e teríamos um erro:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  nome<span class=\"token operator\">:</span> <span class=\"token string\">'Gabriel'</span><span class=\"token punctuation\">,</span>\n  sobrenome<span class=\"token operator\">:</span> <span class=\"token string\">'Ramos'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">.</span>documents<span class=\"token punctuation\">.</span>cpf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: Cannot read property 'cpf' of undefined</span></code></pre></div>\n<p>Esse operador serve justamente para que possamos, de certa forma, \"validar\" valores que podem ou não existir em objetos. Aplicamos esse operador ao acessar os valores de objetos: já fazíamos com <code class=\"language-text\">.</code> e agora podemos fazer com <code class=\"language-text\">?.</code> ficando dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  nome<span class=\"token operator\">:</span> <span class=\"token string\">'Gabriel'</span><span class=\"token punctuation\">,</span>\n  sobrenome<span class=\"token operator\">:</span> <span class=\"token string\">'Ramos'</span><span class=\"token punctuation\">,</span>\n  documents<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">.</span>documents<span class=\"token operator\">?.</span>cpf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<h3 id=\"ja-ouviu-falar-em-curto-circuito-ou-short-circuit\" style=\"position:relative;\">Já ouviu falar em <a href=\"https://pt.wikipedia.org/wiki/Avalia%C3%A7%C3%A3o_de_curto-circuito\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">curto-circuito</a> (ou <em>short circuit</em>)</h3>\n<p>Talvez você já tenha ouvido esse termo e, como estamos falando sobre esses operadores, vale a pena comentar o que ele quer dizer.</p>\n<p>Esses operadores sofrem algo chamado <code class=\"language-text\">curto-circuito</code>. O que isso quer dizer é que, os valores dos operandos dos lados direito/esquerdo (justamente os que são retornados) não são nem executados (ou \"avaliados\"), caso não haja necessidade.</p>\n<p>Ou seja, para esses operadores que vimos anteriormente, ao retornar determinada parte da operação, como, por exemplo no operador \"OU\" lógico:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">||</span> <span class=\"token string\">'ola'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna olá</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">||</span> <span class=\"token string\">'ola'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// retorna true</span></code></pre></div>\n<p>O lado direito da operação nem é executado caso não haja necessidade. Essa técnica pode ser interessante quando utilizamos esses operadores em blocos maiores de códigos ou funções, fazendo com que possamos executar ou não essas funções, por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> valor <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> resultado <span class=\"token operator\">=</span> valor <span class=\"token operator\">||</span> <span class=\"token function\">executaAlgumaCoisa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso <code class=\"language-text\">valor</code> seja verdadeiro, a função <code class=\"language-text\">executaAlgumaCoisa</code> não será nem executada. Ela só será executada caso seja <code class=\"language-text\">false</code>.</p>\n<p>Em resumo, é isso que curto-circuito em operadores significa.</p>\n<h3 id=\"combine-e-use-esses-operadores-de-forma-livre\" style=\"position:relative;\">Combine e use esses operadores de forma livre</h3>\n<p>Você pode usar esses operadores da forma que mais for conveniente combinando em operações mais complexas e resolver como for necessário para seu caso.</p>\n<p>Só lembre-se de usar todos eles de forma consistente e evitar deixar as operações complexas, afinal, é muito fácil criar diversas combinações com operações e dificultar o entendimento do código que está sendo escrito.</p>","timeToRead":8,"frontmatter":{"date":"28/09/2020","path":"/relembrando-operadores-em-javascript","title":"Relembrando operadores em JavaScript","subtitle":"Reforçando conceitos chave, revisando alguns operadores e entendendo os mais \"novos\" introduzidos na linguagem","banner":{"author":"runnyrem","href":"https://unsplash.com/photos/LfqmND-hym8","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20375v375h213a3563%203563%200%2000219-1l68%201h67v-5c-1-4-1-6%201-7%204-5%208-1%208%207v5h625V0H938v11l2%2021%201%2017c0%206%200%207%202%207l1%204%201%204%201%204%201%204%201%204-1%204-1%204c0%203%200%204%202%204l1%204c0%203%200%204%202%204l1%204%201%204%201%204%201%204%201%208v8c2%200%202%201%202%208l1%208%201%208c0%206%200%208%202%208l1%204%201%204c1%200%202%204%202%2016l1%2016%201%204c0%203%200%204%202%204l1%208c0%206%200%208%202%208l1%2024v24h3c2%200%202%200%202%208%200%206%200%208%202%208l1%2012v12h5l-1%2016v16h3c3%200%203%200%203%204l-1%204c-2%200-2%206-2%2052s0%2052%202%2052l1%204-1%204c-2%200-2%203-2%2020l-1%2020c-2%200-2%209-2%2076v78c0%202-1%201-3-1-1-2-4-4-7-5l-4-3-3-2-6-4-5-4-10-8-4-3-4-3-10-7-3-3a231%20231%200%2000-26-21c-5-3-5-3-5-23v-17l-1%2018-2%2020v14c0%2012-1%2014-6%2014-3%200-3%201%201%205l2%203%202%201c2%200%203%200%202-2l1-1h1l5%202c6%203%207%206%201%207l-3%201c0%202%207%206%2013%207%208%201%2012%203%2013%206%201%204%206%209%209%209l2%202c0%202%207%208%209%208l3%202%202%202%202%202%202%204v6l-3-2-9-4%201%202%206%207%207%208c4%204%204%205%203%207%200%202-2%202-5%202-5%200-9%202-7%205%200%202%200%202-2%202l4%201h12c7%200%207%200%2011%203%204%204%205%206%204%2010%200%203%200%203-1%202-1-2-5-3-5%200l-1%201-1-4c0-4%200-5-2-5-3%200-3%200-2%201%202%202%201%204-4%205-4%201-4%201-7-2l-3-4-3-3-3-3-2-1-2-1-3-3-3-2c0-3-8-3-8%200s7%207%2011%206c2%200%202%200%201%201-2%202-2%202%200%203%201%201%202%203%202%207l1%205c1%201%200%208-1%208l-3-1h-1l-3-1-4-2-1-1c0-1-1-2-3-2l-3-2-4-2-4-4-2-3c-1-1%200-3%202-2%201%200%206-2%206-4l-2-1-5-3-8-2c-7%200-17-8-21-17l-3-4-2-2-3-3-1-2-2-2-1-2-1-2-2%201a91%2091%200%200013%2022l2%205%201%204c-2%200%200%203%203%207%207%207%208%208%208%2015v6l4%201%204%202%202%201%201%201-3%201c-3%200-7%203-6%205s-2%206-4%205l-1-2c0-3-4-10-5-9h-1v-1l-1-3-3-4-3-4c-2-3-3-4-2-8%200-3%200-5-2-6l-4-5-2-2-6-5-7-5-1-1c0-2-2-1-3%201%200%201-1%202-3%202l-2%201%202%201v2c-1%201-2%200-3-2l-2-2c-3%200-2-3%200-4l2-2v-5c-3-2-3-1-5%202-1%206-3%206-8%202l-5-6-2-4-2-2-2%202c-2%202-3%209-1%209s2%202%202%208c0%207-1%208-1%206l-2-3c-2%200-5-4-5-5l-1-1h-2c-2-1-2-1-2%201l1%202c3%201%2010%2020%2010%2026v3h-8l-22-1c-4%201-5%204-2%204%202%200%202%200%201%201l-3%204c-1%203-4%204-10%202-3-2-3-2-5%200h-2l-3-2-3-3-2-4-3-4-2-2-3-5-1-3-2-2-1-1c-1%201%200%205%201%209%203%207%203%2011-2%2014-3%202-5%200-7-8%200-4-2-10-4-13l-3-8-1-3-2-4c-1-3-5-8-7-7l-1%204-4%208c-2%201-3%206-1%205%201-1%202%205%202%206-2%202-9%205-10%204l-3-2-2-2-1-2v-3c-1%200-2-1-2-3-1-2-6-3-8-1-1%202%200%2017%202%2017l1%202c0%202%200%202%206%201l7-1%204%202c4%202%205%206%202%208-3%200-5%204-2%204v2l-3%201c-2-1-8%202-7%203%201%202-8%207-11%206s-5-6-5-12l-1-3-1-8-1-8-2-3-1-2-1-4-2-4-1-2-3-6-2-8c0-6-1-8-2-8l-1%208c2%2026%202%2030%201%2033v5c2%203%202%203%200%206l-4%202c-3-1-3-2-2-7%201-3%201-3-2-4l-4-2c-3-2-5-1-6%203s-5%205-8%202-5-3-6%200v4c2%204-2%206-10%206l-7-1-10-2c-2-1-3-3-3-7l-2-5v-32c1-3%200-9-2-10h-2c-2-2-2-1-3%207l-1%2010-1%209c0%207-4%2019-6%2019h-5c-2-2-5-3-5-1l-4%203-4%204c0%205-3%204-9-2l-7-6-2-1-3-1c-2%200-7-7-7-9l-1-1c-1-1-5%201-5%202%200%202%200%202-2%201l-2-9-1-8-1-3c0-2%200-2-1-1l-2%202-4%209-1%206-1%203-1%204-4%2010-2%208-1%202-2%204-3%204c-2%201-5%200-5-2s0-2-4-2h-7c-4-1-8%200-8%203l-2%201c-1%200-2-1-1-8v-8h-3c-3%200-3%200-3%203%200%205-1%208-3%208-2%201-4-2-2-3%203-2%201-13-3-17-2-2-2-2-4%203l-3%206c0%202-6%205-10%205-2%200-3-2-1-2l1-7%204-14c2-5%204-11%204-16%200-4%200-6%203-8%202-3%203-5%201-5l-1%202-1%201-2%201c0%202-12%2015-15%2015-2%200-1%203%201%203%202%201%201%207-4%2017l-4%209-3%206c0%201-22%202-24%201v-8c0-7%200-8-2-8-3-2-7%206-7%2012%200%204%200%204-3%204-2%200-3%200-3%202%200%203-14%205-16%202%200-1%203-4%207-6s7-4%207-6l1-3c2-3%204-15%203-19l-3-9-3-6-4%204-4%204c0%201-5%209-9%2012l-3%205-4%204-1%202-3%204-3%204-1%201c-2%201-2%200-3-4%200-4-2-6-6-4l-3%201-8%203-1%201-3%201c-2%203-7%204-9%201-1-1-1-1-1%202%200%205-6%2010-9%207-2-2-1-3%201-3s7-6%207-8l1-1c1%200%203-4%202-6v-1c2%200%205-7%204-8l2-3%201-3c-2-3-1-11%200-14l1-4c0-14%203-20%209-21%203-1%208-5%208-8%200-4%201-5%204-8l4-7c2-6%2012-14%2018-15%205-1%206-2%204-8-2-3-3-4-5-1a287%20287%200%2001-24%2025l-6%208-1%201-2%202c-1%203-5%208-14%2017l-7%208-5%206c-3%203-6%207-6%209l-3%204-3%205-5%206-9%207-6%205-2%203-3%202-1%201c0%202-3%207-8%2012-4%204-4%204-4-1l1-4%202-4c2-3%202-3%200-5l-4-2-3-2-6-1c-7%200-9-6-3-9l4-3c0-3%203-5%206-5l2-1%204-1c5%200%2012-2%2012-4%200-3-3-3-15-2l-14%201c-3-1-1-5%203-10a315%20315%200%200012-12c2%200%206-3%206-4-1-2%2020-21%2023-21l1-2c-1-2%205-11%207-11l5-7-7%203c-7%202-9%202-9-2%200-2%202-3%206-5l6-3-2-3-2-14a996%20996%200%2000-2-59l-2-34v37l-1%2040-3%204-3%203-4%202-3%202-6%205-24%2021-18%2012-3%202c-2%203-7%204-10%203l-2-3v-1l-1-5-1-4-1-4-1-4-1-8v-8h-3c-3%200-3%200-3-4l1-4%202-8-1-8c-2%200-2-1-2-4s0-4%202-4l1-20v-20h-5v-12l1-12%201%208c0%206%200%208%202%208l1-8-1-8c-2%200-2-1-2-4v-4h-8v-4l-1-4-1-32%201-32%201%2028c0%2024%200%2028%202%2028l1-48-1-48c-2%200-2-2-2-12s0-12%202-12l1-12c0-10%200-12%202-12l1-27c-1-27%200-37%201-37l1%204c0%203%200%204%202%204l1-12c-1-10-1-12%201-12l1-4c0-3%200-4%202-4l1-16c0-14%200-16%202-16l1-8%201-8%201-12c0-10%200-12%202-12l1-8%201-8%201-12c0-10%200-12%202-12l1-8c0-6%200-8%202-8l1-4%201-4%201-9c0-8%200-8%203-11s3-3%203-11l1-9%202-8%201-8%201-8v-8l1-8c0-7%200-8%202-8s2-1%202-4%200-4%202-4l1-8V8l1-4V0H0v375M354%208l-1%2014c-1%206-1%207-5%208-5%202-12%203-12%201-1-2-7-2-8%200l-2%201-2%201h-5c-1%202-1%202-3%201-1-1-1-1-3%209a416%20416%200%20005%2077l1-4c0-4%200-4%201-2l2%202c2%201%203%2012%201%2012l-1%204c0%209-2%206-2-3l-1-9v11l-1%2017c-1%204-1%204-1-4l-1-8-1%2033v32h2c1-1%204%200%206%201l4%201c2%200%202%200%200%202-3%203-7%205-11%205-2%200-2%200-2%202l1%203%202%201c2%200%202%201%202%209%200%205%200%209%201%208l2%2015c2%2014%203%2016%204%2016%202%200%202%201%202%204l1%204a1387%201387%200%2001-1%20152c-2%200-2-1-2-4l-1-4-1%2012a471%20471%200%20013%2020l1-4%201-4%201%209c0%208%200%209%203%2011%202%202%203%202%203%201%200-2%201-2%202-1%203%201%203%204%200%204s-2%201%201%204c3%202%203%203%203%207l1%205%201%204-1%204-1%204-1%204-1%201-2%203h-11l-4%204c-1%204-3%204-3%200a481%20481%200%2000-2%2087c-2%204%202%204%207-2%203-3%206-5%208-5l3-2c0-2%2015-15%2019-17h3c2%202%206%201%209-1%206-6%206-5%209-4%203%202%203%202%202%205%200%204-3%208-7%2011-6%203-9%208-5%208%201%200%202%200%209-7%2013-12%2015-13%2020-15h9l2-2%202-1%202-1%202%202%202%201h2v2l10-5h2l-5%2010-1%202-5%207c-6%206-8%209-10%2013s-1%205%203%202c4-5%2010-8%2012-8%203%200%207-4%207-6l2-2%201-1%202-3%202-4%201-2c3-2%204-2%202-3-4-3%203-9%2010-9%203%200%204%200%205-2%200-2%204-4%206-4%202%201%204-2%204-5%200-2%200-2%201-1%203%204%204%202%204-2-1-4-1-5%201-5%203%200%207-4%205-5-1-1-1-2%201-3l2-5%201-2c2%200%204-4%202-5l-1-2-1-1-1-1-1-2c-2%200-11%207-13%2010-2%204-8%209-9%209v-5l1-7-3-1c-7%201-13%200-13-1l2-3%202-3c0-1-3%200-5%202s-6%203-7%202%204-9%206-11l2-3%201-2c1%200%202-1%201-2%200-3-2-3-4%200l-2%202c-2%200%200-3%208-12l9-9v-34a39162%2039162%200%2001-4-219c-1-2%200%20224%202%20246%200%207%200%207-5%2010a1786%201786%200%2000-20%2011l-2-1c-2%200-3-1-3-4v-4l1-8c0-7%200-8%202-8s2-1%202-16l-1-16-1-4c0-4%200-4-1-3s-3%203-5%203c-2%201-3%202-2%203l-2%201c-2-1-2-1-2%207l-3%209-1-5-1-5-1-6-1-4%201-15%202-2%203-2h1l2%201%202%203c0%202%201%201%201-1l2-4v4c1%204%204%206%204%203l1-2c3%200%204-14%202-37-1-17-1-63%201-112a2038%202038%200%20003-104c1-12%201-20-2-31-2-7-2-17-1-17l1-1%202-3%202-4%202-4c5-5%206-8%206-14%200-3%200-4%201-3%201%204%202%202%202-3a990%20990%200%20014%2093%20572%20572%200%20003%2037%20835%20835%200%20014-58l1-4c0-3%200-4%201-3%201%203%202-1%202-9%200-6%201-9%202-4a405%20405%200%20013%2048c1%204%202-6%202-38%200-38%201-52%202-46l3%204%202%204c0%202%203%206%206%2010l2%203%202%202a1113%201113%200%20002%2077l2%2077a15403%2015403%200%20013%20167c0%201-4%206-14%2014-8%206-8%206-7%2015%200%207%202%208%203%200%200-8%201-11%203-11l4-2c3-2%204%201%201%204-5%204-5%209-1%208l8-6c2-2%203-1%202%202v2l3-2%204-3h3c3%201%204%201%204-1s2-3%207-2l4-1%202-1%201-1%201-2c1%200%200%204-2%206v5l1-1%204-1%205-3c2-2%202-2%201-3-2-2-2-2-1-3%202-2%201-6%200-4-2%201-14%202-15%201h-2l-3-1c0-2-1-2-2-1-3%201-7%200-7-3h-1c-2%201-1-1%204-7%207-7%207-9%200-4l-4%202c-2%200-2-4-2-130%200-148%200-144%201-145l1-6c0-4%200-5%202-6l4-6c2-4%204-5%206-3a154%20154%200%20019%2034l1%203v-3l1-3%201%2017a5659%205659%200%20005%20159l1-34%201-2v-5c1-2%201-2-1-2l1-1%201-2-1-4a410%20410%200%20010-103l1-21%201%205c0%203%200%204%202%204%205%201%207%2021%209%2082a5301%205301%200%20003%2093v42l-2%201c-3%203-3%204%200%203%202-1%202-1%202%202l-1%203%207-1%208-1%202%201h2l4-1%202-1h-1l-1-1c0-2-1-2-3%200h-2l-7-1c-6-1-7-4-3-8%203-2%203-4%200-2h-3l1-81c0-79%200-86%202-85a1488%201488%200%20016%20166c1%202%208%202%2021%201%207-1%200-3-10-3-7%201-8-1-5-5l1-2%201%202c1%202%201%202%204%201a388%20388%200%200155-1%20244%20244%200%200137%202c2%202%202%201%200-8l-1-11v-8c-2-4-2-3-3%206%200%2015%200%2017-1%2014l-1-2v2c0%202%200%203-2%202h-10l-6%201h-3l-6-1-6%201h-52v-7a1055%201055%200%2001-1-116%201636%201636%200%20015%2059c0-60%202-58%203%204a493%20493%200%20003-47l1%2034%201%2034v-32l1-31%201%2044%201%2043h45l-22-1h-22v-3a865%20865%200%20012%202v-1l1-2%201-1h-1l-1-32c0-29%200-36%202-27v54l-1-2v2c0%202%201%203%202%203l1%201%209%201%2022-1h13v-61l1%2024%201%2025v-54l1%2024%201%2025v-54l1%2027c1%2034%201%2033%201-2a755%20755%200%20012%2023l1%2031h-5c-5%200-5%201%201%201l5%201-1-50a843%20843%200%20014%2028v-35l1-40c1-5%202%2016%202%2050a756%20756%200%20002-13c0-65%202-72%203-12a1010%201010%200%20002%2052%20390%20390%200%20004-46c0%2013%201%2015%201%2010l1-7v9c0%206%200%209-1%208s-1%200-1%205v6l1-5c0-3%201-1%201%207l-1%207c-1-6-2%208-1%2017%201%205%201%205%201%201l1-5v7l-1%206-1%202v4l1-1%201-1-1%204v5l1%202c0%203-2%204-9%204h-6c-1%202%205%203%2012%203%204%200%206%200%207%202l3%201c1-1%201-1-1-3s-2-3-2-11l-1-20a4862%204862%200%20012-125l1-7%201-7%201%2026a7858%207858%200%20003%20115c-2-8-3-6-2%202%202%2023%202%2025%201%2025-3-1-2%200%200%203l2%203c0%202-6%204-10%204s-5%200-5%202l1%201a451%20451%200%200018-2c0-3%200-3%202-2v-2c-1-2-2-6-1-17l-1-15v-1l1-69a1347%201347%200%20012-121%20475%20475%200%200020-52c2-3%201-4-2-4l-22%201h-20l-1-13V95h8c1-1%2026-1%2027%201l-2%201c-2%200-3%201-3%202h1l3-1c1%201%201%201-1%202s-2%201%202%201h13c2%200%201%202-2%204-3%204-3%2012%201%2013%203%200%204-1%204-7l1-5c1%200%204-5%206-13l6-12%204-9%202-5c3-6%202%200-1%208-2%205-3%207-2%208s4-4%204-7l1-1%202-4c4-12%205-12%205%200%200%209%200%2010-2%2012l-3%203-3%202-3%201h-2l-2%204-4%208-4%208-1%203-1%204-2%205v13a6278%206278%200%20014%20183c0-17%200-18%201-8l1%2012v-9l1-11a383%20383%200%2001-1%2051%20686%20686%200%2000-3%2087l-2%201c0%202-1%202-5%202l-4%201h-4c-5-1-5-1-3%204%202%206%208%2010%209%206%200-3%203-5%207-5l5%201c3%200%205%201%208%205%206%206%2018%2016%2020%2016l5-1c0-2-4-7-7-8l-4-4-2-3-2-2c0-2-1-2-2-2l-1-1c1-1%200-3-1-4h-2l-1-1c-2-3-3-26-3-44l-1-17c-2-1-2-3-2-20a54353%2054353%200%2000-1-231c2-7%203-5%203%203-1%209%200%2025%202%2027%201%201%201%201%201-1l1-6c1%201%202%200%202-2l1-2v2l1%203c2-2%202%202%203%2040a3732%203732%200%20007-82%20903%20903%200%20003%2045v-7a269%20269%200%20012-51l3-7%203-6%201-3%204-1c3%200%204%200%204%202s5%2010%207%2010l1%202%201%202%203%206%202%205v11c-3%206-4%2017-4%2025a1766%201766%200%20014%2084%201492%201492%200%20014%2061c2%2017%203%2049%203%20105a986%20986%200%20005%2075c2%200%201%208%200%2011-2%202-7%200-16-7l-6-4%207%2010%206%209h-3c-3%200-3%202-1%204s3%205%200%207v2c2%202%201%205%200%205-3%200-2%202%201%203s-6%202-17%202c-6%200-7%200-10-3-7-7-7-1%201%207l4%207%203%205c3%201%202%203%200%202-3%200-3%200-3%202s0%203%203%202l2-1c0-2%204%201%205%204l1%203h-5l-6-1-1-3-3-2-1-2-1-3-3-1-4-2c-3%200-4%200-5-4-2-5-5-5-6-1-1%205-3%206-5%203-3-4-4-7-3-9l1-2v-3c-1-3-4-3-5%200l-3%201h-4l1%204c0%203%200%204-3%202-2-1-3-2-4-1l-4%201c-2%200-2%200-1%201%202%201-2%203-4%202-2%200-1-2%201-2h-13l-1-3-3-3-1%203%201%208-3-2c-1-1-1-1-5%203-5%205-6%208-3%2010v3c-1%202-1%202-4%201-3%200-4-1-2-2%201-2%201-2-2-2-2%200-3%200-3%202s0%202-1%201l-2-2c-1%201-2%200-4-11l-2-7-1-2-1-4c-2-3-3%201-3%206%200%206-1%206-4%201-1-3-2-4-5-4-4%200-4%200-4%202%201%201%200%202-1%202s-2%201-1%203c0%203-4%203-6%200-1-3-1-3%201-3v-1l-4-1h-3c-2%202-2%202-3-3-3-10-6-4-7%2012h-1l-1-2c1-2-1-9-2-10l-1%202-1%203-6%203c-1%200-1%201%201%204v3c-1%200-2%201-2%203%200%203%200%203%203%203l3%201h2l2-1%201-2c0-1%200-2%201-1v12c-2%202-2%202-7-1l-8-3c-5%200-7-2-10-9-2-5-2-5%200-8%201-2%201-4-2-3v-1l1-5c-1-6-4-5-6%203l-2%205-1%203c0%203-1%203-3-1l-2-3c-1%200-4%204-4%206h-1l-2-1-5%205c0%202-4%200-4-2s1-3%203-4l2-2-2-2c-2%200-3-2-3-2%200-1-4-1-7%201-2%200-2%200-1-3l-1-3c-1%200-3%202-3%204l-9%2014-1%202-1%201v1c1%201%201%203-1%206l-2%208-2%205c-4%205-9%2013-9%2019-1%206%201%206%205-2%204-9%205-11%209-11l7-2%208-2c4-1%204-1%203-4l1-2%204-1%204-1%201-2c-1-2%200-3%204-3%203%200%203%200%204%206v12l-2%2012c0%207%200%207%202%206%203-1%204-4%204-8%200-5%201-7%204-9s8-12%207-12h-3l-3-1%201-2%204-2c1-2%202-2%204-2l5%201%205%201%208%202%207%201c1%201%202%2021%201%2024-1%204%200%2010%201%2010%202-1%203-5%203-11l1-7%202-4c0-2%201-3%202-3%203%200%206-5%205-8l1-2%203-2c1-1%202-2%205-2s3%200%202-1c-3%200-3-1%200-4%204-4%208%201%205%206-2%203%200%204%204%204%202%200%202-1%203-4%200-6%201-6%203%200a180%20180%200%20005%2019l3%207c1%202%201%201%201-8%201-8%202-9%207-4%203%203%203%203%203%201s0-3%204-3l4-1%203%201%204%202%201%202%202%201c1%200%202%205%200%205l2%204%204%204%201%201c2%200%202-12%200-13l-1-6c0-6%202-6%204-1%202%207%206%2015%207%2014%202-3%201-12-2-15l-2-4%201-2%2016-2c6%200%208-1%207-5v-3l3%203c6%206%209%2010%209%2012l3%203%201%203c0%202%204%205%205%204%201%200%201-1-1-4-1-1-2-2-1-3%202-1%205%201%206%206l4%204%201%202-1%202-3-1c-2%200-2%200-1%204l2%206%201%202%201%201%201-4-1-4h6c6%200%206%200%206-2%200-4%202-6%205-3%202%200%203%202%203%202l2%202c2%201%206-1%206-4l1-1-2-7-3-7c0-2%205%202%205%204l10%2010v-11c2-1%200-4-3-5-6-3-5-5%203-6%204-1%205-1%206%202v3c-3%201-1%203%203%203%204-1%207-3%204-3-2%200-3-3-3-5l4-1h5c1-2%205%200%2012%208a329%20329%200%200014%2014c0%204%200%205%203%205a70%2070%200%200122%2023%20119%20119%200%200116%2013l4%203%204%202v-3l-4-2c-2-2-2-2-1-3%203%200%202-2%200-2s-8-5-7-7l2-1c2%200%202%200%202-2l-1-2-1-1-3-2c-2-2-2-2%200-2l2-1-2-3c-5-7%204-5%2011%203l4%203v-29c0-30-2-72-3-64v5l-3-2c-2-1-3-3-3-5-1-2-1-3-2-2%200%201-1%201-3-1-4-3-4-4%200-4%203%200%203%200%203-4v-4h-8v4l-1%204-1-8v-8h10v-4l1-4%201-5c0-4%200-5%203-7l3-2v3l1-21c0-23%200-24-2-24s-2-1-2-4l-1-4c-2%200-2-2-2-12l-1-12-1%204-1%204c-2%200-2-2-2-16s0-16%202-16l1-10c-1-7%200-15%201-24v-30l-2-8%201-8c2%200%202-1%202-4l1-4c2%200%202-3%202-16%200-21%201-37%202-38%203-2%201-4-2-5l-6-3-2-2%203-1%205-2c3%200%204-2%201-2v-1a3212%203212%200%20011-135c1-14%200-33-2-37%200-1-1-2-3-2l-2-1-9-1-4-1-2-1c-7%200-12-5-12-12V0h-25v5c0%208-1%2015-2%2015-2-1-4-10-4-16V0h-97c-97%200-98%200-98%202l-1%202a54%2054%200%2000-9%202l-2%201-2%201c0%202-3%202-7%201-3-1-3-1-1-2h-1l-3-1-4-1c-4%200-5-1-5-3s-2-2-99-2h-99v7c0%208-2%2017-4%2017-1%200-3-11-3-18l1-6h-26v8m535%200l2%2032%201-20-1-20c-2%200-2%202-2%208m-66%2052c0%203%200%204-2%204s-2%201-2%2015l-2%2018a16725%2016725%200%2001-2%20306c0-3-4-9-5-8l-1%202c1%201%200%204-1%206v17c-2%202-2%206-1%2013s3%2010%207%207%204-1%205%2033a491%20491%200%20006%2074l2%202h7c6-4%206-5%206-142-1-187-5-335-9-335-3%200-7-6-7-11-1-5-1-5-1-1M380%2085l-1%2010-1%204v-4l-2-3-3%2030c0%207-1%209-4%2010-2%201-3%2064-3%20201%201%20177%203%20220%208%20217l5%201c6%201%207%201%208-2a706%20706%200%20003-105h4c5%200%205%200%206-2%202-5%202-17%200-19v-10l-2-10c0-7-1-8-4-5-4%204-5%202-5-5a15869%2015869%200%2001-6-296%20351%20351%200%2001-3-12m218%207c-9%200-11%201-11%202a477%20477%200%200038%200l9-1h-8c-14-2-18-2-28-1m-2%209c-10%201-14%202-14%203l-2%201c-3%201-3%203%202%204%206%201%207%201%207%203l-3%201-2-1c0-2-3%200-4%204l-2%203%203%203%203%202-3%202-1%202%202%202%201%202%201%202-2%202c-2%200-2%200%200%202v4c-2%202-2%202%200%202s2%200%202%202v1c1-1%201-1%201%201-1%201-1%202%201%203v1l-2%202c0%202-1%203-3%201h-1l-4%203c-3%200-5%202-4%202l-2%202h-2l2%201c2%201%202%201%201%206%200%206%201%2011%202%209s3%202%202%205l1%203v4c0%202%200%202%202%202%201%200%202-1%202-5s1-6%203-6v1c-2%202-1%203%201%203%203%200%208%202%208%203l-4%201h-3c2%200%203%203%201%203-2%201%200%204%202%204l5%201c0%201-4%202-6%201-1-1-2%200-1%202l-1%201v1l-4%201c-5%200-5%200-5%202%200%203%200%203%203%203%204%200%207%201%206%203v1l1%203-1%205c0%202%200%202-1%201s-1%202-1%2011c0%206%200%2010%201%209l1-2%201%202%201%203%201-6v-5l-1-9%201-9v-6l19-1%2019%201h-17l-19%201%2018%201%2019%201-18%201-14%201h17l14%201-15%201-17%201c-2%201%204%201%2015%201%2016%200%2017%200%2017%202s-1%202-3%202a362%20362%200%2000-14%202l17%201-1%202v1c1%200%202%201%201%203%200%202-1%202-7%202h-6l7%201%205%201h-3l3%201%201%201v1c1%203%201%208-1%208v1l2%201c-1%202%202%203%204%202v-20c0-14%201-16%202-15v-1l-2-2%202-1v-1c-3-2-2-3%201-3h5v-14c2-1%200-4-2-3l-3-4%204-2c3-2%203-2%203%200s1%202%202%202l1-3%201-2%201%202c1%205%202-14%201-23%200-11%200-12-3-12l-2-1c0-1%204-3%205-2%202%201%201-2-1-3l-2-2%202-2%202-2-4-2-4-2%202-3c3-2%203-2%202-5-1-1-1-2-2-1l-2-1-1-2c-2%200-2-1-2-4%200-4-2-5-11-5-5%200-5-2%200-2%2010%200%2022-4%2013-4-2%200-2%200-1-1l-10-2c-18-2-22-2-32-1m65%206c-1%204-1%2010%201%2011%201%201%2012%200%2012-2%200-1-2-2-6-2l-2-1%202-1%201-1-2-3-1-2-2-1-3%202m30%200v3c0%203-2%205-3%203l-12-1%201%203c1%203%201%203%208%203%209%200%209%200%208-7%200-3-2-7-2-4M559%20262a2797%202797%200%20002%20122c2%200%202-3%202-13%200-5%200-8%201-6%200%204%201%204%202-1l-1-5v-7c0-5%200-7-1-5-1%201-1-1-1-7a2238%202238%200%2000-4-78m87%2095v9l-1%207-34%201-33%201v-3c0-4-1-4-3%200v2l1%201%2021%201h50v-21l-1%202m153%2018c-2%203-1%2012%203%2015%202%201%202%201%203-2%203-9-1-18-6-13m-277%2022v20l-3%202c-3%202-4%205-1%203%202-1%202-1%202%202s0%204%204%201c4-2%206-5%203-7-1-1-2-3-2-16-2-26-3-28-3-5m271%209c-4%207-6%2016-3%2020l2%201%201%201c-1%201%200%202%201%203%203%201%204%201%202-1h2c2%200%202%200%201%201v1l2-1%201-2%201-11c0-5-2-10-4-10l-1-1c-1-2-3-2-5-1m-114%2042c-2%203%207%2012%209%209l3-1c4%201%204-2%200-3l-3-3c0-2-9-4-9-2m-26%201c0%202%200%202-4%201-7%200-9%201-5%203l4%203c0%202%202%203%205%203l1-3v-3l1%201%202%204%202%204v-6l-1-5-3-2c-2-2-2-2-2%200m-147%2064l-4%206-2%202c-2%201-3%202-3%204l-4%206-5%205-3%205-9%2018c0%202%203%201%204-1l1-2%204-5c5-7%2011-10%2013-6%200%202%202%203%203%201%200-1%201-2%203-2%204%200%208-2%208-4s4-4%207-4%204-1%202-4l-3-6c-2-5-2-5-5-4-3%202-5%201-5-4-1-2-1-3%202-4s3-2%201-3c-2-2-2-2-5%202m-32%2051a322%20322%200%2000-10%2018c8%200%2019-9%2015-12-3-1-4-4-3-6v-3l-2%203m-184%2078l-2%202-2%201c-2%200-9%207-9%208a171%20171%200%2001-28%2026l-8%208-5%206-6%208c-3%203-4%209-2%209l17-15a271%20271%200%200126-25%204927%204927%200%200128-29l-9%201m423%2017c-3%202-4%2010-1%2011l1%202%202%201%205%202c2%200%202%200%202-5-2-11-3-13-9-11m26%2015c-1%201%203%2016%205%2019l2%203%202%202-1-4-1-8-1-7c-1-3-6-6-6-5m-331%2023c-3%203-4%205-1%206h2v1l8-1c5-1%206-2%202-5-4-4-8-4-11-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/21095/banner.jpg","srcSet":"/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/36b10/banner.jpg 300w,\n/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/88367/banner.jpg 600w,\n/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/21095/banner.jpg 1200w,\n/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/97ce3/banner.jpg 1800w,\n/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/3f4e4ddaa69dd84fd4ce510e10d4c68b/58d74/banner.jpg"}}}}}}},"pageContext":{}}}