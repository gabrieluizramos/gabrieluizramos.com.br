{"componentChunkName":"component---src-templates-post-article-index-js","path":"/depuracao-de-aplicacoes-javascript","result":{"data":{"markdownRemark":{"id":"d8cecace-bd9b-55c0-a8d2-4bfe6935920b","html":"<p>Se você já escreveu algum trecho de código e percebeu que algo não funcionava como deveria, com certeza você já depurou uma aplicação.</p>\n<p>Também conhecido como <code class=\"language-text\">debugging</code> (ou <code class=\"language-text\">debugar</code>), <code class=\"language-text\">depurar</code> é essa etapa de desenvolvimento onde você, através de ferramentas e funcionalidades da linguagem ou do seu editor/IDE, começa um processo de investigar e encontrar algum erro (ou <code class=\"language-text\">bug</code>) ou comportamento não desejado em seu software.</p>\n<p>Particularmente acredito que quanto eficiente você for com as ferramentas de depuração que pode utilizar, mais facilmente você vai achar algum problema e investigar algo necessário em sua aplicação. O que faz com que você economize muito tempo e também evite ficar batendo cabeça sem necessidade.</p>\n<p>O intuito desse post é compilar algumas dicas e utilitários que eu gosto de utilizar no meu dia-a-dia e que percebi que me tornam mais produtivo.</p>\n<h3 id=\"debugger-breakpoints-e-os-sourcemaps\" style=\"position:relative;\"><em>debugger</em>, <em>breakpoints</em> e os <em>sourcemaps</em></h3>\n<p>Provavelmente o tópico que mais mudou a forma como eu realizo esse processo de <em>debugging</em> nas aplicações que eu encontro por aí.</p>\n<p>A palavra chave <code class=\"language-text\">debugger;</code> é uma instrução que faz com que nosso código seja \"pausado\" (ou, em outras palavras, é um <em>breakpoint</em>) em um momento qualquer de execução. Podemos colocar</p>\n<p>Vamos fazer um teste. Rode o seguinte código com o DevTools aberto:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> numero <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Assim que executar, você perceberá que o código será executado e seu <code class=\"language-text\">DevTools</code> pausará no momento em que encontra a declaração <code class=\"language-text\">debugger;</code>. Com isso, você consegue ter acesso às variáveis disponíveis nesse momento em que o <em>breakpoint</em> está ativo.</p>\n<p>Com isso você também consegue clicar em alguma outra linha, criando outro <em>breakpoint</em> diretamente pelo <code class=\"language-text\">DevTools</code>, facilitando muito o trabalho de validar suas funções e variáveis em um determinado ponto no seu código.</p>\n<p>Nesse momento de pausa você consegue visualizar alguns botões que permitem que você continue a execução da sua aplicação e até mesmo navegue entre linhas ou execuções de funções caso seja necessário.</p>\n<p>Para aplicações que utilizam NodeJS, não basta apenas colocar uma instrução <code class=\"language-text\">debugger;</code>. Você também precisará executar a aplicação informando os argumentos <code class=\"language-text\">--inspect</code> ou <code class=\"language-text\">--inspect-brk</code>. Isso iniciará um processo que estará atrelado ao seu <code class=\"language-text\">DevTools</code> (preferencialmente o Google Chrome) de maneira que, após executá-lo, você verá o ícone do NodeJS.</p>\n<p>A diferença entre <code class=\"language-text\">--inspect</code> e <code class=\"language-text\">--inspect-brk</code> é que o primeiro apenas inicia o processo atrelado ao navegador. Já o segundo, cria um <em>breakpoint</em> pra você automaticamente na primeira linha do seu código, caso você não tenha nenhuma instrução <code class=\"language-text\">debugger;</code> escrita ou queira navegar pelos arquivos do seu projeto antes.</p>\n<p>Caso isso não ocorra, mesmo após executar o Node com esses valores, você pode dar uma olhada nas suas configurações do Google Chrome (na url <a href=\"chrome://inspect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">chrome://inspect</a>) e checar se as opções necessárias estão ativas.</p>\n<h4 id=\"sourcemaps\" style=\"position:relative;\">SourceMaps</h4>\n<p>No entanto, apenas utilizar <em>debugger</em> ou <em>breakpoints</em> pode não ajudar muito quando você lida com código comprimido/minificado, o que é muito comum.</p>\n<p>Para isso existem os sourcemaps, aqueles arquivos com extensão <code class=\"language-text\">.map</code> que podem ser gerados por ferramentas de build. Esses arquivos guardam referencias aos arquivos fontes de projetos que utilizam ferramentas que trabalham com essas compressões/minificações ou qualquer outro processo de compilação (como TypeScript).</p>\n<p>Eles servem para que, mesmo após processar algum código fonte, você consiga depurar o conteúdo escrito sem lidar com o código alterado (antes de processá-lo), manipulando através de breakpoints e \"visualizando\" diretamente o código que você escreveu.</p>\n<p>Por exemplo, o seguinte código em TypeScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// arquivo index.ts</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Irá gerar o conteúdo abaixo, após ser compilado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo dist/index.js</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//# sourceMappingURL=index.js.map</span></code></pre></div>\n<p>Note que no fim do conteúdo, existe um comentário com <code class=\"language-text\">sourceMappingURL</code> apontando para um arquivo <code class=\"language-text\">index.js.map</code>. Esse arquivo é um <code class=\"language-text\">json</code> contendo o seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"file\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sourceRoot\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"../src/index.ts\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"names\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"mappings\"</span><span class=\"token operator\">:</span><span class=\"token string\">\";AAAA,SAAS,IAAI,CAAC,CAAS,EAAE,CAAS;IAC9B,QAAQ,CAAC;IACT,OAAO,CAAC,GAAG,CAAC,CAAC;AACjB,CAAC;AAED,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>E nesse conteúdo temos algumas informações importantes, como:</p>\n<ul>\n<li>a versão (<code class=\"language-text\">version</code>) do <em>sourcemap</em>;</li>\n<li>o arquivo (<code class=\"language-text\">file</code>) compilado que está relacionado ao <em>sourcemap</em> (<code class=\"language-text\">index.js</code>);</li>\n<li>os arquivos fonte (<code class=\"language-text\">sources</code>) que geraram o <em>sourcemap</em>;</li>\n<li>uma sequência de mapeamentos (<code class=\"language-text\">mappings</code>), que servem como base para a relação entre o código fonte e o código compilado.</li>\n</ul>\n<p>Esses mapeamentos são gerados utilizando Base64 VLQ que é uma forma de codificar algum conteúdo, mas podemos ter em mente que são dados que relacionam o código compilado do arquivo <code class=\"language-text\">file</code> com o código fonte em <code class=\"language-text\">sources</code>.</p>\n<p>Se quiser ler um pouco mais sobre Base64 VLQ e como esses mapeamentos são gerados, você pode ver esses 3 outros posts (em inglês):</p>\n<ul>\n<li><a href=\"https://www.mattzeunert.com/2016/02/14/how-do-source-maps-work.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How do source maps work?, por Matt Zeunert</a>;</li>\n<li><a href=\"https://ryanseddon.com/javascript/source-mapping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Introduction to JavaScript Source Maps, por Ryan Seddon</a>;</li>\n<li><a href=\"https://www.lucidchart.com/techblog/2019/08/22/decode-encoding-base64-vlqs-source-maps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Decoding and Encoding Base64 VLQs in Source Maps, por Ty Lewis</a>.</li>\n</ul>\n<p>Com essas referências e o arquivo <em>sourcemap</em> gerado corretamente, mesmo utilizado o <em>debugger</em> na aplicação, é possível ver pelo <code class=\"language-text\">DevTools</code> o código TypeScript que foi escrito e não o JavaScript que foi gerado apos a compilação.</p>\n<p>Ah, vale comentar que esses arquivos de sourcemap só são baixados no dispositivo caso o <code class=\"language-text\">DevTools</code> esteja aberto, evitando o consumo desnecessário de recursos. O mesmo se aplica para códigos CSS que são processados por algum pré-processador ou algo do tipo.</p>\n<h3 id=\"funcoes-do-console\" style=\"position:relative;\">Funções do Console</h3>\n<p>O console é, de longe, um dos amigos mais antigos de quem escreve códigos em JavaScript e você provavelmente já o deve conhecer.</p>\n<h4 id=\"log\" style=\"position:relative;\">log</h4>\n<p>A função mais conhecida de todas. Basta passar alguma mensagem ou variável para ele, que aparecerá no seu console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mensagem <span class=\"token operator\">=</span> <span class=\"token string\">'Texto do console'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>mensagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exibe 'Texto do console';</span></code></pre></div>\n<p>Dessa forma, sua mensagem é exibida corretamente.</p>\n<h5 id=\"logs-formatados\" style=\"position:relative;\">Logs formatados</h5>\n<p>O primeiro passo que podemos dar além do console tradicional, é formatar alguns logs conforme nossa necessidade. Você pode formatar visualmente um log adicionando o prefixo <code class=\"language-text\">%c</code> antes de sua mensagem e passando como segundo argumento do console uma string com regras de CSS.</p>\n<p>Mais ou menos dessa forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> css <span class=\"token operator\">=</span> <span class=\"token string\">'background: tomato; color: white;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mensagem <span class=\"token operator\">=</span> <span class=\"token string\">'Texto do console'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%c</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>mensagem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> css<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// exibe 'Texto do console';</span></code></pre></div>\n<p>Com isso, sua mensagem aparecerá igual anteriormente, mas com as regras de CSS aplicadas. Rode esse exemplo no console do seu navegador e veja o resultado.</p>\n<p>No caso de aplicações com NodeJS, para mostrar seu log formatado as opções são um pouco diferentes. Você precisa informar os códigos das cores usando padrão ANSI.</p>\n<p>Por exemplo, <code class=\"language-text\">\\x1b[32m</code> deixa um texto verde. Após isso, precisamos concatenar <code class=\"language-text\">%s</code> para escrever nossa string e depois <code class=\"language-text\">\\x1b[0m</code> que é o código que redefine as cores de log (para que os logs seguintes da aplicação não tenham o mesmo estilo aplicado). Tendo, ao final, algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> cor <span class=\"token operator\">=</span> <span class=\"token string\">'\\x1b[32m'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> texto <span class=\"token operator\">=</span> <span class=\"token string\">'%s'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> reset <span class=\"token operator\">=</span> <span class=\"token string\">'\\x1b[0m'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> definicoes <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cor<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>texto<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mensagem <span class=\"token operator\">=</span> <span class=\"token string\">'Texto do console'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>definicoes<span class=\"token punctuation\">,</span> mensagem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, o texto ficará verde.</p>\n<h4 id=\"error-info-e-debug\" style=\"position:relative;\">error, info e debug</h4>\n<p>São outros três níveis de erro diferente. No caso do <code class=\"language-text\">info</code> a mensagem aparece com algumas marcações de informação diferente no navegador. <code class=\"language-text\">error</code> já exibe uma mensagem como se fosse um erro da aplicação (mas disparado pelo console) e <code class=\"language-text\">debug</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'info'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"dir\" style=\"position:relative;\">dir</h4>\n<p>Uma forma de exibir valores de forma mais organizada e com uma lista interativa. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  nome<span class=\"token operator\">:</span> <span class=\"token string\">'gabriel'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, o objeto será exibido mas com uma formatação de lista e você pode clicar para expandir os valores internos.</p>\n<h4 id=\"table\" style=\"position:relative;\">table</h4>\n<p>Exibe uma tabela com os valores do array/objeto informado:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> pessoa <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  nome<span class=\"token operator\">:</span> <span class=\"token string\">'gabriel'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>pessoa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"algumas-ferramentas-mais-voltadas-a-verificacao-de-performance\" style=\"position:relative;\">Algumas ferramentas mais voltadas à verificação de performance</h3>\n<p>Existem alguns utilitários do console que servem para medir o tempo de execução de um trecho de código. Claro que, como todo código JavaScript, esses valores mudaram de ambiente pra ambiente, dependendo bastante do processamento de cada máquina que executa um mesmo código.</p>\n<h4 id=\"time-timelog-e-timeend\" style=\"position:relative;\">time, timeLog e timeEnd</h4>\n<p>São três funções utilizadas para criar um contador e verificar quanto tempo um trecho de código é utilizado. Todas elas (<code class=\"language-text\">time</code>, <code class=\"language-text\">timeLog</code> e <code class=\"language-text\">timeEnd</code>) levam necessitam de um texto que é utilizado como marcador desse contador criado. E elas funcionam da seguinte maneira:</p>\n<ul>\n<li><code class=\"language-text\">time</code>: inicia um contador com o marcador selecionado;</li>\n<li><code class=\"language-text\">timeLog</code>: exibe um log de algum marcador;</li>\n<li><code class=\"language-text\">timeEnd</code>: finaliza algum marcador criado.</li>\n</ul>\n<p>Vamos fazer um exemplo para ficar mais claro. Vamos criar um timer com marcador <code class=\"language-text\">loop</code>, rodar um <code class=\"language-text\">for</code> 10 vezes e, após isso, finalizá-lo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> marcador <span class=\"token operator\">=</span> <span class=\"token string\">'loop'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span>marcador<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">timeLog</span><span class=\"token punctuation\">(</span>marcador<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rodou o laço no indice </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span>marcador<span class=\"token punctuation\">,</span> <span class=\"token string\">'finalizou loop'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ao executar esse código, criamos um <code class=\"language-text\">time</code> com o marcador <code class=\"language-text\">loop</code> e temos algumas mensagens. Sendo elas:</p>\n<ul>\n<li>10 para a execução do laço;</li>\n<li>1 para a finalização do marcador <code class=\"language-text\">time</code>.</li>\n</ul>\n<p>Cada uma delas com seu respectivo tempo de execução ao lado.</p>\n<h4 id=\"performance-api\" style=\"position:relative;\">performance API</h4>\n<p>Também disponível como um <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Window/performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">objeto global</a> para ser verificado, <code class=\"language-text\">performance</code> é uma <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Performance\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">API</a> que pode ser utilizada para verificar algumas informações como os valores de memória (<code class=\"language-text\">memory</code>), que apresenta informações sobre espaço de memória alocado e que pode ser utilizado em sua aplicação.</p>\n<h3 id=\"copy\" style=\"position:relative;\">copy</h3>\n<p>Um utilitário para quando você precisa copiar alguma estrutura para a área de transferência com o <code class=\"language-text\">DevTools</code> aberto que pouca gente usa.</p>\n<p>Basta executar, no <code class=\"language-text\">DevTools</code>, algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> estrutura <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  pessoa<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    nome<span class=\"token operator\">:</span> <span class=\"token string\">'gabriel'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>estrutura<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Que o objeto da variável <code class=\"language-text\">estrutura</code> estará na sua área de transferência. É bem prático e ajuda muito na hora de copiar alguma variável e jogar em um editor de texto para ver seus valores. Ajuda ainda mais quando você tem alguma resposta muito grande de uma requisição e precisa validar algum único campos.</p>\n<h3 id=\"boas-investigacoes-\" style=\"position:relative;\">Boas investigações 🔎</h3>\n<p>Espero que algum desses utilitários ou estratégias possa te ajudar a investigar e encontrar algum problema de forma mais eficiente. Quem sabe até mesmo a estudar alguma aplicação nova por aí!</p>","timeToRead":8,"frontmatter":{"date":"16/11/2020","path":"/depuracao-de-aplicacoes-javascript","title":"Depuração de aplicações JavaScript","subtitle":"Como ir além do console.log e encontrar erros de forma mais eficiente","banner":{"author":"The Nigmatic","href":"https://unsplash.com/photos/ssMYmNDdPtI","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20375v375h1201V0H0v375m542-171c1%201%200%205-1%208a132%20132%200%2000-3%2017l-1%2016-1%2011v3c1%202%201%202%201%200v-3l1%202c1%206%205%204%206-3a1019%201019%200%20014-43l-1-5c0-3-1-4-3-4l-2%201m-24%2078l-6%201a1379%201379%200%2000-17%204l-6%201-2%201-2%202-3%201-2%202a152%20152%200%2000-29%2030c-4%207-7%2020-4%2020v2c0%202%200%202%202%203%203%200%202%202-1%203-1%200-2%200-1%201%202%201%202%207-1%207-2%200-2%200-1%201%202%200%202%201%201%202%200%203%204%203%206%200h2c3%202%204%202%204-1%200-2%200-2-1-1h-2c-3-1-2-2%202-2l4-1%203-2c2%200%201%208-3%2010v4h2c0-2%200-2%202%200%202%201%202%202%202%206l1%202h1l-1%201v1l2%201v-5c-1%200%200-5%202-7v-2c0-1%206-2%2013%200l9-1h1l15-1c2-1%204%200%209%201l5%202%201-1%202%201h3c2%200%203%200%202%201l-2%201%204%204v-2c1-3%208-3%208%200s-3%205-5%204l-5-1c-4%200-4%200-4%202v2l-1-1-2-1h-3c-2-2-1%201%202%204l3%202-2%204c-3%206-3%206-4%204h-5l-3-1%201-1c1%200%202-1%202-3l-1-3-1%203-1%202-1%202-3%201c-3-1-5%201-3%203l1-1%201-1%201%201v4l-1%202%202-1c1-1%201-1%202%201h1c0-3%202-7%204-7l1%203%202%202c2%200%201%202-1%202-1%200-4%201-5%203s-2%202-2%201h-1c-1%202-1%202-3%201l-2-1%203%204%203%202h7l6-1%205-2%203-1c2%200%201%203-2%206-2%202-4%203-4%201l-1-1-2%201c0%202-4%205-7%205l-2%201-1%202c0%202%202%202%209%201%204%200%2019-13%2016-13-1%200-2-1-1-2l3-1c2%201%209-2%2016-5l10-4%207-3c2-3%2024-6%2026-3h1l2-1v2c-1%201-2%202-6%202-6-1-11%202-11%205s7%202%2010%200l4-2%204-1c1-1%203-2%205-1l2-1c-1-2-1-2%202-2%206%201%209%203%2011%208%202%203%203%205%205%205s3%202%204%206v2l1%204c-1%201%201%202%202%200v-5c0-3%201-4%202-4l2-1%202-1%201-1%201-4c1%200%202%201%201%202l1%201%2012%207%205%203%205%205c2%205%2010%2013%2015%2016%203%201%205%203%205%204l1-1%201-1%201%202c-1%201-1%201%201%201h3c2%201%205-1%203-2h-1l-1%201-1-3-1-2h-1l-9-11-13-13c-7-10-15-29-15-39l-1-3c-1%201-6-1-7-4l-4-3%201-2c1-1%201-1-2-1-2%201-3%200-4-1l-7-6a61%2061%200%2001-17-14l-12-10a101%20101%200%2000-14-14l-16-12-4-3-1-1-4-1c-3-1-5-2-8-1h-5l-4%201c-2%202-2%202%200%202l3%201c1%202-1%202-2%201h-4c-3%202-8%203-8%201h-2c0-3-3-2-7%201l-5%202c-1%200-5%205-5%207h-1c0-2-1-2-1-1v10l1%205c1%201%200%207-1%209h-6l2-1c2%201%203-1%202-12%200-11%200-12%202-15l3-2%201-1%207-4%207-3h-5c-8%201-10-1-10-8v-5m164%2047l-6%201-6%202-4%203c-3%202-9%2016-9%2021%200%204%200%204%201%202l2-2%201-1c0-2%206-4%208-4h2l7-2%206-2c0-1%201-1%203%201l4%201%202%201%203%201%205%202%206%203%204%201%204%203c4%203%2019%2010%2023%2010%202%200-3-4-5-4-4%200-10-6-10-9%200-1%201-1%202%201%204%203%2010%205%2015%206l9%201c3%202%203%202%203%200h1c1%203%207%207%2011%207l4%201-8%201h-8c0%202%208%205%2017%207l3%201%2013%202c8%201%2011%202%2011%203l3%201h6c1%202%203%202%206%201h5c0%202%200%202%203%201h5l-2%201c-1%201%201%201%204%201h3c-2%201-2%201%200%201h4l5%201%203%201c1%202%203%202%2011%200l3%201%202%201v-1c-2-2-1-3%201-2h6l-2-1v-1l2-1h2l1%201c-1%201%200%201%202%201l4-1h2l3%201v-5c-1-1%201-1%204-1h5c1-1%201-1%202%201%202%203%206%203%207-1l1-3h1c1-1%202-1%204%201l3%201v-2l3-3c1-2%201-2%200%200-1%204%202%206%205%205%202-1%205%200%205%202%200%201%202%202%205%202%204%200%205%200%205%202l2%203%201%202c0%202%200%202%204%202%204-1%204%200%201%201-2%201-1%201%202%201h4l-3%202-3%201h2c4%200%207%202%209%206%200%202%201%203%202%203l3%202%201%202c-1%201%200%201%201%201%203%200%205%203%205%204v1l1-1c1-1%201-1%201%201-1%202%200%202%203%203%204%200%208%204%206%205-1%201%200%201%201%201%202%200%203%201%203%202l2%201%201%202%201%202s2%201%202%203l4%202c3%201%203%201%202%203-1%201-1%201%201%201l3%204%204%204%202%202%204%202%202%203v2l2%202%202%202v2h3l2%201%201%202%201%203%202%201%201%202%201%202c3%200%203%203%201%204l-2%202h2l2%201%202%201c1%201%200%201-1%201-4%200-4%202%200%202%203%200%203%200%201%201-4%200-1%203%203%203%203%200%203%200%201%201s-2%201-1%202v1h-3l1%201-1%201h1l5-1h2c1%201%201%201-2%202-4%201-5%201-1%201%206%200%206%202%201%202-4%200-4%200-1%201l5%201h1c0%201%201%202%203%202%202%201%202%201-1%201s-4%202-1%202v2c-2%201-2%201%200%201l2-1%202-1c2%200%201%202-1%203-1%201%200%201%203%201%204%201%205%203%202%203-2%200-1%201%203%202%206%202%207%203%204%204v3c-2-1-4%201-1%201l4%201h4l-4%201c-3%201-3%201-2%202l4%201%206%201-3%201-3%201c-1%201%200%201%203%201%202%200%203%200%202%201l2%201c1-1%202-1%202%201l6%203%206%203%204%201%202%201%201%201c1-1%201-1%200%200l-1%201h5c1%201%203%203%205%203l2%202%202%201%202%202%203%201%202%201c0%202%204%205%205%204%201%200%204%207%203%208l1%201%203%201c4%206-3-22-10-36l-7-12-2-3c-3-5-15-18-38-40a1293%201293%200%2001-91-93l-8-7-4-4a237%20237%200%2000-20-26l-8-7-1-1c1-1%200-1-1-1l-2-1-3-2-6-2c-6-3-13-4-27-4a4729%204729%200%2001-25%203l-25%207c-7%202-12%203-21%203l-17%202c-6%201-12%201-27-4a1499%201499%200%2000-48-14c-19-7-35-9-41-7m-207%2010c-2%203-5%205-6%205-2%200-2%201-4%207h7c0%202%203%201%205-1l4-3c3-2%203-4%200-2-1%201-2%201-2-1v-5c2-1%202-5%201-5l-5%205m9%2014l-1%202v2l-1%202-1%201c0%202%201%202%205%202%204-1%205%201%202%202-1%201%200%201%202%201l4-1-1-2-2-3v-2l2%202c1%203%2012%203%2014%201l2-1c-1%201%200%202%201%202l1-2%202-1h3l-1-1-1-2v-1l-4%201-4%202c-3%204-5%204-4%200l-2-2-2-1-2%201-3%201-4-1-3-2h-2m89%2052l-11%202c-5%201-7%203-6%206%200%202%200%203-3%205-4%202-5%204-3%204l2%202h2l4-3%207-5%203-3h1l7-4c5-2%207-5%205-6l-8%202m140%2045v3l-1%201-1%202c1%203-1%2010-5%2019l-3%208c0%202%205%203%209%202l16-4%204-1%204-1h3l5%201%204%203%204%202c1-1%206%201%206%202l1%201c2%200%203%205%202%2015-2%2010-1%2011%208%2013l7%202%204%202%204%201c2%202%2015%204%2019%203l3-3%204-1c3%200%204%201%203%202l2%202%201%201-1%207v9c-1%205%201%2010%203%2010l1%202%201%201c1%200%202%201%202%203l7%2011%201%202%205%203c5%201%206%202%207%205l2%202c2%200%203%203%202%206l1%202%201-2c0-2%200-2%201-1%200%202%201%202%203%201%202%200%203%203%201%204-3%201-5%2010-4%2016%201%202%207%202%2010%201%202-1%204%200%202%201h3c3%200%204%200%206%202l8%201h8c2%201%207-1%207-2l2-2%201-2%201-2v-4c-4-3-1-12%204-12l2-2h2l1%201c2-2%201-6-5-12a348%20348%200%2001-38-46l-4-3a152%20152%200%2000-25-19l-5-4c0-2-10-12-12-12l-3-1a345%20345%200%2000-60-17l-8-4-5-2-1-1-25-16-2%201m-255%2036l-2%201c0-2-5%201-9%205a110%20110%200%2000-18%2021c-1%200-6%2010-6%2015v4c2%200%206-3%206-4l3-4%203-4%201-2%204-5%201-1%201-1%203-4%202-5c0-2%200-2%201-1h1c-1-2%202-5%204-5l3-3%203-2%202-1%203-2%201-2c0-3-4-3-7%200m102%2033h-3c-2%202-2%202%200%203s3%203%202%204c0%201%200%202%201%201l1-1v1c-1%202%203%208%206%208%202%201%203%201%202%202-2%201-1%204%202%205l4%202%203%202%202%202v2l1%202%201%202%201-1v-3l1%203c0%203%200%203%201%202s2%200%203%201l3%202c3%200%208%202%208%203l-3-1c-4-1-5-1-5%202h2l3%201%203%202-1%201c-3-1-3%201-1%203l3%202v-2l1-3v3c0%202%200%202%201%201v2c0%203%200%204%201%203h2c1%201%201%201%201-1%201-1%201-1%201%201h1c1-1%201-1%201%201s0%202%202%201c1-1%201-1%201%201v4c1%202%201%202%201%200%201-2%201-2%203-1l3%202h-2l-3%201c-1%201-1%201%202%201l4%202%202%201c1%200%202%201%201%202l8-1h2l-2%201-1%202%203-1v-1l1-2%201%201c-1%202%201%204%202%202h1v1h1l8%201c2%202%204%203%205%202l3-1c1%201%201%201-1%202-2%200-2%202%201%201l2%201c0%202%203%203%203%202l-1-1-1-3c1-3-1-6-4-6-2%200-2%200-1-2s0-3-2-3c-1%200-2%201-1%202l-1%201-1-1-2-2c-1-1-1-1%201-1%203%200%202-2-1-2l-2-1-4-3c-4-1-4-1-2-2%201-1%201-1-1-1h-2c1-2-4-6-7-6l-1-1c1-1%200-1-2-3-2%200-4-2-4-3l-3-1-1-1c1%200%200-2-5-5l-3-3-1-1a434%20434%200%2001-34-30c0-3-13-5-14-2m346%2074l-3%204c-2%202-4%207-3%209%200%203%204%202%207-1s4-8%203-13c0-4-2-4-4%201m-520%207a82%2082%200%2000-56%2047l-1%204-1%203c-1%202-1%202%203%200%202%200%205-2%206-4%2011-14%2025-22%2037-23l4-2h4l2-1h3l4-1h1l1%201%203-2%204-1c2%200%203%201%201%202h1l5%201h2v-1h2l3-1%202-1v-1l2-3c1-1%201-2-1-2s-2%200%201-3l2-3v-1l-1-1-2-1c-5-5-22-8-31-6'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/9835d788c8af569f8ba7578dbc14f522/21095/banner.jpg","srcSet":"/static/9835d788c8af569f8ba7578dbc14f522/36b10/banner.jpg 300w,\n/static/9835d788c8af569f8ba7578dbc14f522/88367/banner.jpg 600w,\n/static/9835d788c8af569f8ba7578dbc14f522/21095/banner.jpg 1200w,\n/static/9835d788c8af569f8ba7578dbc14f522/97ce3/banner.jpg 1800w,\n/static/9835d788c8af569f8ba7578dbc14f522/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/9835d788c8af569f8ba7578dbc14f522/58d74/banner.jpg"}}}}}}},"pageContext":{}}}