{"componentChunkName":"component---src-templates-post-article-index-js","path":"/balanceamento-de-carga","result":{"data":{"markdownRemark":{"id":"803e4108-64c9-5c16-aaa7-918be7c48830","html":"<p>Balanceamento de carga (ou <em>load balancing</em>) é um conceito muito aplicado para distribuir carga entre diversos servidores.</p>\n<p>Vamos começar imaginando um fluxo de acesso em um aplicação que só é executada em um único servidor, bem simples. Teríamos algo mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cliente -----&gt; Servidor</code></pre></div>\n<p>Por enquanto, nada de surpreendente até aqui... Mas vamos imaginar que a carga de nossa aplicação cresceu em um determinado momento e agora só esse antigo servidor não é mais o suficiente para suportar a carga de requisições necessárias.</p>\n<p>Você vai precisar escalar sua infraestrutura e você pode fazer isso de duas maneiras, basicamente:</p>\n<ul>\n<li>Verticalmente: onde você insere mais memória/CPU nos seus servidores;</li>\n<li>Horizontalmente: onde você insere mais máquinas para lidar com suas requisições.</li>\n</ul>\n<p>No caso da escala horizontal, onde você acrescenta novos servidores para responder às requisições de usuários, é necessário uma maneira automatizada de distribuir essas requisições entre os servidores de forma uniforme. É aí que um balanceador de carga entra em jogo!</p>\n<p>Um balanceador de carga, basicamente, será um servidor nesse \"meio de campo\" responsável por rotear a sua requisição para um dos servidores envolvidos.</p>\n<p>Com isso, sua infraestrutura será algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                              / ---&gt; Servidor 1\nCliente -----&gt; Balanceador --------&gt; Servidor 2\n                              \\ ---&gt; Servidor 3</code></pre></div>\n<p>Para entender melhor como isso funciona de forma prática, vamos construir um exemplo usando Node, onde utilizaremos 3 servidores para responder uma requisição simples e um servidor para balancear a carga entre eles.</p>\n<h3 id=\"construindo-um-balanceador-de-carga\" style=\"position:relative;\">Construindo um balanceador de carga</h3>\n<p>Nosso balanceador de carga será uma implementação simples de um servidor na porta <code class=\"language-text\">3000</code> que irá balancear a carga entre 3 servidores nas portas <code class=\"language-text\">3001</code>, <code class=\"language-text\">3002</code> e <code class=\"language-text\">3003</code>.</p>\n<h4 id=\"arquivo-de-configuracao\" style=\"position:relative;\">Arquivo de configuração</h4>\n<p>Vamos começar com um arquivo de configuração, para que possamos manter registrado quantos servidores iremos utilizar e em quais portas eles funcionarão. Vamos criar o arquivo <code class=\"language-text\">config.js</code>.</p>\n<p>Ele deverá possuir um objeto com:</p>\n<ul>\n<li><code class=\"language-text\">host</code>: será nosso <code class=\"language-text\">localhost</code>;</li>\n<li><code class=\"language-text\">balancer</code>: a porta do nosso balanceador de carga, vamos configurá-lo para porta <code class=\"language-text\">3000</code>;</li>\n<li><code class=\"language-text\">servers</code>: um array com as portas dos nossos servidores que irão de <code class=\"language-text\">3001</code> até <code class=\"language-text\">3003</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo config.js</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  balancer<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  servers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3002</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3003</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"criacao-dos-servidores\" style=\"position:relative;\">Criação dos servidores</h4>\n<p>Feito isso, vamos criar um arquivo <code class=\"language-text\">servers.js</code> que será responsável por criar os processos dos nossos servidores. Para criar nossos servidores, vamos utilizar o módulo <code class=\"language-text\">http</code> nativo do node. Vamos aproveitar e importar nossas configurações do arquivo <code class=\"language-text\">config.js</code> também:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo servers.js</span>\n<span class=\"token comment\">// importamos o módulo http nativo</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// importamos das configurações</span>\n<span class=\"token comment\">//  o host e os servers, renomeando para ports</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> servers<span class=\"token operator\">:</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora vamos criar uma função que simplesmente irá retornar: <code class=\"language-text\">Respondido pelo servidor da porta ${port}</code> para nós. Essa função deverá ser executada para cada um dos servidores, então vamos utilizar uma técnica chamada <code class=\"language-text\">currying</code> para criar uma função que irá retornar uma outra função. Faremos isso para conseguir armazenar o valor com a <code class=\"language-text\">porta</code> do servidor dentro de um determinado escopo.</p>\n<p>Essa última função, por sua vez, irá receber os objetos de <code class=\"language-text\">req</code> e <code class=\"language-text\">res</code>, bem comum em ambientes de requisição e resposta em APIs (e popularmente utilizado por frameworks como Express).</p>\n<p>Vamos chamar essa função de <code class=\"language-text\">createListener</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> servers<span class=\"token operator\">:</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// criamos a função createListener que recebe a porta</span>\n<span class=\"token comment\">// e retorna uma outra função com req/res</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// retornamos uma mensagem como resposta</span>\n  <span class=\"token comment\">// ao executar essa função</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Respondido pelo servidor da porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, podemos fazer um <code class=\"language-text\">map</code> no nosso array <code class=\"language-text\">ports</code> para configurar cada um dos servidores. Para cada valor de <code class=\"language-text\">ports</code>, vamos retornar um objeto com algumas configurações, sendo elas:</p>\n<ul>\n<li>própria porta do servidor;</li>\n<li>um valor de <code class=\"language-text\">listener</code> que será o resultado da execução da função <code class=\"language-text\">http.createServer</code> (responsável por criar o servidor a partir de uma função qualquer) que receberá como parâmetro o retorno da função <code class=\"language-text\">createListener</code> que acabamos de criar.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> servers<span class=\"token operator\">:</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Respondido pelo servidor da porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// realizamos um map nas portas</span>\n<span class=\"token keyword\">const</span> servers <span class=\"token operator\">=</span> ports<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// retornamos a própria porta</span>\n  port<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// retornamos um listener</span>\n  <span class=\"token comment\">// executando a função createListener</span>\n  listener<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token function\">createListener</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, agora temos um array <code class=\"language-text\">servers</code> onde cada item é um objeto com sua respectiva porta e uma função que será utilizada para criar nosso servidor e escutar nessa determinada porta.</p>\n<p>Por último, podemos rodar um laço como <code class=\"language-text\">forEach</code> nesse array, para cada um dos servidores, utilizar a função <code class=\"language-text\">.listen</code> a partir da chave <code class=\"language-text\">listener</code> que criamos para que os servidores comecem a \"escutar\" suas respectivas portas. Fora isso, essa função também precisará do <code class=\"language-text\">host</code> como segundo parâmetro e pode receber um callback como terceiro, para executar um log, por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> servers<span class=\"token operator\">:</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Respondido pelo servidor da porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> servers <span class=\"token operator\">=</span> ports<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  port<span class=\"token punctuation\">,</span>\n  listener<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token function\">createListener</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// realizamos um loop no array de servers</span>\nservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">server</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// para cada server</span>\n  <span class=\"token comment\">// executamos listener.listen</span>\n  <span class=\"token comment\">// fornecendo a porta, o host e um callback</span>\n  server<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// que apenas executa um log no terminal</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Servidor rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>server<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, basta executar no seu terminal <code class=\"language-text\">node ./servers</code> que você poderá ver o seguinte resultado:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Servidor rodando na porta 3001\nServidor rodando na porta 3002\nServidor rodando na porta 3003</code></pre></div>\n<p>Caso queira ver o resultado, utilize seu navegador e acesse <code class=\"language-text\">localhost</code> em uma dessas portas que você verá a resposta que criamos anteriormente.</p>\n<p>Perfeito, agora vamos para nosso balanceador de carga.</p>\n<h4 id=\"criando-o-balanceador\" style=\"position:relative;\">Criando o balanceador</h4>\n<p>Para iniciar nosso balanceador, vamos também importar o módulo <code class=\"language-text\">http</code> nativo do Node e também as configurações de <code class=\"language-text\">host</code> e <code class=\"language-text\">balance</code> do nosso arquivo de configuração. Vamos fazer tudo isso em um novo arquivo <code class=\"language-text\">balancer.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo balancer.js</span>\n<span class=\"token comment\">// importamos o módulo http</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// importamos os valores de host</span>\n<span class=\"token comment\">// e balancer, renomeando também para port</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nosso balanceador será bem mais simples, vamos apenas criá-lo utilizando a função <code class=\"language-text\">createServer</code> do módulo <code class=\"language-text\">http</code> igual fizemos anteriormente. Após isso, vamos também atribuir sua porta, host e uma função de callback para exibir algo no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// executamos a função createServer</span>\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// configuramos o balancer para ouvir em sua porta</span>\n<span class=\"token comment\">// com o determinado host</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// e executando um log diferente</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora iremos para a cereja do bolo: precisaremos adaptar o balanceador para que cada requisição seja respondida por um servidor diferente. Podemos fazer isso atribuindo uma função aos eventos disparados quando qualquer requisição chega ao servidor. Podemos atribuir funções a esses eventos através do método <code class=\"language-text\">.on</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// atribuímos uma função</span>\n<span class=\"token comment\">// que será disparada toda vez que uma requisição</span>\n<span class=\"token comment\">// chegar ao balanceador de carga</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, trabalharemos essa função para que uma nova requisição seja feita aos servidores que devem responder corretamente. Vamos começar criando um objeto <code class=\"language-text\">request</code> de configuração da requisição que nosso <em>load balancer</em> irá fazer aos servidores finais:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// criamos uma variável request</span>\n  <span class=\"token comment\">// para armazenar os dados da requisição</span>\n  <span class=\"token comment\">// que iremos propagar ao servidor final</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// contendo seu host</span>\n    host<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// passamos adiante os valores de</span>\n    <span class=\"token comment\">// path, método e cabeçalhos recebidos</span>\n    path<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com essa configuração pronta, vamos utilizar o método <code class=\"language-text\">http.request</code> para criar um objeto com essa nova requisição. Ele receberá a configuração que acabamos de criar e um callback que utilizará <code class=\"language-text\">pipe</code> para conectar a resposta do servidor final à resposta do balanceador:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// criamos uma variável connector</span>\n  <span class=\"token comment\">// e executamos http.request</span>\n  <span class=\"token comment\">// fornecendo o objeto request como parâmetro</span>\n  <span class=\"token comment\">// e uma função de callback que irá conectar através do método pipe</span>\n  <span class=\"token comment\">// a resposta dessa nova requisição à resposta do balanceador</span>\n  <span class=\"token keyword\">const</span> connector <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, só precisamos executar essa requisição em conjunto com a requisição recebida no balanceador. Podemos fazer isso também através do método <code class=\"language-text\">.pipe</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> connector <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// realizamos a conexão do nosso connector</span>\n  <span class=\"token comment\">// e a requisição recebida através do método pipe</span>\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, só falta mais um detalhe para que possamos balancear a carga entre os servidores corretamente: precisamos disparar as requisições, cada um para um dos servidores em suas respectivas portas, certo?</p>\n<p>Vamos lá!</p>\n<h4 id=\"resolvendo-as-portas-do-servidores-dinamicamente\" style=\"position:relative;\">Resolvendo as portas do servidores dinamicamente</h4>\n<p>Vamos criar uma função <code class=\"language-text\">getServerPort</code> lá no arquivo <code class=\"language-text\">config.js</code> que criamos no início:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// arquivo config.js</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  balancer<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  servers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3002</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3003</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// função getServerPort</span>\n  <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Utilizaremos ela para \"descobrir\" qual a porta do servidor que irá receber as requisições. Vamos importá-la no nosso arquivo <code class=\"language-text\">balancer.js</code> e também adicionar a porta ao objeto <code class=\"language-text\">request</code> que criamos anteriormente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// importamos a função getServerPort</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port<span class=\"token punctuation\">,</span> getServerPort <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// criamos uma variável port</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// fornecemos essa mesma variável na requisição</span>\n    port<span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>headers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> connector <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora só precisamos fazer nossa lógica na função <code class=\"language-text\">getServerPort</code> para que ela retorne as portas dos servidores corretamente. Por exemplo:</p>\n<ul>\n<li>em sua primeira execução, deverá retornar <code class=\"language-text\">3001</code>;</li>\n<li>em sua segunda execução, deverá retornar <code class=\"language-text\">3002</code>;</li>\n<li>em sua terceira execução, deverá retornar <code class=\"language-text\">3003</code>.</li>\n</ul>\n<p>E esse fluxo se repete o tempo inteiro, sempre retornando um dos valores das 3 portas disponíveis. Como nossas portas estão em um array <code class=\"language-text\">servers</code>, podemos trabalhar com seus índices, variando de 0 até 2.</p>\n<p>Com isso em mente, uma possível implementação da nossa função <code class=\"language-text\">getServerPort</code> pode ser a seguinte:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  balancer<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  servers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3002</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3003</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// verificamos se é possível incrementar + 1</span>\n    <span class=\"token comment\">// no índice das portas em `server`</span>\n    <span class=\"token keyword\">const</span> canIncreaseServerPort <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">&lt;</span> config<span class=\"token punctuation\">.</span>servers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// se possível, incrementamos + 1, caso contrário, voltamos à porta inicial</span>\n    <span class=\"token keyword\">const</span> nextPort <span class=\"token operator\">=</span> canIncreaseServerPort <span class=\"token operator\">?</span> config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// armazenamos essa configuração na variável config.currentServerPort</span>\n    config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">=</span> nextPort<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// retornamos a porta correta através de config.servers</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">.</span>servers<span class=\"token punctuation\">[</span>nextPort<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note que a variável <code class=\"language-text\">currentServerPort</code> é criada pela própria função <code class=\"language-text\">getServerPort</code> e ela não está presente no objeto <code class=\"language-text\">config</code> antes. Isso é apenas um \"pulo do gato\" para poder iniciar nosso balanceamento da porta 0, utilizando voluntariamente algumas limitações da própria linguagem JavaScript.</p>\n<p>Em outras palavras, <code class=\"language-text\">currentServerPort</code> inicia como <code class=\"language-text\">undefined</code>, o que faz com que a comparação <code class=\"language-text\">config.currentServerPort &lt; config.servers.length - 1</code> sejá falsa e o ternário da segunda linha da função retorne <code class=\"language-text\">0</code> em sua primeira execução.</p>\n<h3 id=\"resumo-do-codigo\" style=\"position:relative;\">Resumo do código</h3>\n<p>Caso precise relembrar o código todo feito até agora, abaixo estão os 3 arquivos <code class=\"language-text\">config.js</code>, <code class=\"language-text\">servers.js</code> e <code class=\"language-text\">balancer.js</code>:</p>\n<h4 id=\"configjs\" style=\"position:relative;\">config.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  host<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n  balancer<span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span>\n  servers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token number\">3001</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3002</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3003</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> canIncreaseServerPort <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">&lt;</span> config<span class=\"token punctuation\">.</span>servers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> nextPort <span class=\"token operator\">=</span> canIncreaseServerPort <span class=\"token operator\">?</span> config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    config<span class=\"token punctuation\">.</span>currentServerPort <span class=\"token operator\">=</span> nextPort<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">.</span>servers<span class=\"token punctuation\">[</span>nextPort<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"serversjs\" style=\"position:relative;\">servers.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> servers<span class=\"token operator\">:</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Respondido pelo servidor da porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> servers <span class=\"token operator\">=</span> ports<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">port</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  listener<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token function\">createListener</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  port\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">server</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  server<span class=\"token punctuation\">.</span>listener<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Servidor rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>server<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"balancerjs\" style=\"position:relative;\">balancer.js</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> host<span class=\"token punctuation\">,</span> balancer<span class=\"token operator\">:</span> port<span class=\"token punctuation\">,</span> getServerPort <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> balancer <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Load balancer rodando na porta </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\nbalancer<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    host<span class=\"token punctuation\">,</span>\n    port<span class=\"token punctuation\">,</span>\n    path<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span>\n    method<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>headers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> connector <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  req<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"testando-tudo-junto\" style=\"position:relative;\">Testando tudo junto</h3>\n<p>Para validar nossa implementação ao final de todo o desenvolvimento, basta abrir duas abas em seu terminal e executar <code class=\"language-text\">node ./servers</code> em uma e <code class=\"language-text\">node ./balancer</code> na outra.</p>\n<p>Após isso, basta fazer uma requisição ao servidor que está balanceando toda a carga através do seu navegador acessando <code class=\"language-text\">localhost:3000</code> ou utilizando alguma ferramenta como <code class=\"language-text\">curl</code>, no terminal.</p>\n<p>Caso repita essa requisição variás vezes, você verá que cada um dos servidores irá responder em seu respectivo momento, por exemplo, ao executar 3 vezes, é possível ver:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET localhost:3000\nRespondido pelo servidor da porta 3001</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET localhost:3000\nRespondido pelo servidor da porta 3002</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET localhost:3000\nRespondido pelo servidor da porta 3003</code></pre></div>\n<hr>\n<h3 id=\"nossa-implementacao-e-simples-mas-importante\" style=\"position:relative;\">Nossa implementação é simples, mas importante!</h3>\n<p>Claro que nossa implementação foi bem ingênua, todos os servidores rodam em um mesmo processo e em uma mesma máquina. Mesmo assim, serviu para que o conceito de balanceamento de carga ficasse claro de uma maneira um pouco mais prática e \"colocando a mão na massa\".</p>\n<p>Existem diversas ferramentas e decisões técnicas muito mais confiáveis pra realizar essa tarefa do que a que fizemos aqui, pode ter certeza, aplicando diversos algoritmos para balancear cargas de forma mais confiável e com tecnologias e implementações muito mais robustas.</p>\n<p>Mesmo sendo básico, nosso balanceador de carga funciona bem para seu propósito e para que possamos entender como um <em>load balancer</em> vai funcionar no fim dia sem complicar muito as coisas.</p>\n<p>Espero que tenha gostado!</p>","timeToRead":11,"frontmatter":{"date":"28/03/2021","path":"/balanceamento-de-carga","title":"Balanceamento de carga","subtitle":"Criando um balanceador com JavaScript e entendendo de forma prática pra que são utilizados","banner":{"author":"Gabriel Ramos","href":"https://unsplash.com/photos/0U52nKXhQUE","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%205c0%205%200%206%202%207h3l-3%201c-2%200-2%201-2%205l1%206v1l-1%202%204%203h5l-5%201H0v9l12%202c12%202%2017%204%2014%205v1l-2%201-3-1v-2l-1-1h-2c-2-1-2-1-2%201%200%203%200%203-3%203-2%200-2%200-1-1%202-1%201-4-2-4l-2-1c0-2-2-1-3%201%200%201-1%202-3%202s-2%200-2%203c0%204%200%204%203%205%205%200%2015%204%2013%204l-7-1c-8-3-9-2-9%201s-1%203%2021%205a308%20308%200%200117%201h4l28%202c35%203%2044%202%2034%200a935%20935%200%2001-32-8%20523%20523%200%200161%2010l89-5a1310%201310%200%200069-7l-3%201%205%201h6l1%201%201-1v-2h10l2-1c-1-1%200-1%201-1l17-4h-8l-12%202h-3l4-1a250%20250%200%200133-7%20915%20915%200%200134-9%20352%20352%200%200032-9%201462%201462%200%200068-21l-6%202-3%202h4c1-1%202-1%203%201l2%201-1-2c-1-2%200-3%207-4%203-1%203-3%200-2a3542%203542%200%2000-176-2%201048%201048%200%2000-101%200L102%200H0v5m543-3l-5%204c-4%202-4%203-5%209l-3%204c-2%200-3-3-1-3V8l-4%202a285%20285%200%2001-43%2017c-5%201-9%203-9%204l-5%201-8%202c-4%202-10%203-10%201l4-2c3-2%204-2%204-4l-1-2c0-2-9-1-11%201-3%202-4%204-1%204l1%202%202%203%202%201h-3l-2%201-7%204-4%201-8%203-7%202-9%203-12%205-7%203%201%207-1%206c-3%200-4-2-4-7l-1-6-21%205a1159%201159%200%2001-112%2022l-8%201%202%205c3%208%202%2010-4%209a1980%201980%200%200178%2023%20532%20532%200%2000-82-18l-2-1c-2%200-15-6-23-11l-4-2-26-1-25%201c1%202-1%204-2%204l-1-1-2-2-2%201-1%201-1-2-55-1a410%20410%200%2001-90-5H0v34l1%2035a729%20729%200%200154%2014%201632%201632%200%2001-52-11l-3-1v40c0%2040%200%2040%202%2039l3%201%2014%204%208%202%208%203h-5c-4%200-22-5-27-7H0l19%207a773%20773%200%200154%2015%20489%20489%200%200156%2015l19%205a1781%201781%200%2001132%2037%20396%20396%200%200129%207%20688%20688%200%200165%2018%20113%20113%200%200118%205l3%201c7%204%2025%208%2026%206h4l4-1%202-2v1c0%201%201%202%205%202l6-1c0-1-3-3-5-2-3%200-5-1-4-3h7l2%201c2%201%207%202%209%200s3-1%202%201v3l17%201%201-1v4l1%202h1c2-2%207-4%207-2l-1%203-1%202c2%202%203%200%203-3s0-4%203-4c2-1%202-1%201-3l1-3c2-1%204-1%203%201l1%201%201-1h4l1%202c0%202%200%202%202%201%203-2%206-1%206%202l2-1c1-1%202-1%202%201%200%205%201%207%203%207l1%201h-1l-2%201c-1%201%200%201%201%201%202%200%207%204%205%205-2%200%200%202%202%202%208-2%2011-2%2011-1l1%202%207%207%2010-6%201-2-1-2c1-2%200-4-1-1v-1c0-3%200-3-1-2h-3l1-1c3%200%205-3%203-4s3-4%208-4l4-1-2-1%203-2%204-3%2010-6%203-2%201-1%206-4a154%20154%200%200121-18l4-4%208-6%203-3-2-22a875%20875%200%20014-174l-1-2-1%202h-2l-1-1-1-1-6-5-1-1c-2%200-6%203-7%206%200%202%200%202-3%201l-8-3c-6-1-6%200-5-8%201-3%201-3%204-3l11%202%2013%204%206%201h6l-17-5c-10-1-15-3-15-6v-3l2-9%202-8%201-2%202-4%201-5%201-2c2%201%206-12%205-14l1-1%201-5c0-3%200-3%206-2a1150%201150%200%200020%205c4%201%204%201%207-8l3-12%209-24a2292%202292%200%2000-110%202m110%204l-2%209-1%202c-1-1-1%200-2%202a142%20142%200%2001-5%2019c1%201%204-3%205-8%202-6%202-6%203-4l-1%204-7%2024a411%20411%200%2001-15%2049c2-3%203%201%202%206a1041%201041%200%2000-3%20186v1c-1%200-2%205%200%205l3-2%204-3%203-3%203-2-1-14v-16c1-1%202%2013%202%2022%200%206%202%207%207%201l5-4%203-2%205-5%205-4c3-2%203-3%203-8l-1-6v-9c0-9-1-11-3-9v-2c1-2%202-8%202-30a434%20434%200%20012-61l-2-2-2-1h2l3-1%204-40%202-17V73h2c2-1%206%200%206%202l1%201%205-18%202-3v7l-3%2011-1%206%207%207%2011%2010%203%203%202%2022c2%2044%204%2055%207%2057l1%202%201%205%202%205%201%202%201%202v2l1%202%204%2013%207%2022c1%202%202%202%2015-8a512%20512%200%200128-21c5-4%207-7%204-8v-3a415%20415%200%200036-88h-2c0%202%200%202-1%201l-1-2c2-2%205-1%205%201l1-1%202-4c3-4%2014-48%2017-67%201-7%204-8%203-1l1%204%201-1c-1-2%203-12%204-11%201%202-5%2035-7%2036-1%202-1-1%201-9v-8l-1-2a222%20222%200%2000-5%2026c1-1%201%200%201%201s1%201%202-1l1-2-4%2014v4l-1%202-1%203-2%204v-9h-1c0-2%200-2-1%200l-1%207v2c-1-2-1-2-2%201l-2%206-1%205v2l-5%2011v3l1%201-1%201c0-1-2%200-2%202-2%204-2%204%200%204s5-5%206-11c0-3%200-3-1-2h-1c0-2%201-2%202-2%202%200%202-1%202-2l1-3a346%20346%200%2001-23%2061c-4%208-4%2011%200%205l3-4%201-2%201-1c1%201%203-2%203-3l1-3%202-2%201-1c0%203%202%202%205-2l3-4%2010-10c6-7%208-9%2012-10l4-1%204-12a370%20370%200%200017-80c2-2%2011%200%2012%203l1%203v-3l2-2c1%200%201%208-1%2017l-2%207%201-8c0-5%200-8-1-7%200%203-2%202-2-1%200-2%200-2-1-1h-1l-3%202c-3%203-4%205-5%2013a199%20199%200%2001-7%2029l-7%2025-4%2015%209-2c6-1%208-2%208-4l1-2%202-8%203-8%202-6c0-2%201-3%202-3v-5c0-2%200-3%201-2s1%200%201-3v-5l2-13%202-5a471%20471%200%20002-29c0-2-2-3-2-1h-13c-2-1-3-2-3-4%200-3-2-3-3%201-2%202-2%203-7%200l-4-1-1%201c-2%200-2-1-1-16%202-15%202-16%200-16-1%200-2%201-3%2012l-2%2010V12l1-9V0h-73l-72%201-4%2011-4%2012c-2%201-1-4%203-13%204-12%204-11%201-11l-2%201-4%209a223%20223%200%2001-31-10c-3%200-4%200-5%203l-7%2021c-2%201-1-4%201-9l2-6V8l1-2%202-4-1-2-4%206m243-4a6023%206023%200%2001-1%2033l2%204c0%209-12%2066-17%2081-2%206-3%206%201%205%204%200%206%200%205%203-2%203-3%209-3%2012%200%204-4%209-12%2017-4%204-5%205-13%2025a834%20834%200%2001-34%2067l11%202%2057%2015c44%2011%2041%2010%2042%2012%200%201-2%201-10-1l-5-1-11-3-11-2-9-3h-3l-2%201-1-1-3-2-9-2-6-2-3-1-6-2a695%20695%200%2001-32-7c-1%200-5%206-5%208l9%203%207%202-8-1c-9-3-9-3-13%204a580%20580%200%2001-26%2041c1%202-2%206-5%206l-4%204-5%206-3%204%204%2010a992%20992%200%200123%2066l8%2021c1%206%205%2014%206%2013%205-2%2011%200%2011%204l2%203c2%202%202%202-1%202-4%200-4%202-1%202%203%201%205-1%205-4%200-2%202-4%202-2l5%201c3%200%204%201%205%202l1%201%203%202c2%202%206%202%209%200l2%202%203%207%202%206s1%202%203%202l2%202-3%203-3%203-2-3c-2-3-4-3-4%201%200%202-1%202-4%201-4-1-5%201-1%204l3%204c0%202-10%204-17%204-7-1-7-1-1%2017a1399%201399%200%200123%2065%203348%203348%200%200034%2097l-5-12a3975%203975%200%2000-50-139l-11-29c-1-3-4-3-4%200l25%2075a16657%2016657%200%2001-24-65c-3-8-6-16-7-15h-1l-1-2-1%201a1847%201847%200%200037%20115%20110917%20110917%200%20005%2022c-45-140-44-137-45-133-1%203%200%207%202%2015a507%20507%200%200117%2054%201475%201475%200%200011%2035%205933%205933%200%2000-19-55%202057%202057%200%2001-13-41l-2-5-1%203a923%20923%200%200024%2087%203256%203256%200%20009%2036%20765%20765%200%200011%2043%202185%202185%200%200031%2093c0%202%201%202%205%202s5%200%205-2h1c0%202%209%203%209%201h1l6%201c4%200%204%200%204-2l-2-4c0-3%201-2%202%201l1%205h5c4%200%205%200%205-2h1c0%202%207%202%20140%202h141V511l-1-251c0-12%200-12-3-12l-2%201-2%202c-3%201-6%200-5-3%200-2%207-9%208-9v3c-2%201-1%202%202%202l2%201V145a22806%2022806%200%20010-124V0H985l-2%2011a582%20582%200%2000-4%205c4-15%204-16%200-16-3%200-4%202-6%2015-3%2012-5%2020-6%2019s1-12%202-14l2-7%202-10V0h-9l-11%201h-1l-4-1c-5%200-5%200-5%203l-1%202-1-3-1-2c-2%200%200%208%202%2014l2%207%201%203%201-2c0-2%200-2%202-1l1%202-1%201c-2%200-2%201-2%204l1%204%201-2%201-2%203%207%201%201c1%200%202%201%202%203%200%203%201%205%204%2010l1%205%202%204%202%205c0%202%205%208%206%207s1%200%201%204-1%206-2%206%200%204%203%2010a705%20705%200%200116%2027c1%204%205%2010%208%2014l4%207%205%207%203%204%201%201v-2c-4-7%201-3%207%205l6%208%202%203%201%201%204%204c3%204%204%207%202%207-3%200-2%201%200%204s4%202%202-1c-1-3-1-3%201-3l1%201%206%207%206%206c0%202%202%204%2012%2015l9%2012c-1%200-7-4-9-7l-10-10%2011%2013%201%203-2%203c-1%203-1%203%202%207%205%205%206%205%209%204s3-1%206%201l3%203c2%200%202-2-2-6s-5-7-3-6l12%2011a714%20714%200%2000113%2092l1%203c0%202%200%202-3%200s-4%200%200%203l3%203v13l-1%2013-3-2-4-2-3-1c2-3-20-15-27-15l-5-1a200%20200%200%2000-12-4l10-2c0-2-2-2-5%200-2%201-4%201-10-1l-21-5-15-4-40-9c-4%200-6-2-4-4%202-1%207%201%2058%2014a432%20432%200%200021%205c1%201%205-2%205-4%200-1-2-2-5-2l-3-2-1-1-3-2c-2-3-10-7-11-7l-5%204c-6%205-7%205-10%202-2-2-2-2%200-4l3-3%204-3%203-3-2-2-3-1h-3c-4-2-9-7-8-8l2%201%204%202-20-21-11-11v-1a7250%207250%200%2001-47-50c-1-1-1-1-5%203l-6%207-3%203v-5c1%200%203-3%204-7%203-6%203-6%201-9l-3-6-4-6-2-3-5-6a125%20125%200%2001-12-16l-5-7-4-6-3-5c-1-3-3-2-8%205-3%205-5%207-6%206-2%200-1-1%203-10l4-7-2-5-3-6c0-2-2-7-4-7l-2-4-5-11a241%20241%200%2001-13-23l-1-2c0-3-6%205-7%209s-2%205-4%205c-3%200-3-4%200-6l2-3%201-1%204-10-3-8-1-2c1-2%200-5-2-8l-2-8-5-12-4-10-3-8v-4l-1-4-1-2-1-6-1-5-1-3h-9c-9%200-10%200-10%202M663%206c0%202%200%202-1%201s-2-1-2%204c-1%204%200%207%202%207%201-1%202-1%202%201%201%201%201%201%201-1s0-2%201%200c2%202%202%205%201%207l-6%2019-1%203-1%202-4%2018-7%2029c0%204%203-2%204-7a284%20284%200%20019-38l6-19%204-14%203%201%205%202h4c2-2%204-2%204-1%201%201%201%200%201-1v-3l1%204c0%207%202%205%205-5%201-3%201-3-1-3l-1%202-2%202-1-1-2-1-1-1c2-2-4-4-7-2-4%202-5%202-3-1%202-2-1-5-4-5l-5-1h-4v2m261%207c-2%201%200%209%203%2011l2%202%203-4%204-3-3-4c-2-3-7-4-9-2M235%2024l-1%201c-3%200-2%202%200%203l3%202h3c0%201%201%201%202-1%202-1%202-1%202%201-1%202-1%202%201%201%201-2%202-2%202-1l1%201h1c0%202%201%202%206%202%206%200%207%200%208-2%200-1-3-4-5-4h-9l-1-1c0-1-1-1-2%201-2%201-3%200-1-2l-2%201h-2c1-2%200-3-2%200l-2%201%201-2%202-2h-2l-3%201m-69%2018l1%205h6l6-1%201-1v-3l-2-1c-2-1-2-1%200-1%205%200%200-2-5-2h-7v4M33%2067l-3%201%202%201-2%202c-2%201-2%202-1%202l1%201c-1%201%201%202%205%202%207%201%2010%200%2010-4%200-2%200-2%207-2h5l-5-1c-7-2-13-3-19-2m687%209l-5%2017c0%203%200%203%204%204%207%202%2011%201%2012-1%200-2%202-2%209-2l4-1h2l2-2c0-2%203-2%203%201%201%203%205%203%208%200%203-2%207-2%2011-1%201%201%202%200%203-1%202-2%202-2-12-6a509%20509%200%2000-29-7c-11-3-11-3-12-1m-586%202l-6%202c-3%200-4%201-4%203-1%204%200%205%207%205s10-4%207-8c-1-1-1-1%201-1h3c2-1-4-2-8-1m84%2013c-5%200-5%201-3%202a66%2066%200%200023%209h2l-1-1c-1%200-2-1-1-2h-1c-2%201-5%200-5-2h2l1-1c1%200%202-1%201-3%200-3-3-3-18-2m464%201c-1%201%202%205%2010%2013l6%206c5%205%206%204%207-1%202-7%202-9%200-9-3%200-7-1-12-4l-7-2-1-1%202-1h1l-2-2c-3-1-4-1-4%201m-36%2014a470%20470%200%2000-8%2053v1a1456%201456%200%20001%2082c-1-16%200-26%201-17%200%204%201%204%203%205l4-1c1-2%200-4-3-4l-3-1%203-1c4%200%203-6-1-7-2%200-3%200-3%202l-1%201a359%20359%200%20013-63l4-37c2-14%202-24%200-13m-20%203l-1%207a211%20211%200%2000-6%2049c-2%2015-2%2025-2%2060a514%20514%200%20006%2080c2-1%202-2%201-6a236%20236%200%2001-2-26%20994%20994%200%20012-125%20429%20429%200%20015-43c-1%202-1%202-2%200l-1%204m-288%2021l9%203a666%20666%200%200177%2021h5c3%200%203%200%202%201h1l2%201h2l2%201%202%201h1l4%202h7l4%201%204%201c4%200%208%202%205%202-2%200%201%202%203%202v-1c-2-1%206%200%2011%202l2%201%202%201h5c2%200%203%202%201%202h4c4%200%205%200%204%201-2%201-2%201%202%201h7l3%202c-4%200%203%202%207%201%202%200%204%200%203%201v1h3l5%201c3%200%203%200%202%201h2c1%200%202%200%201%201l5%201%208%201%207%202a6438%206438%200%200111%200l-19-6a8247%208247%200%2000-205-51h-3l2%202m504%2011c-2%205-2%2010%200%2010l4-1c17-4%2026-6%2025-8v-1l2-1-12-1h-15c-3-1-3-1-4%202m-662%208l-1%202%201%201h4l34%207c2-2-10-6-24-8l-11-3c-2-1-2-1-3%201m768%208a619%20619%200%2001-2%2011l-1%2010c-1%203-1%208%201%208%202%201%202-2%205-26%200-5-1-7-3-3m-528%205l14%204a1084%201084%200%200139%208l2-4c2-3%202-3%200-3-2-1-6%200-6%203-1%203-1%203-15-1a633%20633%200%2000-34-7m258%202l-2%201-1%204v15l-1%2010%203-4c3-4%205-8%203-9v-6c0-3%200-4-1-3-2%200-3-2-1-3l1-3-1-2m-462%203l10%203a289%20289%200%200123%206l8%202%205%201%207%203%207%201%205%201a576%20576%200%200028%205l-6-1-2-1-7-1-10-3-8-2-6-2-9-2-7-2-10-2-12-3-16-3m739%209a340%20340%200%20001%2087c1%201%201-1-1-18-2-25-2-53%201-63v-7l-1-4v5m-477%200l-1%201a273%20273%200%200130%207l8%202h1l1%203c0%203%200%203%202%203l2-1-1-1c0-2-1-3%2016%202l16%202-4-1-11-3-9-2a1017%201017%200%2001-50-12m368%207c-2%203-6%2011-5%2012l-1%201-1-2a1653%201653%200%2001-24%2025c-1-1-5%204-6%209l-1%202h-1l-1%202-3%205-3%206-1%201-1%202-4%206-7%2010-5%207-4%207-3%204-3%204-5%207-2%204c-2%201-2%2013-1%2012v1l1%205%202%205%201%203c0%204%201%204%205-1%203-3%204-5%203-7l1-3%201%201c-1%203%200%202%202-1l5-6c3-5%204-7%201-8-2-1%200-3%203-3s3%200%203-2%201-2%202-2c2%200%202-1%201-3l-1-4v-2l4-6%201-1%201-1%201-3c2-1%202-1%202%201%201%202-1%205-2%205-2-1-3%203-1%204l1%201%203-4%203-6%202-2h-2v-1l1-3v-1h3c0%202%203-4%203-7%200-2%200-2%201-1s2%200%203-2l2-3-5%201-2%201%203-7a605%20605%200%20008-11c1%201%201%201%201-1-1-2%202-4%204-3%201%201%203-2%204-4%201-1%200-2-1-2s-1-4%201-7l1-4%203-6%203-6%202-3%202-3%202-6c2-6%202-8%200-6m-167%208l-3%202c-2-1-3%2012-2%2014v11c1%202%201%202%202%201l1-1-2%203-1%207c0%204-2%207-2%203%200-2%200-2-1-1l-1%202-1%2013%201%2016c0%203%202%204%203%202%201-3%200-17-1-16l-1-2%201-7c1-5%202-7%202-2%200%202%200%203%201%202v9c0%2015%200%2016%204%209l2-3c0%204%204%201%204-2%200-2%200-2-2-1-2%204-3%201%200-3%202-3%202-5%201-11v-8l-4%205c-5%207-5%205%200-3%203-5%203-6%203-11%200-7-1-7-3-4-2%204-3%202-1-2%202-3%203-5%203-9%200-5%200-5-1-4l-6%207%203-6%203-9v-4l-2%203m255%203c-2%203-2%2055-1%2057s2-3%202-28a1066%201066%200%2000-1-29m165-1c-2%201-1%203%206%208a432%20432%200%200117%2012c1%202%204%203%204%201s-3-5-5-5l-2-1-5-5-6-5c-5-4-8-6-9-5m-932%208l3%202a7377%207377%200%20001-2h-4m179%200l19%206%209%202%2012%203a410%20410%200%200149%2013h3c3%200-5-3-27-8l-10-3a558%20558%200%2000-55-13m599%203l-1%204-1%2015c0%2012%200%2018%202%2017a349%20349%200%20000-36m-658%2017c-1%201-3%202-4%201-1%200-3%204-2%205%200%202%2018%207%2018%206%203-4%203-7%201-9l-4-2c-1%201-2%200-3-1h-6m505%2020l-7%209c0%202%200%202-1%201s-7%205-9%209l-4%203-1%201-6%207-6%208%202%207c0%208%201%209%204%205l3-4%201-2c0%201%204-3%204-5l2-3a158%20158%200%200018-31l1-4%201%203c-1%204%200%204%202%200l2-4%202-5c0-3-1-3-8%205m-488-4l10%204a2454%202454%200%200177%2020h5l-4-2-7-2-6-1-22-6a540%20540%200%2001-53-13m214%202c-2%201%200%202%2012%204l11%203%2014%201-2-1-5-1c-6-3-11-4-17-5l-9-1h-4M1%20477v216h6c7-1%206%200-1%201-4%201-5%201-5%203s0%202%204%202l10-2a1228%201228%200%200079-15l-12%204%2011-2%2011-2%203-1%2017-4h3c2-3%204-2%205%201a159%20159%200%20012%2040c0%202%200%202-2%201-1-2-1-2-3-1l-6%201c-3%200-3%200-2%201s1%201-1%201-3%201-3%202-3%202-3%200c-1-1-17%203-18%204l-5%201c-3%200-4%201-5%202-2%202-3%202-7%202l-11%201-9%202-3%201-3%201-9%202-3%201h-5l-9%202-7%201-6%201c-3%200-4%200-4%202H8c-2-2-7%200-7%202s1%202%2011%202l13-1%209-2a154%20154%200%200026-5l27-7%2019-5%2011-2%203-2%205-1c5-1%2011-2%208%200a222%20222%200%2001-31%209l-6%202-11%202-40%209-10%203h744l-8-14a595%20595%200%2001-28-50%201258%201258%200%2001-90-214c-3-11-5-15-5-12-1%207-2%208-5%208-4-1-6%200-19%2012l-8%207-21%2017a2159%202159%200%2001-135%2093l-8%204a1294%201294%200%2001-320%20131c0-1%201-2%206-3l7-2%207-2c17-5%2024-8%2022-8h-3l2-1%203-2-21%205-7%202c-6%202-8%202-7%201l1-2a708%20708%200%200059-20l7-6a1095%201095%200%200022-21l-3%201-12%204a1285%201285%200%2001-66%2022l-7%202%201%206c0%206-2%207-2%200l-1-8v-28l1%2019c1%207%202%209%205%207a255%20255%200%200125-7%203706%203706%200%200165-23l11-6c8-6%2012-8%206-2l-2%202h3l22-10%205-4a181%20181%200%200019-18c-1%202-3%201-3%200l2-2%203-1%202-1%2018-12a570%20570%200%200114-16c-3%203-9%206-11%206-1%200-1-1%201-1%202-1%202-2%201-2l-4%201v3l-2%201c-1-1-3%200-4%201l-3%203a763%20763%200%2000-58%2046l6-7%202-2%201-1%2019-15%2018-14-4-1-4-1%202%201c1%200%201%201-2%202-4%202-7%203-4%201v-2l-2%201-4%202-4%201h3c2%200%202%200%201%201l-4%201h-2c2%201%201%201-12%207h-4c0-1-3-1-6%201h2c3%200%203%200%201%201l-6%201h-1c2%200%202%201%201%201h-2c-1-1-3%200-7%201-5%202-7%202-7%201l7-3a915%20915%200%200080-35l4-3-3%201-5%202-3%201-3%201h-1l-1%201v1l-12%205-10%203-3%202-3%201c-2-1-1-3%201-3v-2c1-2-4%200-10%204-7%204-6%206%200%202%203-2%205-2%207-2a431%20431%200%2000-31%2013c0-1%207-5%2013-6%202-1%202-1%201-2s0-1%202-2l3-2-4%201-5%202c-2%200-2%200-1%201h-2c-3%200-3%200-2%201v1c-1-1-8%202-10%204a325%20325%200%2001-5%205c2%200%202%200%201%201s-1%201-3-1c-1-2-3-2-5-2-3%201-4%203-2%203v1c-1%201-1%201%202%201h4l-3%201-6%202a194%20194%200%2001-23%208%20920%20920%200%2001-57%2016l2-1c3%200%2022-6%2021-7s-1-1%201-1h7c4-2%204-2%202-2-3%200-3%200-2-1l-6%201-7%202-6%201-13%205-14%204h-3c1-2%202-3%2012-5a209%20209%200%200057-20l-3%203c4%200%2025-9%2028-12l14-9-7%206-4%204h1l6-2%205-2%205-2%2019-13c14-11%2018-14%2017-11l-13%2010-11%209c1%201%2020-8%2025-11%206-4%207-5%204-2-2%203-2%203%2011-3%208-3%2012-6%2017-9%202-2%202-2%203-1%201%202%2017-6%2025-13l8-5-3%204c-4%202-6%205-3%204h1l2%201-1-2a199%20199%200%200040-32%201102%201102%200%200164-53%20981%20981%200%200156-47l5-4a448%20448%200%200023-23l-3-1c-1-1-2-1-5%202a300%20300%200%2001-20%2016%20310%20310%200%2001-24%2018%2038384%2038384%200%200153-45c-1-2-3%200-16%2010a45075%2045075%200%20018-9l1-1c0-2-1-2-3-1l-7%206-7%205-10%208a5521%205521%200%20009-10c6-4%207-5%208-8%200-2-1-1-5%202l-7%205a1903%201903%200%2000-90%2068%203664%203664%200%200097-79l-2%201-14%209%202-3%207-5c2-2%205-5%207-5%202-1%203-2%201-4-1-1-1-1%201-1%202%201%205%200%205-1l-3-1-4-1-2-1-14-2-14-2a355%20355%200%2001-51-11%20291%20291%200%2001-34-7l-11-4a28782%2028782%200%2000-30-8%20270%20270%200%2000-49-13l-18-5a271%20271%200%2001-36-10%20111%20111%200%2001-15-5l-5-1a271%20271%200%2000-22-6l-13-3-13-4a236%20236%200%2000-29-9l-6-2a189%20189%200%2001-21-5l-6-1-7-2a105%20105%200%2001-17-5%20536%20536%200%2001-30-9l-12-3-6-1-4-2-4-1-4-1-8-3-12-2c-7-3-11-4-15-4l-4-1v216m395-215s3%202%207%202a938%20938%200%200172%2020%203090%203090%200%2000-79-22m283%204a360%20360%200%2001-28%2025l-8%207-7%206a672%20672%200%200034-27c8-7%2016-15%2014-15l-5%204m281%2018l1%203v1l3%2011%201%203%201%202-1-7c-3-10-3-11%206-8%207%203%2044%2012%2046%2012h2l-2-1-7-3a164%20164%200%2001-17-5l-10-2-8-2c-4%200-13-3-14-5-2-2-2-2-1%201m-7%208l2%207%205%2019%203%207c2%203%201%206-2%205l-7%203c-4%202-5%202-7%201h-1l1%202%201%202-1%201c-2%200-4%203-3%204%203%202%2013%201%2015-1%204-4%208-6%2012-8%205-2%205-3%200-3-4%200-6-3-5-6%201-1%200-3-1-5a154%20154%200%2001-9-21c-2-8-3-11-3-7m-161%2016l2%203%202%204c-1%202%201%203%203%201l1-3c-1-2%204-1%206%202s2%204%200%204v1h6v-2c0-2%201-2%204%200%204%202%205%204%203%205s-1%201%204%202c3%200%203%200%202-2-2-2-1-2%204%200l4%201-4%201-3%201%205%201h10c1%201%201%201-1%201-3%200-2%200%208%203a136%20136%200%200115%204%201185%201185%200%2001-71-27m101%2026l4%202%203%201a329%20329%200%200038%2014l6%202a163%20163%200%200026%207%201313%201313%200%200064%2015v-1h-2l-3-1-13-5h-1l-2-1-1-2-1%201-8-1-8-2a249%20249%200%2001-34-7l-20-7-9-3a227%20227%200%2001-33-12l-6-2h-3l3%202m-122%207a13170%2013170%200%200133%2098h1v2l1%201c2%200%201-2-3-14a1281%201281%200%2001-26-73c-5-14-6-17-6-14m400%2012c-1%201-2%203-1%205l12%204c3%200%205-7%202-8-2-1-7%200-7%202l-1%201-1-2c0-3-2-3-4-2m-501%207l-5%207-1%202-4%203-2%203-1%202-1%201-5%204c-3%203-4%205-3%205%201%201%206-3%206-4l4-5c10-10%2016-18%2016-19l1-3%201-2-6%206m338%200c-1%202%200%202%2014%206%2030%207%2032%208%2031%205l-26-8c-18-4-18-4-19-3m-342%2013a3923%203923%200%2001-78%2091c-18%2021-22%2027-14%2020l7-5%205-5c13-18%2021-27%2022-26l-6%209c-7%208-9%2011-5%209l1-2%201-1h1l1-1c0%201%205-3%209-8a104%20104%200%20018-10c1-3%206-9%2010-13l11-15c3-4%204-5%202-5h-1l-2%202-6%207a208%20208%200%2001-24%2027l9-12%207-9%204-5%205-6a1100%201100%200%200133-42m243-7l-1%201-2%202c1%204%2015%207%2017%205v-3c0-1%202-1%206%201l1-1-7-3c-13-4-13-4-14-2m-242%2011a358%20358%200%2001-17%2021l-8%2011c0%203%200%203%206-5a200%20200%200%20019-11l4-6c3-2%2011-13%2012-16l-6%206m22-3v7h1l-1%203-2%2013v12l2-3c2-2%202-4%202-18l-1-16-1%202m486%200c-3%204%200%206%209%208%205%201%207%200%207-4l-3-3-4-1-2%202c0%203-2%202-3-1%200-2-2-3-4-1m-502%209a274%20274%200%2001-16%2021%20224%20224%200%2001-16%2021l-2%204%204-4%204-3%206-8%205-7%204-6%202-1-3%206c-2%202-3%205-2%205%201%201%2017-21%2018-25%200-2%200-2-1-1l-2%203-1%201-4%206-4%205c-2%200-1-2%206-12l7-11s-3%202-5%206m368-6c0%201%202%202%205%202l10%204%203%201%205%201%2019%205a909%20909%200%200137%208c0-2-12-6-16-6l-6-2h-3l-2-1-20-5-10-3a114%20114%200%2000-22-4m-262%204l8%2028a114%20114%200%20015%2013l5%2013v3c1%202%201%202%201-2l-9-29c-9-27-10-30-10-26m250%201c-2%204-1%204%2010%206%209%202%2012-4%204-7-5-1-6-1-7%201%200%203-2%201-2-1%201-3-4-3-5%201m-368%2010l-3%202-1%201-7%2010a95%2095%200%2000-8%2010%20178%20178%200%2000-13%2017c-2%201-12%2016-11%2016s12-11%2016-17a1701%201701%200%200127-39m-21%206l-7%206-5%205a1014%201014%200%2000-56%2064c-5%204-27%2031-27%2032l15-12a358%20358%200%200035-42l11-11a802%20802%200%200141-49l-7%207m37-2l-4%2024%203-1c2-2%204-14%204-23%200-4-1-4-3%200m244%203a1294%201294%200%200117%204%20577%20577%200%2001-17-4m-248%201c0%203-11%2023-12%2021l5-9%205-10a2902%202902%200%2001-35%2052c-4%204-3%205%201%201l4-3c1%201%204-4%2013-20l6-10c2-1%201%202-2%207l-1%204-1%201-5%208%2010-9%2010-9%202-12%201-12h-1m463%203l4%201%207%202%208%203a773%20773%200%200145%209l-5-1-7-2-6-2-14-3c-26-8-32-9-32-7m-483%2016a145%20145%200%2000-16%2021c-2%200-1-3%203-7l2-4a70%2070%200%2000-18%2020c-4%205-6%208-5%209s0%202-2%201h-1s-3%206-8%2011a367%20367%200%2000-13%2021l3-3%201-1c1%201%2010-8%2010-10l3-5%207-8a261%20261%200%200117-22%20441%20441%200%2001-21%2033l4-3-3%204-3%206-3%201c-2%200-3%201-4%203-4%205%202%203%2011-5l4-3v-4l-1-2%204-5%205-6%204-7a468%20468%200%200020-35m-169%204a842%20842%200%2001-54%2041%204880%204880%200%200054-41m80-1l-2%203-1%201-5%203-3%204-4%203-5%205-1%201-2%201-10%209a136097%20136097%200%2001-52%2051l7-5c7-5%2010-8%2044-40s37-36%2037-37l-3%201m130-1a654%20654%200%2000-1%2090c-1-1-1%205-1%2012l1%2031%202%206%203%205%201%203%201%202%201-2-1-19c0-17-1-26-2-25l-3-10c0-2%201%200%202%203l2%206-1-28a158%20158%200%2000-1-33v-7l-1-34h-2m-138%203a983%20983%200%2001-27%2022c0-1-1-1-2%201-2%202-2%203%200%201%203-2%202%200%200%202l-17%2014v-2c-2%200-3%203-2%203%201%201-1%203-4%206-6%205-9%207-4%202l1-3-4%204-2%203h2l-2%201-1%201-10%2010c-8%207-10%208-4%202l3-4-20%2017c-1%202%201%201%207-4l6-5-1%202a872%20872%200%2000-12%209c-1-1-6%201-6%203l-11%2010-10%2010%2015-12c11-10%2015-13%208-6l-3%205a1270%201270%200%200185-76%20421%20421%200%200115-16m132-1a262%20262%200%2000-4%2062c-1-1-2%2012-2%2028%200%2011%200%2013%202%2018a111%20111%200%20015%2013%203775%203775%200%2000-1-121m321%200l8%203a376%20376%200%200116%204%201034%201034%200%200173%2019%208423%208423%200%200129%205%201135%201135%200%2001-73-19%20869%20869%200%2000-53-12m-402%204l-3%203c-1-1-4%202-3%204h-1a459%20459%200%2001-50%2053%20788%20788%200%2001-31%2036l8-5%202-1a4212%204212%200%200178-90m93%2013c0%2022%200%2022%201%2021l1%202-1%203-1%2030c1%2028%201%2031%203%2037l3%207v4l-2-5c-2-5-2-5-2%2016l2%2025a281%20281%200%20018%2017v-17c-1-19-3-30-4-30l-1-3c0-3%200-3%201-2v-27a11240%2011240%200%2001-6-89l-2-4v15m-19-10c-2%202-3%204-4%2010%200%2010-1%2010-1%202l-1-7c-2%200-5%206-6%2010l-2%2013-2%207%201-9%201-11c1-3%201-3-4%201-4%203-4%203-3%208%200%206-1%207-2%202-1-3-2-4-4-2a643%20643%200%200030%2088c2%203%203%202%202%200l-1-4-1-2-2-3c0-2%200-2-1-1-1%202-1%201-1-4l-1-6-2-1-1%201-1-3c0-2%200-2%201%200v-2l-1-5-2-5-1-2c-1%202-2%201-2-3%200-6-3-12-4-9-1%201-1%201-1-1l1-2c1-1-1-10-2-10l-1%201h-1v-7l1-5%201-3c1-2%201%200%201%203%200%205%203%2016%205%2022%202%204%202%203%204-31%201-11%202-16%202-8v5l-3%2031c-1%209-1%2010%202%2017l3%2011%202%205v-9a907%20907%200%20001-82m-157%204a726%20726%200%2001-47%2040%203309%203309%200%2000-102%2089c3-2%205-3%206-2l2-1%205-4%209-7a554%20554%200%200127-24%203128%203128%200%200195-82c11-10%2014-12%2013-14-1-1%200-2-8%205m190-4a163%20163%200%20003%2032c-1-1-1-1-1%201-1%202%201%2012%202%2013l2%205%202%204-3-16v-1c1-1%201-4-1-19%200-4%200-5-1-3-1%201-1%201-1-1l1-3c1%200%201-8-1-12%200-3-2-2-2%200m-181%203l-9%208-1%201-1%201a199%20199%200%2000-25%2023c-1-1-6%204-14%2011l-17%2015-32%2027a797%20797%200%2000-29%2027h3l2-2%203-2%203-2c4-4%209-7%209-6h2v-2c-2-1%202-4%204-3l3-2v-1c-2%201-3%200-1-2l2%201h1v-1c-1%200%201-3%208-8%202-2%203-2%203-1l2-1h-1a830%20830%200%200019-17c3-1%203-1%202-2s1-3%2016-16a1945%201945%200%200048-46m173%2013l1%2019%203%2047c1%2037%202%2046%205%2050l2%205-2-2-3-3v3l2%2022c1%2017%201%2019%204%2024l3%207%201%202%201%202a1071%201071%200%2001-4-47c-2-5-3-7-1-7l1%203a5796%205796%200%2001-9-113l-1-3-3-9m-93%209a199%20199%200%2000-31%2038l-7%209-6%208v1l3-2%207-5%207-8%208-11a462%20462%200%200027-36l-8%206m-38-2a354%20354%200%2000-42%2044%202197%202197%200%2000-42%2045c1%201%2017-11%2022-17a3294%203294%200%200165-72c5-5%203-5-3%200m148%2010c-1%202%201%2019%202%2019l1%203%201%203%201%202c0%202%200%202-2%200-2-4-1%208%202%2013l2%205%201%202c1-1%200-8-2-11s-2-7%200-6l-1-17-1-8-1-4-2-1h-1m7%2010c2%2024%207%2047%2010%2044l1-3c0-1%200-2-1-1l-1-6-1-7-1-4v-1l-2-9-2-10-1-5-1-5c-1-1-1%200-1%207m6-3l1%201%201%204%202%2021a8570%208570%200%20018%2048c-1%204%201%2011%205%2018l3%208%201%202%201-3a606%20606%200%2001-10-58l-2-10v-5l-1%204c-1%203-1%203-1-3l-1-9v-1c-1%201-1%200-1-4v-2l-1%203v-4a82%2082%200%2001-2-11c-1-2-3-1-3%201m-145%204a597%20597%200%2001-45%2054l3-2%205-4c6-4%2011-9%2010-10v-1a493%20493%200%200119-22l12-16c4-5%202-5-4%201m273-4l1%202v1l-1%202c0%202%201%202%203%202%204%200%206%201%203%202-2%201-1%203%201%205%203%201%203%206%201%205-9-3-11%200-2%204%2019%207%2040%2011%2048%2010%203-1%204-6%200-9-2-2-2-2%200-2l8%204c2%201%202%201%203-2s-1-6-6-6c-2%200-13-4-15-6l-11-2a116%20116%200%2001-30-9c-2-2-3-2-3-1m-316%204l-4%202v1l-1%201a1205%201205%200%2000-76%2080l8-5%2016-15a1771%201771%200%200156-61c6-5%206-7%201-3m167%204l1%2013%201%2012a468%20468%200%20004%2056c2%2021%202%2021%206%2029l2%207c0%202-1%201-1-1-3-7-4-7-4-1l2%2021%201%2017%206%2011%205%2011-1-9a179%20179%200%2000-5-44v-13l-2-17a3705%203705%200%2000-10-84l-4-10c-1-2-1-1-1%202m45-1l1%201%201%201v6l7%2039a631%20631%200%200113%2063%202894%202894%200%200112%2058c1%203%203%204%203%202l1-2%201%202%201%201%201-1-6-26a3502%203502%200%2001-30-135l-2-7c-1-4-3-6-3-2m-15%204a1638%201638%200%200018%2092l2%202c1%206%204%2012%205%2010%201-1%201%200%202%203l2%207c1%203%201%203%201%201s1-1%201%203l4%209c2%205%203%209%201%206h-2c0%202%202%208%205%2012l2%205v-2a1255%201255%200%2001-3-11c-1%202-1%202-1%200l1-2a196%20196%200%2000-8-46%2014865%2014865%200%2000-19-81l1%207-2-6a234%20234%200%2000-1%203%202712%202712%200%2001-2%201c-2-14-4-18-4-10v5l-1-4-2-4m23%206v3a581%20581%200%200112%2050l22%20101c3%2013%204%2018%208%2023l2%205c0%202-2%201-3-1%200-2%200-2-1%200%200%202%205%2013%207%2012l1%202%204%207c0-3-3-9-6-13-2-2-3-4-2-5l2%202a2084%202084%200%2001-22-103c-21-90-20-85-24-83m-198%203l-3%203a2540%202540%200%2001-49%2056c1-1%203%200%204%201h2v-5l1%201%202%201v-3h1c0%202%206-5%206-7l1-1a156%20156%200%200022-27l5-5%207-9%203-4v-3l-2%202m206%201l2%209%202%209a10981%2010981%200%200047%20185l5%207v-4c1-4%201-6-4-24-1-4-1-4-2-2s0%204-8-29a21708%2021708%200%2000-39-152c-2-2-3-1-3%201m7%200l3%2011a1087%201087%200%200111%2046l7%2027a94727%2094727%200%200041%20148c2%202%203%206%201%205-2-2%200%205%202%207l2%203a465%20465%200%2000-1-10l3%203c5%2012%206%2013%204%203a10382%2010382%200%2000-49-173%206124%206124%200%2001-2-2c-1%202-1%201-8-27a2085%202085%200%2000-14-41m-262%202c-6%205-8%207-9%206a1684%201684%200%2000-74%2076l5-3c8-4%2011-7%2018-14a3320%203320%200%200161-64c4-3%203-4-1-1m273-1a593%20593%200%200021%2074%20827%20827%200%200020%2071l2%2010c-1%202%200%203-9-27a2025%202025%200%200023%2092c9%2033%2011%2038%2013%2038l-1-7-2-8c0-5%203%203%204%2010%201%205%202%205%204%205%204%200%204%200%201-7a385%20385%200%2001-13-45%204071%204071%200%2000-38-130%2027817%2027817%200%2001-25-76m326%203l-8%2014%205%201c5%201%205%201%208-6s3-9%200-9h-5m-178%203c-3%203-3%204%202%205s5%203%200%203c-4%200-5%202-3%204%201%201%202%202%201%203a519%20519%200%200140%2013c5%200%205%200%206-3%200-2%200-3-2-4h-2l2-1%202-3%204-1%204-1-8-4c-3%200-7-2-14-5l-20-7-8-2-4%203m-448%203l-3%202-1%201h-1v1l-1%201h-1l-1%201c-2%200-15%2010-19%2015l-2%203%204-3%204-3%203-2%203-1%201-1%202-2c3-1%2015-13%2015-14l-3%202m52%207l-5%203-9%208c-6%206-7%208-7%2010%201%201%201%202-1%201-1%200-3%201-6%205a177%20177%200%2001-13%2015l-5%207c-4%204-3%204%202%201l5-3c2%201%209-7%207-8l-1-2%202%201%202%201-1-2v-1c1%201%206-4%2017-18l15-18c5-5%204-5-2%200m180%203a463%20463%200%20016%2055%203062%203062%200%20018%2062v2l-1%2010c1%2016%202%2020%208%2031%206%2010%206%2010%206%206a174%20174%200%2000-8-51%20680%20680%200%2000-2-34%202573%202573%200%2001-10-71%201073%201073%200%2001-7-10m383%203l-4%203-1%201c-2%200-8%205-8%207%200%204%209%200%2017-6l4-4-2-1c-2-2-3-2-6%200m-620%201l-4%203h-3a225%20225%200%2000-26%2024%206515%206515%200%2001-52%2052%20107%20107%200%200036-27%20141%20141%200%200016-17c1%201%201%201%201-1v-1a161%20161%200%200030-29l3-3c4-3%203-4-1-1m525%202c-1%202-1%204%201%204%201%200%202%202%200%203v2c0%203-2%205-3%203h-4c0%202%203%205%206%205l2%201%205%202a404%20404%200%200150%2014l11%203%209%203%206%201%206%202a305%20305%200%200119%205l9%201a450%20450%200%200067%2015c2%200%202-1%202-10v-9l-3-1c-9%200-14-1-17-3l-6-4c-6-1-14-7-14-9l-4-1c-4%200-4%200-3%202a357%20357%200%2000-47-10l-2-1-11-3c-16-3-16-3-15-4%201%200%200-2-2-3-3-3-4-3-6-1-3%201-6%201-11-1l-12-2a378%20378%200%2001-33-4m-278%204l1%205%201%203%201%201%201%204v3l-1-3c-2-3-2-3%200%2013a237%20237%200%20014%2025%20973%20973%200%200010%2070c2%205%202%206%201%206l-2-3c-1-3-1%207%202%2022l1%2016%202%207c1%201%203%203%203%205l8%2013-2-7%201-2v-2l-2-11c-2-18-3-22-7-29l-3-8%203%204%203%205-1-6-1-11a783%20783%200%2001-10-68l-4-23c-2-2-4-11-3-12l1%202%201%203c1%201%201%201%201-2l-1-5c0-2%200-2-1-1l-1-4-2-6-1-3-1-2-1-1c-1-1-1-1-1%202m-277%203l-5%203-3%201-2%202c-2%200-10%206-14%2010-3%202-4%204-3%204v2l-3%202c-1-1-5%202-4%203l2-1%203-1c2%200%202%201-1%203-5%202-7%203-5%201v-2c-2%200-3%203-2%203s-2%203-6%205l-12%209a927%20927%200%2001-53%2048l-6%207c1%201%2016-7%2021-10a363%20363%200%200037-35c6-4%2033-30%2031-31v-3l3-3%205-1%201%201%201-2v-2l1%201h1v-2h1l1-1c1%201%201%201%200%200%200-2%200-2%201-1l9-6c6-7%207-10%201-4m66-2l-9%206a66%2066%200%2000-16%2015%20454%20454%200%2000-31%2039c0%202%203%201%203%200v-3l2-3c3-1%203-1%203%201-1%202%201%201%202-1h1l-1%202-1%201h3l1-2c-2-2-1-6%203-8l6-5a1259%201259%200%200134-42m-70%2010l-2%204v2l-3%201-24%2021a995%20995%200%2001-49%2046c-4%204-2%204%203%201l9-5a729%20729%200%200152-48%208883%208883%200%200119-21l-3%201v-1c1%200%206-4%204-4l-6%203m-32%208c-2%202-2%202%200%202h2v1l-3%202-4%203c-11%206-21%2013-20%2015l3-1c1-2%205-3%205-2l-3%203c-3%201-3%201-2%202h2l4-3%202-3-1-1%202-1%201-1%201-1c2%200%2013-8%2015-11l1-2c-2%200-2-1-2-2%201-4%200-4-3%200m67%205l-14%2012a261%20261%200%2000-25%2028l-9%209%2012-6c1-2%203-3%205-3l4-4%205-6a939%20939%200%200032-35l-10%205m197%201c0%202%200%202-2%201-2%200-2%200%203%2012l3%207%206%2014%202%205%202%204%201%201c0%203%202%207%204%207s3-3%201-4l-2-6c-1-4-1-4-2-1s-2%201-3-6c0-4%200-6-1-5s-1%201-1-1c0-5-5-16-7-15-1%201-1%201-1-2%200-4-3-15-3-11m-221%2015l-1%201c0-3-11%207-29%2026l-21%2021%203%201c2%200%203%201%203%202l1%201%201-2c0-2%200-2%202-1%203%200%2010-3%2010-6l1-1%201-2-2%201-2%202c0%201-3%203-5%203-2-1-1-3%202-4l3-3%2014-15%2023-25c0-2-3-1-4%201m-74%201l-8%204c-9%204-23%2015-16%2012l6-2%204-2c2%200%2013-8%2016-11%203-4%202-4-2-1m358%202l2%2011%202%2018c2%2010%202%2010%204%209%202%200%201%201-1%203h1c2%200%203%200%204%203%201%204%201%205-1%205-2%201-3%203-1%203%204%200%205-2%203-12a8561%208561%200%2001-6-27l-4-10c-1-4-3-5-3-3m-356%206l-3%202v-1c2-2%200-2-2-1l-1%202c2%200%201%201-2%202l-13%209a2360%202360%200%2001-59%2053c-3%202-2%202%202%200l4-1a86%2086%200%200025-16c12-11%2020-18%2019-19l1-3%203-1%2011-7a446%20446%200%200119-21c-2-1-2-1-4%202m49%204l-12%207c-6%203-14%2012-14%2015%200%202%200%202-2%201-1-1-3%200-14%2012l-13%2014c1%201%2020-9%2022-12l16-17c17-17%2021-21%2019-21l-2%201m-92%209l-9%204-12%2010%204-1%203-2%204-2%204-1%202-1%205-3c4-2%208-7%207-7-1-1-1-1-8%203m14%202c-3%202-3%202-4%201-1-2-6%201-6%203%201%200%200%202-2%202-4%202-11%207-17%2013l-6%204-3%203-8%207a343%20343%200%2000-29%2025%20660%20660%200%2001-8%207l10-3%207-3%207-4c0-2%201-2%201-1l1-1a396%20396%200%200125-23c-3%200-2-2%201-3%203%200%2011-6%2013-8a438%20438%200%200122-21l-4%202m48%207l-4%201-2%201-5%204c-3%201-10%206-14%2011l-32%2032c3%200%204%202%202%204-2%200-2%201-1%201%202%200%204-1%204-3%201-2%201-2%203-1h1c-1-2%201-3%204-2%202%200%203%200%205-2l3-2%206-2-8%201-2%202c-2%201-2%201-1-1%200-2%200-2-1-1l-2%203h-1c-1-4-1-4%204-6%206-3%2011-7%2010-8l1-2a487%20487%200%200030-30m353%2014a10941%2010941%200%200026%20143l4%201h4l-3-15-5-18c-2-2-2-3%200-4v-6l-2-8a617%20617%200%2001-9-47l-4-24c-1-10-4-20-6-21l-1-2-6-13%202%2014m-380-1l-10%206c-9%204-15%209-33%2027a142%20142%200%2001-12%2011c-4%204-4%204%209-1%208-4%2013-7%2012-10h1l10-8a5848%205848%200%200123-25m375%2015c-3%200-3%200%200%2017l1%2015c1%208%203%2015%204%2015l1%202%201%203%205%209%203%206v-5a1212%201212%200%2000-11-63l-4%201m-408%202l-2%202h-1l-5%203-6%202a2113%202113%200%2001-41%2037l4-2%205-2c2-2%204-2%207-2l1-1%201-1c2%200%208-5%207-5-1-1%200-2%202-3l13-10c22-21%2023-22%2015-18m425%201l1%207c3%208%204%2016%204%2019%200%202%200%202%201%201v1l4%2024%203%2020c4%2018%206%2029%208%2031l9%2015-4-4-6-8%204%2019c0%203%209%203%209%201l-1-2v-4l-2-11a1001%201001%200%2001-15-73c-2-13-3-16-8-26s-7-13-7-10m-57%205l1%207c3%207%205%2013%207%2013l1%203%203%207%202%204%202%202%201%202%203%208%203%206%203%206%203%204c0%202%204%205%204%204%201-4-10-27-12-26l-2-1-6-18-6-10-2-3-3-8-2-4v4m-401%2010l-2%202h-1l-3%201-4%201-9%205-4%203v5l-1-1c0-2%200-2-2-1a325%20325%200%2001-26%2023c-4%203-2%203%207-1l12-4%203-3%203-3%201-1%204-2%209-9c19-17%2021-19%2013-15m-92%201a1350%201350%200%2001-64%2022c-24%206-28%208-26%209h9c-10%201%203-4%2025-10a867%20867%200%200058-18h4l4-1-3-1c-3-1-3-1-1-1l2-1c0-1-3-1-8%201m59%2012l-10%204c-4%202-14%2010-27%2022l-11%2010c-5%203-2%203%208-1l11-4%207-6a263%20263%200%200128-24c4-5%204-5-6-1m507%203a5216%205216%200%200019%2091l1%205h5c6%200%206%201%203-8a265%20265%200%2001-7-32l-7-29c0-5-2-10-8-20-5-9-6-11-6-7m-476%207c-2%202-2%202-4%201-1-1-2%200-5%201l-8%204-5%202%202%201c4%202%2010%200%209-3l1-2h2l2%202%2011-6c-2%200-2%200-1-1v-2l-4%203m-58%201l-3%202h-1l-3%201-4%201c-4%201-10%205-17%2011a460%20460%200%2001-25%2021c-4%203-4%204%200%202%203-2%205%200%203%203-2%202-5%203-3%201l-2-1c-2%200-2%200-1%201%202%201-1%203-3%203-3-1-6%200-5%201l-4%201-8%201-3%202%203%202c1%201%201%201%205-1l5-2%2020-7%205-1%208-3%206-2c1-1%201-1-1-1s-2%200%202-2l4-1h6v-1c-1-1-1-1%201-2l3-2c0-1-4%200-11%203l-6%202-4%203-4%201c-1%200%200-2%204-5l6-4%2013-11%2011-12%201-1%203-1%204-3-5%201m-130%202l-4%201-23%206c-26%207-25%207-25%208a316%20316%200%200055-16l-3%201m635%209l3%2016a255%20255%200%20003%2023c0%202%208%2017%2013%2024v-1l-1-7c0-12-6-39-8-40l-5-8c-4-8-6-11-5-7m47%2013l1%205%201%207%202%206v2l1%202%201%203%203%2016%204%2018%201%205h10a232%20232%200%2000-8-31l-5-18-6-10-2-3-1-1-2-4v3m18%2029a341%20341%200%20005%2023c2%2011%203%2012%208%2012h4l-1-4-4-15-6-8-5-9c-2-2-2-2-1%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/556b19ca03c10ccb57152c62f9796098/21095/banner.jpg","srcSet":"/static/556b19ca03c10ccb57152c62f9796098/36b10/banner.jpg 300w,\n/static/556b19ca03c10ccb57152c62f9796098/88367/banner.jpg 600w,\n/static/556b19ca03c10ccb57152c62f9796098/21095/banner.jpg 1200w,\n/static/556b19ca03c10ccb57152c62f9796098/97ce3/banner.jpg 1800w,\n/static/556b19ca03c10ccb57152c62f9796098/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/556b19ca03c10ccb57152c62f9796098/58d74/banner.jpg"}}}}}}},"pageContext":{}}}