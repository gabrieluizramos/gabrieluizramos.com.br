{"componentChunkName":"component---src-templates-post-article-index-js","path":"/testes-assincronos-em-javascript","result":{"data":{"markdownRemark":{"id":"7fedeb37-c39f-5e56-b5f7-f8450385b75b","html":"<p>É bem comum lidar com código assíncrono quando estamos criando alguma aplicação. Seja alguma consulta à alguma API externas ou qualquer trecho de código que possa bloquear a execução de nosso software e esteja organizado de maneira assíncrona. Lidar com essas questões essa é uma realidade no nosso dia-a-dia.</p>\n<p>Assincronia, por si só, é um tópico a parte e que envolve vários conceitos diferentes e relacionados à forma <a href=\"https://gabrieluizramos.com.br/entendendo-o-v8-peca-por-peca/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">como os motores JavaScript funcionam</a> e lidam com ações que serão concluídas no futuro.</p>\n<p>De qualquer forma, garantir que esses cenários estejam sob nosso controle através dos nossos testes é parte fundamental para que tenhamos <a href=\"https://gabrieluizramos.com.br/voce-confia-em-si/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">confiança no software que escrevemos</a> e é sobre isso que vou falar um pouco hoje.</p>\n<h3 id=\"o-que-e-assincronia-e-sua-linha-do-tempo\" style=\"position:relative;\">O que é assincronia e sua linha do tempo</h3>\n<p>Quando penso sobre assincronia, particularmente, costumo pensar sobre um código que não sei exatamente o momento que vai ser executado e nem se será executado com sucesso ou falha.</p>\n<p>Indo um pouco mais afundo, conseguimos imaginar uma linha do tempo do código assíncrono em JavaScript e suas formas de utilização. Ao fazer isso, temos algo como:</p>\n<ul>\n<li><em>callbacks</em>;</li>\n<li><em>promises</em>;</li>\n<li><em>async/await</em> (que também são Promises mas com um tempero diferente).</li>\n</ul>\n<p>Acho que faz sentido dividir o assunto nessas três partes, justamente para moldar nossos casos de teste.</p>\n<hr>\n<p>Lembrando que todos os exemplos aqui levam o <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a> em consideração como framework de teste mas os fundamentos podem ser reaproveitados pra qualquer ferramenta que você estiver usando. Não esquece que a <a href=\"https://jestjs.io/docs/pt-BR/asynchronous\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentação oficial</a> também é muito boa e pode ser um guia bacana para tirar outras dúvidas.</p>\n<hr>\n<h4 id=\"callbacks\" style=\"position:relative;\"><em>Callbacks</em></h4>\n<p>Se traduzirmos o termo <em>callback</em> temos algo como \"chamar de volta\" numa tradução livre. Isso significa que, em algum momento do nosso código, precisamos executar algo assíncrono e registraremos uma função que será \"chamada de volta\" quando algo acontecer (como um clique em um botão ou uma resposta de um API).</p>\n<p>E um exemplo prático de um trecho que utiliza <em>callback</em> mas que nem sempre percebemos é o próprio <code class=\"language-text\">.addEventListener</code>. O que esse método faz é justamente registrar um <em>callback</em> (uma função que será executada) quando algum evento ocorrer. Por exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// cria função de callback</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Botão clicado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// consulta botão no DOM</span>\n<span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.my-button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registra função de callback para o evento click</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Esse trecho é um exemplo bem prático de utilização de <em>callbacks</em>, já que não sabemos o momento exato que a função <code class=\"language-text\">callback</code> será chamada, pois quem estiver utilizando nosso sistema pode clicar no botão o momento que quiser.</p>\n<p>Outros exemplos como o <code class=\"language-text\">setTimeout</code> também beneficiam-se de <em>callbacks</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// cria função de callback</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Timer finalizado'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// registra função de callback a ser executada após 5000ms</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que <code class=\"language-text\">setTimeout</code> realiza é justamente o registro de um <code class=\"language-text\">callback</code> que será executado após determinado tempo (no exemplo, depois de 5 segundos ou <code class=\"language-text\">5000</code> milissegundos).</p>\n<p>Agora vamos aos testes.</p>\n<p>Vamos imaginar que temos a função <code class=\"language-text\">consultaPersonagens</code> no nosso código, que realizará uma chamada assíncrona à uma API. Não vamos nos preocupar com a implementação dessa função mas sabemos que ela recebo um <em>callbacks</em> como argumento e executa esse <em>callback</em> passando como parâmetro uma lista de personagens existentes.</p>\n<p>Ou seja, nossa função deve ser executada mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// importa a função de um lugar qualquer</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// executa a função passando uma função como callback</span>\n<span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// manipula os personagens da API</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para facilitar nosso exemplo, vamos imaginar que já realizamos um <em>mock</em> do módulo que realiza essa consulta externa, como vimos no <a href=\"https://gabrieluizramos.com.br/fundamentando-mocks-em-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post sobre o assunto</a> e que sabemos que a chamada retornará algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"anakin skywalker\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"darth vader\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"leia organa\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"luke skywalker\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"r2-d2\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"c3po\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Parando para analisar a função é fácil pensar que tudo que precisaremos fazer é criar uma função de <em>callback</em> para nosso teste. Algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// caso de sucesso</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// criamos callback de sucesso</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackDeSucesso</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// realizamos nossas asserções normalmente</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>personagens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// executamos nossa função passando o callback criado</span>\n    <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span>callbackDeSucesso<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Porém, isso não funcionará como o esperado. Isso acontece porque o Jest finaliza a execução dos testes assim que nosso bloco dentro das funções <code class=\"language-text\">it</code> ou <code class=\"language-text\">test</code> terminam.</p>\n<p>A forma de fazer com que o Jest \"aguarde\" as chamadas assíncronas é receber, na declaração do teste (no bloco <code class=\"language-text\">it</code>) um parâmetro chamado comumente de <code class=\"language-text\">done</code> (que, em inglês, significa <code class=\"language-text\">finalizado</code>). Esse parâmetro é uma função e, utilizando-o corretamente dentro de nosso teste o Jest aguardará até que sua execução seja realizada e, se não for chamado, nosso teste falhará.</p>\n<p>Adaptando o exemplo anterior, temos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// inserimos o done como parâmetro recebido na função it</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">done</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackDeSucesso</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>personagens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// executamos o done após nossas asserções</span>\n      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span>callbackDeSucesso<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso nosso teste não passe e precisemos de um log de erro melhor, no nosso terminal, podemos inserir um <code class=\"language-text\">try/catch</code> dentro de nosso callback, da seguinte maneira:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">done</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackDeSucesso</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// try/catch adicionado</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>personagens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">done</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span>callbackDeSucesso<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Dessa forma poderemos ter um log de erro mais detalhado no terminal ao executar os testes.</p>\n<h4 id=\"promises\" style=\"position:relative;\"><em>Promises</em></h4>\n<p>Assim como fizemos com <em>callbacks</em>, se traduzirmos o termo <em>promise</em> temos algo como \"promessa\" numa tradução livre e é justamente o que esse objeto nos permite: lidar com a promessa de que teremos um resultado futuro resolvido com sucesso ou erro.</p>\n<p>Trabalhar com esse cenário nos testes vai ser mais simples do que o exemplo de <em>callback</em> que fizemos. Vamos manter nossa função <code class=\"language-text\">consultaPersonagens</code> em mente, mas vamos imaginar que agora ela utiliza <em>promises</em> e é executada mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// manipula os personagens da API</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// lida com casos de erro</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para adaptarmos nosso teste, tudo que precisaremos fazer é retornar uma <em>promise</em> e inserir nossa asserção dentro de um <code class=\"language-text\">.then</code>. Simples assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>personagens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O passo importante é se certificar de retornar (<code class=\"language-text\">return</code>) uma <em>promise</em> corretamente. Esquecer de retornar esse valor fará com que o Jest complete o teste antes da <em>promise</em> resolver.</p>\n<p>E, para o cenário e falha, podemos retornar uma <em>promise</em> com <code class=\"language-text\">.catch</code> normalmente. Entretanto, precisaremos adicionar um bloco indicando quantas asserções nossos testes terão, para auxiliar o Jest na missão de identificar quantas asserções teremos no cenário de falha.</p>\n<p>Ao fim, teremos um teste mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">personagens</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>personagens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// caso de erro</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com erro'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// indicamos quantas asserções teremos</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">assertions</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// retornamos promise que resolverá com erro</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Outra forma de lidar com esses cenários de sucesso/error é as funções <code class=\"language-text\">.resolves</code> e <code class=\"language-text\">.rejects</code>. Particularmente acho mais simples e tudo que precisaremos fazer é retornar essa asserção utilizando agora esses métodos.</p>\n<p>Adaptando nossos dois cenários acima, teremos algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mockDosPersonagens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolves<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>mockDosPersonagens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// caso de erro</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com erro'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rejects<span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Mais prático, não?</p>\n<h4 id=\"asyncawait\" style=\"position:relative;\"><em>Async/Await</em></h4>\n<p>Pra finalizar, vamos imaginar que nossa função <code class=\"language-text\">consultaPersonagens</code> continua igual, mas agora vamos utilizar <code class=\"language-text\">async/await</code> para os testes. Basta inserir <code class=\"language-text\">async</code> na função passada para nosso bloco <code class=\"language-text\">it</code> e realizar os testes normalmente com <code class=\"language-text\">await</code>. Caso o cenário seja de falha, mantemos nosso bloco <code class=\"language-text\">expect.assertions</code> como vimos anteriormente e inserimos <code class=\"language-text\">try/catch</code>.</p>\n<p>O cenário completo (de sucesso e falha) seria algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// inserimos async na função do teste</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// utilizamos await normalmente e seguimos com as asserções</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// caso de erro</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com erro'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// mantemos a indicação de quantas asserções teremos</span>\n    expect<span class=\"token punctuation\">.</span><span class=\"token function\">assertions</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// inserimos um try/catch normalmente</span>\n    <span class=\"token comment\">// com a asserção no caso de falha</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Podemos, inclusive, combinar <code class=\"language-text\">async/await</code> com os métodos <code class=\"language-text\">resolves/rejects</code>, da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> consultaPersonagens <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// faz o mock do módulo que vai fazer a requisição</span>\n<span class=\"token comment\">// ...jest.mock(...)</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consultaPersonagens'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com sucesso'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mockDosPersonagens <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// agora utilizando resolves</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>resolves<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>mockDosPersonagens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'consulta personagens com erro'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// agora utilizando rejects</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">consultaPersonagens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rejects<span class=\"token punctuation\">.</span><span class=\"token function\">toThrow</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3 id=\"agora-e-so-testar\" style=\"position:relative;\">Agora é só testar!</h3>\n<p>Já conhecia esses métodos e costuma testar código assíncrono?</p>\n<p>Espero que tenha entendido um pouco mais sobre como funciona assíncronia em JavaScript e como realizar esses tipos de teste corretamente.\nTemos várias alternativas para testar esses trechos e tenho certeza que alguma delas vai te ajudar!</p>","timeToRead":8,"frontmatter":{"date":"08/06/2020","path":"/testes-assincronos-em-javascript","title":"Testes assíncronos em JavaScript","subtitle":"Como garantir qualidade de código em cenários inesperados de testes com callbacks, promises e casos de sucesso e falha","banner":{"author":"Skye Studios","href":"https://unsplash.com/photos/EbSozYRe4X0","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2036a163%20163%200%20001%2038L0%20289v215h3c4%201%206%200%204-1l-1-2%202%201h2c2-1%202-2%201-2l-1-2%202%201%202%201-1-2c-1-1-1-1%201-2h6l1-3%202-1%203-1%203-2v-2c2%200%207-5%2011-11l3-4c1%200%201%201-1%204s1%205%208%204l6%201c0%202-9%2010-10%2010l-2%201-4%203-7%205-4%203-4%203c-3%203-3%205%200%204%204-1%202%202-2%204-6%204-8%206-15%2019l-6%2012%205%202c7%201%208%203%202%202-3-1-3-1-1%201l3%201-3-1c-8-1-7-2-8%2017v17l3-2a550%20550%200%200019-20l-3%202%201-2v-1l1-1%2012-9%202-2%209-6%205-4%208-7%209-7%2011-8c4-4%208-5%207-3l2%201%203-1%202-1c1%200%201%201-2%204s-3%204%200%201l3-1c2%200-3%205-10%2010a35%2035%200%2000-10%2010l-6%203c-8%206-10%207-11%206l1-1%202-2c0-2-2-1-4%201l-8%206-10%209c2%200%207-4%2014-9l5-3-6%206c-6%204-7%206-6%207v1l1%202c3%201%208%201%2010-2l3-2%208-6%2010-7%203-2%201-1a96%2096%200%200018-15l3-1c6-5%2013-5%2010%200v6c2%201%202%201%200%204l-1%202%202-2c2-2%208-4%209-4a1183%201183%200%2000-45%2043l4%202%202%201%203%201c2%201%203%200%2016-11a866%20866%200%200130-26c0%201-7%209-28%2028-9%208-12%2012-12%2013l9%204%205%203%204%202%208-8c14-13%2023-20%2023-18l-2%202-1%202v1c-2%200-10%2010-10%2012l1%201c2-2%201%201-3%204l-2%204%203-2%202-1-4%204-4%205%206%203%204%203-6-3-6-2a18426%2018426%200%2000-58%2056l-2-1%201%202v2h-2l-3%201%202%201h1l-1%201h-3v1c1%200%201%201-1%202h-1c1-3%200-2-3%201l-1%203v1h-2v3h-2c-1-1-8%206-21%2019L0%20712v38h348l-1-3-2-6-1-3c1-1%206%209%206%2011l185%201c176%200%20185%200%20185-2a511%20511%200%20000-12c2%2012%203%2014%205%2014s3-3%201-7l-1-8-1-7%201%204%203%2012v6h37l-1-39a7138%207138%200%20013-283c1-3%203-2%204%202%201%202%201%202%201%200s0-2%202-1l2%207-1%204a4344%204344%200%20013%20186l1%2097%201%2027h35l35-1a244%20244%200%2000-6-27l1%201a755%20755%200%20017%2023c1%204%201%204%205%204h3l-1-4-1-6-8-29a187%20187%200%200110%2032l2%207h44l-5-20-6-28c-3-12-3-20%200-20%202%201%202%200%202-1l1-4c2-2%202-2%203%200%202%203%207%2020%2011%2040l5%2023%202%2010h282V0h-99c-97%200-98%200-97%202l-1%202-1-2c0-3-35-3-35%200h-1c0-2-1-2-15-2-15%200-15%200-18%203l-2%201%202-2c1-2-2-2-25-2-27%200-33%201-23%203h-3l-15-1c-4-2-9-2-10-1l-2%202V1c1-1-46-1-427-1H0v36m953-22l20%204a1037%201037%200%2001-20-4m211%206h-8c-9%200-10%201-9%206%200%204-1%207-4%2013l-1%203c1%201%204-3%204-6l2-4%201-5v-5h6c7%200%208%201%206%207l1%203%201-5c0-4%200-4%202-4l7%202c3%200%204%200%202%201-3%203%201%204%208%204%205%200%2010%200%2013%202%204%202%205%202%205%201l-2-1-2-1c0-1%201-2%202-1%202%200%202%200%201-1v-1c3-1-1-2-10-3-8%200-29-4-22-4v-1h-3m-108%2016a194%20194%200%200166%2027c0-3-15-12-26-16l-3-2v-1h-4l-2-1a2969%202969%200%2001-31-7M823%2046c-8%203-12%204-24%201l-3%201%204%201%204%201-3%201-6-1c-1%200-2%200-1-1%200-1-1-2-4-1h-8l-4%201%203%201h2l-3%203c-4%204-9%2014-8%2017%200%202%200%202-1%201l-1%201h-1l-3-2c-1-1-1-1-2%201-1%201-1%201-1-1l2-8%202-5c-1-1-5%209-5%2011%200%204-6%207-7%204h-1l-2%204-2%204-1%205-2%206-1%202%202-2c1-2%201-2%201%200v1c1-1%201-1%201%202l-2%204c-1%201-1%201-1-2%201-5%200-2-3%206-2%205-2%207-1%208%202%202%204%200%206-5a3109%203109%200%20016-23c-2-2%203-9%205-7%202%201%201%2022-1%2024l-1%207c0%205%200%205%202%205%204%200%204%200%204-9l3-11c2-4%201-9-1-9-2%201-3-4-1-7%202-1%206-2%204%200l-1%205v3l1-4%202-2c0%202%201%202%202%202%203-1%204%202%206%2020l2%204%201%204%201%204%201-3c0-2%200-2%202-1%202%202%204%200%202-2s-6-9-6-13v-2h1c1%200-2-6-4-7v-4c2%200%203-4%202-10-1-4-1-5-1-2%200%205%200%205-2%208-1%202-2%202-3%200v-4c-2-5%206-19%2010-19l2-1h6c10%202%2038-1%2045-4%203-2%202-2-8%201l-8%201c-3%200-3%200%202-3l6-3-7%203m332-2l-4%207c-4%207-7%2011-11%2013-5%202-5%202-4%200v-4c-1-2-1-2%202-5%202-4%203-7%201-7l-3%204c-2%205-2%205-5%204s-4-1-1%201l2%202-2%202c-3%204-8%206-9%204-1-1-2-1-6%201-3%202-8%204-11%204l-6%203c-1%202%202%202%205%201l5-2%209-3%208-2c1%201-2%202-5%203l-6%203c1%201%209-1%2013-4l3-1c2%201%2013-3%2016-6l8-12%202-4c2-3%201-4-1-2M805%2090l1%201%203%203%202%204-1%207-2%207-3-3c-3-2-5-2-5%200l4%205a232%20232%200%200147%2088%20443%20443%200%20018%2015l1-1v-3c-1-1-1-1-1%201h-1l-1-3h1c3%204%201-3-3-11l-6-13c-1-6-5-14-12-28-5-11-7-14-19-32-7-9-7-10-7-15%200-4%202-11%202-7l1%202v2c-1%201%200%202%205%208l7%207c2%200%201-2-3-6l-6-6-2-3%202%201c2%200%202%200-1-3-3-4-4-7-2-6l1%202%201%201%205%203c3%202%204%202%205%201%202-1%205%201%2020%2013a885%20885%200%200057%2042c0-1-2-3-5-4l-8-5-8-6-8-6-10-8-6-7c0-2%200-2-1-1s-3-1-10-6a253%20253%200%2000-13-12c3%202%205%201%205-2%200-2%200-2-1-1-1%202-2%201-5-1l-4-3-4-3-5-3c0-2-5-7-5-7l-1%204c1%205-1%206-3%203l-5-7-1%202m23%2021a351%20351%200%200129%2026l16%2015%207%206%2011%207c5%205%2012%209%2012%207l-5-4-6-4-8-6c-4-2-9-7-11-10l-9-7a488%20488%200%2001-37-32l1%202m-45%206l4%2014c4%2014%205%2036%205%2063a548%20548%200%2001-11%2096l2-1%201-2c2-2%204-15%207-41%202-25%203-23%203%205%200%2018%201%2026%202%2027l2-2c0-1%201-2%202-1v-21c-2-20-3-57-3-71a155%20155%200%2000-13-69l-1%203m235%204l9%208%206%205%202%201%209%202%2011%202c5%200%2011%203%208%205-1%201%201%202%204%202l7%203%206%202c1%200-2-3-6-4-4-2-5-3-4-4l-1-2-1%201h-2c-3-2-2-3%202-3l8-3c5-2%204-3-1-1-4%202-12%203-13%202-3-2-7-2-6-1%201%205-24-4-29-10l-1-1-6-4c-6-5-8-5-2%200m-45-1h-1c-2%200-2%200-2%205%200%206%200%206-5%204-5-3-6-2-2%200l4%202c1%200%202%201%202%203l1%201c1-2%202-2%206-2%205%200%205%200%202-1-6-1-7-2-6-5%200-3%200-3%205-1l8%203c5%202%208%204%2023%2021l4%204c0-1-6-9-16-19l-2-3h4l6%201c1%202%202%201%201%200%200-2-7-3-12-3l-3-2c-1-2-2-2-2-1-1%202-8-1-12-4l-1-2%202-1-2-1-2%201m-166%2022l3%2013a389%20389%200%200116%2098l1-1c2-2%201-23-2-41l-3-19c-3-19-11-49-14-50h-1m-266%2039l-15%2013c-8%209-26%2023-28%2023l-14%2011a19938%2019938%200%2001-141%20110c0%202%201%203%202%203l1%201%202%202c2%200%2011%208%2011%209l-5%207c-3%204-5%206-5%208l-1%204-1%202c0%202%202%200%2010-8%208-7%2010-7%209%200h2v1l1%201v1h1l3%206%2016%2026%206%207c1%200-5-13-12-22a312%20312%200%2001-15-24l-2-3%2014-14a10939%2010939%200%200193-91%20527692%20527692%200%200075-76c4-5%200-3-7%203m-50%2046a1061%201061%200%2000-56%2047%203198%203198%200%2000-82%2068l4%206%204%204%203-3a2058%202058%200%200067-63l27-26a1807%201807%200%200133-33m-57%204a907%20907%200%2001-69%2043l-10%207h-1a118%20118%200%2000-22%2014c-2%200-8%204-7%205l-4%204c-4%204-5%206-1%206%203%200%2016-6%2016-7l1-1%204-2c2-2%204-3%205-2v-1c0-2%202-3%205-3l2-2%204-2%201-1%2010-7a1544%201544%200%200079-60l-13%209m-270%206l-3%209-6%2013-2%204-1%203a175%20175%200%2001-15%2035%20242%20242%200%2001-15%2032%20159%20159%200%2001-10%2020l-4%208-13%2026a495%20495%200%200133-60l4-6c-1-1%201-4%202-7l5-10c2-4%203-5%206-6%203-2%203-2%201-2-3%200-4%200-1-4l3-9%204-9%203-7%202-4%202-6%202-3%201-3%202-5%201-3%201-6v-5l-2%205m705-3l1%203%201%203c-1%200-2-1-2-3-3-5-3-3-1%203l2%207v3l9%2019a2418%202418%200%200071%20147c5%208%207%2010%2010%2010l4%201c2%201%2010%200%2014-3%2011-6%2028-6%2039-1l8%203%2047%2023a375%20375%200%2000105%2034%20398%20398%200%2001-74-24l12%205%2014%205%208%201a256%20256%200%200060%2013c3%200%203%200%203-3s-1-4-10-3c-4%200-6%200-9-3-4-2-10-4-20-5l-5-2-6-1-5-1-6-2a226%20226%200%2001-34-11h-1l-2-1-34-16c-58-29-71-32-95-20-5%203-9%201-12-3l-3-5-2-4a5376%205376%200%2000-60-115%201208%201208%200%2000-27-54m-371%202v1l1%201c-1%201%200%203%201%205l2%204v4c10%2016%2014%2023%2014%2026l-11%2012c-7%207-10%2011-9%2012l-2%201c-2-1-3%200-2%202l-2%202c-2%201-3%201-2%202%200%202-4%207-6%207v1l-2%203c-2%200-2%201-2%202%200%202%200%202-2%202h-1l-1%202-1%201c1%202-1%204-3%204l-1%201c0%203%204%202%206-2l8-9%205-5%203-4%204-5%2013-15%202-3c-1%200%201-3%205-6l1-3c1-3%204-1%205%202l4%209a335%20335%200%200120%2037c1-1%201-1%201%201-1%202%204%2017%205%2014h1v4c1%205%202%207%203%207l-4%203a594%20594%200%2001-41%2024c-9%206-11%209-3%205l5-2%201-1h1l1-1%207-5a546%20546%200%200034-18l1%201v2h2c1-1%201%200%201%202v1h2v1l-2%202%201%201c1-1%204%200%203%202l1%201%201%202%201%203%202%205%203%205%201%203%202%204%204%206%203%206v2l1%201%204%206%204%207%201%201a342%20342%200%200025%2045h-3c-3%200-2%201%203%201%203%201%204%201%203%203%200%202%200%202%201%201s1-1%201%202c0%202%200%202%201%201s1-1%201%201v1h1l2%202c2%200%201-1-2-6l-2-4-1-2-4-5a987%20987%200%2000-22-39l-16-33a74%2074%200%2000-12-21h2l1-1-2-1-1-2v-1l-1-1-1-2-1-3-1-3c-3-1%202-5%2014-13l22-14-12%207a669%20669%200%2001-20%2011c-5%204-6%204-7%201l-1-2v-3l-2-3v-2l-1-1-1-2-4-12-2-3a326%20326%200%2000-37-65c-14-22-14-21-15-18m106%206l5%208c5%207%206%2010%204%208l-1%202c1%202%201%202-1%202-2-1-3%201%200%204%201%203%203%203%203%200s2-2%205%203l3%203h1v1l-1%202h3c-1%202%205%2013%207%2015l2%203c1%202%201%202%202%200%201-1%201-1%201%201-1%202%200%202%201%202%200-1%201-1%200%200l1%201c3%200%202%204-2%207-5%204-5%204-9-3a215%20215%200%2000-18-25%2089%2089%200%2000-7-10l-15-16c0%201%205%209%207%2010l2%203%203%204%202%202%203%205a341%20341%200%200125%2034c0%201-4%204-13%209l-17%2011%2015-8%2016-9c1%200%205%205%205%207s1%203%203%203%204%203%203%204l1%202v1c-1%201-1%201%201%201l4%206c3%205%203%205%201%207-1%202-1%202%201%202%202-1%202%200%204%203l2%205a516%20516%200%200030%2057%20290%20290%200%200112%2021%20297%20297%200%200115%2030c6%2013%2015%2021%2022%2021%203%200%203%200%202-3l-5-4c-4-2-10-9-14-15a868%20868%200%2000-29-56l-6-11a210%20210%200%2000-20-35c-1%200-1-2%201-4%201-1%201-1%202%201l1%202c2%200%200-6-2-9-3-4-4-9-3-11l10-6%208-6-10%205c-10%206-11%207-11%205l-3-8c-2-4-4-8-3-9l-2-2c-1%200-5-7-5-12-1-1%200-2%201-3%203%200%2010-5%209-6l-6%203c-7%204-7%204-11-4-7-13-35-54-35-51m476%2019v10c1%206-25%2015-45%2015-6%200-8%201-5%203h19l-3-1c-3%200-3%200%201-1%2019-4%2023-5%2032-10%203-3%204-3%203-5l-1-10-1-8v7m-138%201l10%208%203%203v1l10%204c11%205%2017%207%2029%208%2016%200%2022%201%2020%202v1l3%202%202%202%204%202c2%201%202%201%202-1l-2-3-2-3-2-3c-1-1-1-1%204-1l9-3%203-1h-4l-14%202c-8%201-9%201-15-1-8-3-18-10-25-16-6-5-8-6-7-3l1%201%206%204c8%208%2010%209%2019%2013l6%204c0%201-20-1-27-4-9-3-23-12-31-19l-6-5%204%206m-842%202l-2%206-4%208-3%208-2%202-1%201-2%208a766%20766%200%2000-11%2022%20430%20430%200%2001-25%2050%20957%20957%200%2001-24%2045%20980%20980%200%200074-150m728-1c-2%202-2%204-2%2016a1834%201834%200%200011%20121v5h-4c-5%200-12%202-13%204-2%203-3-1-5-16a24752%2024752%200%2000-17-105c-3-1-2%2015%204%2079l4%2043c1%2010%203%2013%2011%2012l6-1c1-1%208-5%2011-5%204%200%206%202%206%207l10%2050c2%207%208%2015%2011%2015l-2-18a25460%2025460%200%2000-9-47l11%208%2015%209c4%203%208%206%207%207a139%20139%200%200032%2024c12%208%2029%2016%2068%2032a592%20592%200%200155%2022l-12-7c-8-4-6-5%203-2%2010%205%2013%207%2013%2012%201%204%201%206%207%2012s9%2011%208%2013h1c2-1%202-1%202%201a309%20309%200%200122%2089%202165%202165%200%20006%2026l-2-13%209%2049%207%2033-1-8a436%20436%200%2001-5-49%20355%20355%200%200013%2059%203197%203197%200%2000-26-156%20236%20236%200%20018%2034l3%2010%202%2010-5-35-4-21-1-2-1-2-1-7c0-5%200-5-1-3s-1%201-1-2l-1-9a71%2071%200%2000-11-18c0-4-14-16-16-14-1%201-2%200-5-1l-5-2c-2%200-8-5-6-5l2-1c4-4-15-12-74-34-23-9-47-22-64-35l-15-9c-3-1-5-2-8-6l-9-10a138%20138%200%2000-23-14%201284%201284%200%2000-12-99l-5-47-2%201m-47%2040c-3%203-5%2013-7%2038l-3%2019-3%2042c0%207%202%2013%203%2011%201-1%201-1%201%201l2%202a845%20845%200%20018-92l2-20v-3l-3%202m-141%204v2h-3c-3-2-4%200-1%204%203%206%205%208%207%207s3%200%201%202l1%202v-1l1-2%201%201%202-1c1-2%201-5-1-4l-1-1-1-1c-1%201-1%200-1-2h1l1-1-2-1c-1%201-1%200-1-2v-1c0%202-2%201-1%200%200-2-2-3-3-1m-336%209h-3l-1-1c-2%200-3%202-1%202%201%201%200%201-1%201-1-1-4%200-5%201-3%202-3%202-1%202l-1%202c-3%202-5%203-3%201l-1-1-1%201v2h-4l-6%204c-4%203-6%204-5%205l-2%202c-2%202-4%202-4%201s-5%201-7%203l-4%202-8%206-5%203-2%201h3c2%200%202%200%201%201l-3%201-6-2-6-3c-4-2-21%200-20%202l-2%203c-5%204-11%2015-8%2015l1-1%201-1h1l2-1c2%200-3%204-6%205l-3%203-3%203c-1%200-2%201-1%202%200%201-2%202-2%200-1-1-4%200-4%202h2c2-2%202-1-1%202l-1%204-2%202-3%201-8%204%201-2v-1l-2%201c-1%202-8%206-13%208l-5%202h9l3%201h-4l-3%201-5%204c-5%203-6%205-4%205l4-3%204-2c0%201-4%206-9%208l-3%201h-1v1c1%201%201%201-1%202l-3%201-2%201-6%204-43%2028c-14%209-18%2012-19%2015-1%202%201%203%207%201a334%20334%200%200050-29c-3%203%200%202%204%200s4-3%202-4c-1-1-1-1%203-4l5-3%204-1h5c1-2%2023-16%2026-16s3%200-1%207l-3%207c0%204-7%2014-13%2019l-6%206%208-5c2-2%202-2%203-1s-9%2011-10%2011l-8%206-26%2020c-11%209-15%2013-13%2013l2-1%201-1v1c-2%202-3%204-1%204l4-1c3-3%204-2%201%200-2%203-3%205-1%203h3l14-11a192%20192%200%200119-16c3-3%203-3%205-1%201%201%201%201%201-1l4-5a138%20138%200%20009-8h1l3-2a122%20122%200%200015-12l4-3a80%2080%200%200113-11%20726%20726%200%200153-41v-1h1l1%201v-2c0-1%200-2%202-2%202-1%207%201%207%202v1l1%201c0%202-8%208-9%207l-1%201-12%2011a3755%203755%200%2000-126%20103c-2%203%201%206%204%204h4l1%201h5l-3%202-2%206%2021-18c4-3%207-5%208-4l1-1%203-5%209-7c19-16%2023-21%2018-20l-2%201%202-2a1615%201615%200%200165-50c-1%200%201-3%202-2l6-4%206-4%201-1%202-1%201-1c-1-1%204-5%205-5l2%203%202%202h1c-1%201%200%202%201%203l5%207%201%201v2l-5%2015%203-6c3-7%204-8%209-4s4%200-2-7a119%20119%200%2000-8-10l-5-6-2-3%2010-7%2011-9c4-3%203-2-2%2011l-4%2014%202-2%202-3%201-5%203-5%201-4%201-2%202-4c0-4%201-4%207-11s8-14%204-13c-2%201-2%201-1-1l-1-2h-2l1-1%201-1%201-2v-1l1-2v-3c0-3%200-3-3%202l-3%209a5389%205389%200%2000-40%2032l-3-4c-2-3-2-3-1-4a1520%201520%200%200156-44l2-2h1c-2-2%203-4%206-3l3-1h1c4%200%204-2%200-3-3-1-7-1-10%201l-3%201c-2-1-15%209-42%2029-20%2015-22%2017-22%2015l1-1%203-2a1537%201537%200%20011-4c-7%206-7%206-12%201-3-4-3-4-1-6a2401%202401%200%200045-31l8-5%202-3%203-4%203-4c0-1-5-1-8%201m-78%2039l-3%201c-7%200-11%201-15%204-5%204-6%207-2%204l5-1c1%201%201%201-1%203-6%204-17%2015-15%2015l8-4%203-1c3%201%2010-3%2010-5h2v-1h1c2%200%202%200%201-1l1-1h2l8-5c4-3%205-4%203-4-2%201-3%200-3-1%201%200%200-2-2-2-2-2-3-2-3-1m15%2012c0%202%200%203-4%206-3%203-3%203-1%203h2l3%201c3%201%202%201-1%201h-7c-1-2-7%203-14%2010l-10%209-2%203-2%201v1c1%201%201%201-1%201l-2%201-1%203v2l-1%201h-1c1%201%200%201-2%201-1%200-2%200-1%201%202%201%201%202-2%201l-3%201%204%201c5%200%206%200%2015-7a574%20574%200%200041-35l-1-2v-1l-1-1h-2l-6-2m6%2016a758%20758%200%2001-35%2026l-11%209c-2%200-19%2014-23%2018l-3%202h-1v1c2%201%208-3%2013-7l7-6%204-3%204-3c5-3%206-5%205-5l1-1a316%20316%200%200047-37l-8%206m-34%204a418%20418%200%2000-13%209c-6%205-8%206-8%205l-11%2011%201%201%201%201-2%201-2%201-2%206-2%205-1%201c-1-1-1%200-1%201l-1%203-1%203v2l12-9%204-3%201-1v-1l1-1v-2l2%201c1%201%202%200%204-1%202-3%202-4-2-2-1%201-2%201-2-1l-2-2c-3%200-2-1%201-4a946%20946%200%200123-24m185%2026c-1%201%202%207%203%206l1%203h1l1%201a234%20234%200%20019%2011c6%206%2013%2010%2014%209l-2-2-9-8c-9-9-9-10-12-15-3-4-6-6-6-5M71%20426l-8%2014c-11%2017-14%2022-12%2022l5-6%204-7%201-1%204-6%204-8%203-6%203-6-4%204m706%2013l4%209%201%203c0%203%202%208%207%2015%205%208%203%209-2%201-4-6-6-7-3-2%204%208%2011%2016%2015%2019%207%204%2020%209%2025%209%202%200%203%200%202%201h3c7%200%2013-3%2013-7%200-2%200-2-3-1l-3%201h-5c-3%200-3%200-2-3l3-4h2l2%201c2-1%202-4%200-3h-11c-9%201-10%202-9%205h-5c-4-2-10-8-14-14a18823%2018823%200%2000-20-30m-297%204c-15%206-34%207-44%203l-7-2c-1%202%201%203%208%205l5%202c-3%200%200%203%204%203%202%200%202%200%201-1v-1l3%201c2%201%208-1%208-2l2-1c1%201%205%200%209-2l8-1%201-1%205-3c5-2%203-3-3%200m-295%2048l-6%204c-3%204-6%206-7%206l-1%202-1%201h-2c0%202-5%206-7%206v1l-8%208c-10%2010-15%2015-13%2015%201%200%208-5%2020-17l7-5%205-4%2013-10%206-7v-2c2-2-2-1-6%202m450%202l1%204%202%204%201%204c2%201%203%204%2011%2019l4%206%204%205%203%206c2%201%201-2-2-8l-3-8-1-2-3-3a224%20224%200%2000-14-26l-1-1h-2m220%2010a1682%201682%200%200034%20162c1%200%202-2%202-5%200-2%200-2%202-1l2%201c1-2%200-18-2-26l-3-12a22536%2022536%200%2000-14-70c-7-34-12-50-16-50l-1-1-2-3-2-2v7M9%20516l-7%204-1%2012v13l2-4%205-11c3-5%204-8%203-8l1-3%205-8-8%205m771%2030l1%203%201%201%202%202v5h-1l1%202%201-1c0-3%203%202%2010%2015a437%20437%200%2000-15-28M33%20561l-3%203-15%2012-14%2010v9c0%2010%200%2010%204%207l3-2a299%20299%200%200038-32c0-2-4-4-9-4l-2-1c1-2-1-3-2-2m20%2014a3432%203432%200%2001-49%2038c-3%202-3%202-3%208l1%207v2l-1%205c0%204%200%204%202%203%201-1%202-1%201-2s10-11%2023-22l5-5%2010-10c15-13%2025-22%2023-22l-3%203c-2%202-5%203-4%201%201-1%200-1%200%200-2%200-2%201-2%203l-1%201c-2-1-7%204-6%206l-3%202-2%201v1h-3l-2%202%201%201h1l-2%201-1%201-3%203-2%201h-1v2h-2v2c-2-1-3%200-4%201l-3%201%206-6c5-4%206-6%205-6v-1c2%201%202%201%202-1v-3c1-1%204-2%204%200-2%202%200%201%203-1l1-3v-1l2-2v2c-2%202%200%201%203-1%202-2%202-3%201-3v-3h3c0%201%201%201%202-1%202-1%202-2%201-2v-2c2-3%201-3-3-1m5%2016a12398%2012398%200%2000-53%2047l-4%204v21l3-2c2-3%204-3%204-1H7v1l-1%201-2%201-1%201v1c-2%201-3%2023-1%2024v1l-1%205v6l3-4a6828%206828%200%2001102-102l-2-1h-2c-3-3-12-8-14-8l-2%201a18142%2018142%200%2001-67%2059l55-53%2010-9-4-2c-7-4-8-4-22%209m623%200c-1%201%203%206%205%206v1c-1%200%200%204%204%2014l5%2012%201%201c-2%202%205%2023%207%2023%202%201%202%200%201-2l1-3-1-2-2-1v-1c0-3%200-3-1-2l-2-1h1l1-1-1-1-2-1h1l1-2a47654%2047654%200%2001-8-19v-1c0-3%200-3-1-2v-2l-1-3c-1%201-1%200-1-1l-1-2v-2c1-2-5-10-7-8m121%2018l5%2012%204%2011%202%204%2010%2025a17880%2017880%200%2000-8-26l3-2%203-1h-3c-3%200-4%200-5-4l-10-20c-1-2-1-2-1%201m-601%2029l4%202%204%202%203%201a154%20154%200%200132%2013l4%202%205%201h4l-3-1a575%20575%200%2000-53-20m504%2012l-1%202v4h1v8c0%202%200%202%202%201%201-2%201-2%201%202v2c1-2%201-2%201%201-1%203%202%2017%203%2017l1%203v3l1-3c1-2%201-1%201%202v2c1-2%201-2%201%202v3c0%203%200%203%201%202s1-1%201%201v3l1%204%202%204c1-1-1-11-7-33-5-21-9-33-9-30m-440%2014l3%202%201%202h2c2%200%202%200%201%201-3%201-1%202%203%202%202%200%203%200%202%201s3%203%205%202c2%200%202%200%201%201%200%202%200%202%201%201l12%206a8003%208003%200%2001-25-18h-6m-231%209l-5%204-1%202-1%201-7%206c0%202-5%206-7%206l-1%202-1%201h-1l-3%204-3%203-1%201-2%205a325%20325%200%200033-35'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/10575792891a36109ffb20fc5845dcbe/21095/banner.jpg","srcSet":"/static/10575792891a36109ffb20fc5845dcbe/36b10/banner.jpg 300w,\n/static/10575792891a36109ffb20fc5845dcbe/88367/banner.jpg 600w,\n/static/10575792891a36109ffb20fc5845dcbe/21095/banner.jpg 1200w,\n/static/10575792891a36109ffb20fc5845dcbe/97ce3/banner.jpg 1800w,\n/static/10575792891a36109ffb20fc5845dcbe/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"}}}}}}},"pageContext":{}}}