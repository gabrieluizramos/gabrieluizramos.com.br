{"componentChunkName":"component---src-templates-post-article-index-js","path":"/debounce-e-throttle","result":{"data":{"markdownRemark":{"id":"c7f53283-09a6-5d9d-afd1-a18bafe09e53","html":"<p>Quando estamos escrevendo nossa aplica√ß√£o e lidando com intera√ß√µes em tela, nem sempre queremos que alguma a√ß√£o aconte√ßa logo de imediato, assim que um evento √© disparado. Principalmente quando essa a√ß√£o envolve alguma requisi√ß√£o HTTP para um servi√ßo externo.</p>\n<p>As t√©cnicas de <code class=\"language-text\">debounce</code> e <code class=\"language-text\">throttle</code> servem para adiar algum acontecimento dado um determinado tempo.</p>\n<h3 id=\"um-caso-de-uso-pratico-e-bem-comum\" style=\"position:relative;\"><a href=\"#um-caso-de-uso-pratico-e-bem-comum\" aria-label=\"um caso de uso pratico e bem comum permalink\" class=\"anchor before\">#</a>Um caso de uso pr√°tico e bem comum</h3>\n<p>Um cen√°rio bem comum √© na busca de produtos dentro de um e-commerce.</p>\n<p>Quando voc√™ entra em um site para comprar um produto, voc√™ vai interagir com alguma barra de busca para encontrar o que est√° pesquisando. Em muitos cen√°rios, dependendo da palavra ou dos trechos que voc√™ escreveu, algumas sugest√µes de busca aparecem. Bem comum, n√©?</p>\n<p>O que t√° acontecendo nos bastidores dessa pesquisa com sugest√µes √© que, muito provavelmente, existe toda uma aplica√ß√£o com um motor de busca baseada rodando em algum servidor e a aplica√ß√£o que est√° rodando no lado do cliente faz uma requisi√ß√£o para essa aplica√ß√£o com o termo digitado que, por sua vez, responde com algumas sugest√µes a serem exibidas.</p>\n<p>No entanto, se essa a√ß√£o fosse disparada a cada letra que digitamos na barra de busca, poder√≠amos ter uma sequ√™ncia de requisi√ß√µes sendo feitas de forma desnecess√°ria.</p>\n<p>Vamos imaginar que assim que uma letra √© digitada no campo de busca essa a√ß√£o ocorra:</p>\n<ul>\n<li>Se voc√™ digitar <code class=\"language-text\">ps5</code> essa a√ß√£o ser√° feita 3 vezes;</li>\n<li>Se voc√™ digita (<code class=\"language-text\">jogos de ps5</code>) essa a√ß√£o ser√° feita 12 vezes.</li>\n</ul>\n<p>Como nossa a√ß√£o est√° sendo disparada a cada letra digitada, a requisi√ß√£o ao servidor ser√° realizada a mesma quantidade de vezes que o usu√°rio teclar na barra de busca.</p>\n<p>Al√©m de sobrecarregar nosso servi√ßo com chamadas desnecessariamente, a aplica√ß√£o que roda no navegador provavelmente ir√° atualizar v√°rias vezes tamb√©m com alguns resultados de busca que n√£o s√£o interessantes para o usu√°rio. Ambas as aplica√ß√µes est√£o tendo seu desempenho prejudicado desnecessariamente.</p>\n<p>Al√©m disso, se voc√™ est√° pesquisando por <code class=\"language-text\">ps5</code> √© prov√°vel que s√≥ queira ver produtos relacionado a esse termo, e n√£o produtos relacionados √† um termo <code class=\"language-text\">p</code> ou <code class=\"language-text\">ps</code> (enquanto digita), n√£o acha?</p>\n<p>Essa a√ß√£o poderia ser adiada usando <code class=\"language-text\">debounce</code> ou <code class=\"language-text\">throttle</code> para que essa pesquisa s√≥ fosse feita ap√≥s um certo per√≠odo de tempo em que o campo de busca foi preenchido, o que √© bem melhor pra todo mundo, pra experi√™ncia de quem est√° comprando e para as duas aplica√ß√µes (no cliente e no servidor)!</p>\n<h3 id=\"como-funcionam-essas-tecnicas\" style=\"position:relative;\"><a href=\"#como-funcionam-essas-tecnicas\" aria-label=\"como funcionam essas tecnicas permalink\" class=\"anchor before\">#</a>Como funcionam essas t√©cnicas?</h3>\n<p>Ambas as t√©cnicas funcionam de maneira parecida e isso √© bem confuso de entender, mas vamos pensar em um cen√°rio mais interessante: voc√™ √© uma crian√ßa e est√° viajando com seus pais, voc√™s est√£o indo de carro passar as f√©rias üèù em algum lugar (deixe sua imagina√ß√£o fluir aqui).</p>\n<p>Como toda crian√ßa, voc√™ n√£o gosta de ficar esperando e est√° super ansiosa pra chegar no destino e de 5 em 5 minutos voc√™ faz aquela pergunta que todo mundo j√° vez na vida: \"tamo chegando?\".</p>\n<p>A cada vez que voc√™ pergunta, seus pais muito provavelmente v√£o responder \"sim\" ou \"n√£o\" <del>e talvez ignorar voc√™ depois de um tempo</del>.</p>\n<p>Inevitavelmente voc√™s v√£o chegar no destino e ficar perguntando n√£o vai mudar muita coisa, certo?</p>\n<p>Se \"chegar no destino\" fosse uma a√ß√£o, nesse momento, ela estaria sofrendo <code class=\"language-text\">throttle</code>. N√£o importa quantas vezes voc√™ pergunte, ela s√≥ ser√° realizada quando o trajeto da viagem for conclu√≠do e perguntar n√£o vai fazer voc√™ chegar mais r√°pido.</p>\n<p>Utilizando <code class=\"language-text\">throttling</code>, n√£o importa quantas vezes voc√™ tente realizar uma a√ß√£o, ela s√≥ ser√° realizada ao final de um determinado tempo.</p>\n<p>Agora vamos pensar em um outro cen√°rio, onde seus pais querem zoar voc√™ e, a cada vez que voc√™ pergunta se est√° chegando, eles d√£o uma volta a mais em alguma quadra. Por fim, voc√™s n√£o v√£o chegar no destino at√© que voc√™ pare de perguntar. Nesse caso, essa a√ß√£o estaria sofrendo <code class=\"language-text\">debounce</code>. Dessa vez, perguntar faz com que a chegada ao destino fique cada vez mais atrasada.</p>\n<p>Utilizando <code class=\"language-text\">debounce</code>, a cada vez que voc√™ tenta realizar uma a√ß√£o, ela ser√° adiada por mais um tempo, at√© que n√£o haja mais tentativa e ela seja, por fim, executada.</p>\n<p>O <a href=\"https://www.telerik.com/blogs/debouncing-and-throttling-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post no site Telerik, escrito por Rupesh Mishra</a> tamb√©m tem uma √≥tima analogia com bolo que pode complementar.</p>\n<h3 id=\"um-pequeno-exemplo-com-codigo\" style=\"position:relative;\"><a href=\"#um-pequeno-exemplo-com-codigo\" aria-label=\"um pequeno exemplo com codigo permalink\" class=\"anchor before\">#</a>Um pequeno exemplo com c√≥digo</h3>\n<h4 id=\"criando-nossa-acao-principal\" style=\"position:relative;\"><a href=\"#criando-nossa-acao-principal\" aria-label=\"criando nossa acao principal permalink\" class=\"anchor before\">#</a>Criando nossa a√ß√£o principal</h4>\n<p>Vamos voltar ao nosso primeiro exemplo do e-commerce com nossa barra de busca. Vamos imaginar que nossa simplesmente exibe um <code class=\"language-text\">log</code> na tela como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a√ß√£o realizada, pesquisando...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como sabemos que iremos trabalhar para adiar essa a√ß√£o, vamos criar uma vari√°vel de <code class=\"language-text\">tempo</code>. Iremos adiar sua execu√ß√£o em 3 segundos, portanto, <code class=\"language-text\">3000</code> milissegundos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a√ß√£o realizada, pesquisando...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tempo <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"criando-nossas-funcoes-atrasadoras\" style=\"position:relative;\"><a href=\"#criando-nossas-funcoes-atrasadoras\" aria-label=\"criando nossas funcoes atrasadoras permalink\" class=\"anchor before\">#</a>Criando nossas fun√ß√µes \"atrasadoras\"</h4>\n<p>J√° sabemos que vamos trabalhar com <code class=\"language-text\">debounce</code> e <code class=\"language-text\">throttle</code>. Para trabalhar com tempo e adiar alguma execu√ß√£o utilizaremos o <code class=\"language-text\">setTimeout</code>.</p>\n<p>Para deixar as coisas mais informais, vamos chamar essas fun√ß√µes de \"atrasadoras\", tudo bem?</p>\n<h5 id=\"debounce\" style=\"position:relative;\"><a href=\"#debounce\" aria-label=\"debounce permalink\" class=\"anchor before\">#</a>Debounce</h5>\n<p>No caso do <code class=\"language-text\">debounce</code> precisamos receber uma a√ß√£o e um determinado tempo como par√¢metro e, como essa a√ß√£o dever√° ficar se repetindo, retornaremos uma nova fun√ß√£o:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Precisamos ter uma maneira de controlar esse comportamento onde, a cada vez que a fun√ß√£o de retorno √© chamada, seu tempo √© reiniciado e ela s√≥ ser√° executada uma √∫nica vez ao final de todas as tentativas. Vamos criar uma vari√°vel <code class=\"language-text\">debounced</code> que ser√° usada para isso:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> debounced<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Iremos executar a fun√ß√£o <code class=\"language-text\">setTimeout</code> passando como argumento nosso par√¢metros <code class=\"language-text\">fn</code> e <code class=\"language-text\">tempo</code>. Essa nova vari√°vel <code class=\"language-text\">debounced</code> ir√° armazenar o retorno do temporizador que a fun√ß√£o <code class=\"language-text\">setTimeout</code> retorna:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> debounced<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    debounced <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, n√£o podemos esquecer de limpar nosso temporizador a cada vez que uma tentativa de executar a a√ß√£o <code class=\"language-text\">fn</code> √© realizada (simulando aquela volta extra na quadra a cada vez que voc√™ perguntava \"estamos chegando?\"). Podemos fazer isso com a fun√ß√£o <code class=\"language-text\">clearTimeout</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> debounced<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>debounced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    debounced <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"throttle\" style=\"position:relative;\"><a href=\"#throttle\" aria-label=\"throttle permalink\" class=\"anchor before\">#</a>Throttle</h5>\n<p>J√° essa fun√ß√£o ser√° ainda mais simples.</p>\n<p>Como agora a a√ß√£o ser√° realizada independente de quantas vezes √© chamada, s√≥ precisaremos usar nosso <code class=\"language-text\">setTimeout</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">throttle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Vamos manter o retorno de uma fun√ß√£o para que possamos continuar com a \"tentativa\" de cham√°-la (como se fosse a constante pergunta \"estamos chegando\"):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">throttle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// n√£o precisamos fazer nada</span>\n    <span class=\"token comment\">// mas vamos retornar uma fun√ß√£o pra manter</span>\n    <span class=\"token comment\">// o mesmo racioc√≠nio do nosso outro exemplo</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"juntando-tudo-e-perguntando-ja-chegamos-diversas-vezes\" style=\"position:relative;\"><a href=\"#juntando-tudo-e-perguntando-ja-chegamos-diversas-vezes\" aria-label=\"juntando tudo e perguntando ja chegamos diversas vezes permalink\" class=\"anchor before\">#</a>Juntando tudo e perguntando \"j√° chegamos?\" diversas vezes</h4>\n<p>Podemos criar mais duas fun√ß√µes e adicionar alguns logs extras, apenas pra deixar nosso exemplo mais claro.</p>\n<p>Podemos at√© colocar mais um <code class=\"language-text\">setTimeout</code> para mostrar a diferen√ßa do <code class=\"language-text\">debounce</code> e do <code class=\"language-text\">throttle</code>.</p>\n<p>Vamos criar uma fun√ß√£o <code class=\"language-text\">executaAcaoComDebounce</code> que ir√° tentar executar a nossa acao \"atrasada\" diversas vezes.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">executaAcaoComDebounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// um log qualquer de in√≠cio</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando execu√ß√£o com debounce'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// criamos nossa fun√ß√£o baseada na a√ß√£o principal com debounce</span>\n  <span class=\"token keyword\">const</span> debounced <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>acao<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// tentamos executar a fun√ß√£o varias vezes</span>\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// tentamos executar ap√≥s o tempo de 2 segundos (3 segundos - 1 segundo)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout tentando chamar a fun√ß√£o debounced'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> tempo <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora vamos fazer o mesmo exemplo, mas chamado <code class=\"language-text\">executaAcaoComThrottle</code>, fazendo as devidas modifica√ß√µes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">executaAcaoComThrottling</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// um log qualquer de in√≠cio</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando execu√ß√£o com throttling'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// criamos nossa fun√ß√£o baseada na a√ß√£o principal com throttle</span>\n  <span class=\"token keyword\">const</span> throttled <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>acao<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// tentamos executar a fun√ß√£o varias vezes</span>\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// tentamos executar ap√≥s o tempo de 2 segundos (3 segundos - 1 segundo)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout tentando chamar a fun√ß√£o throttled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> tempo <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, basta executar qualquer uma dessas duas fun√ß√µes e ver o resultado!</p>\n<p>Se voc√™ notar, como o <code class=\"language-text\">debounce</code> atrasa a execu√ß√£o da a√ß√£o, ele s√≥ ser√° executado 3 segundos ap√≥s <strong>todas</strong> as tentativas terminarem. J√° a vers√£o com <code class=\"language-text\">throttle</code>, ser√° executada ap√≥s 3 segundos, independente de quantas vezes tentamos e √© justamente por isso que nossa mensagem <code class=\"language-text\">a√ß√£o realizada, pesquisando...</code> aparecer√° antes/depois dependendo do exemplo que voc√™ estiver executando.</p>\n<h4 id=\"codigo-completo\" style=\"position:relative;\"><a href=\"#codigo-completo\" aria-label=\"codigo completo permalink\" class=\"anchor before\">#</a>C√≥digo completo</h4>\n<p>Para facilitar, o c√≥digo completo √© esse aqui:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// A√ß√£o principal</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">acao</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a√ß√£o realizada, pesquisando...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> tempo <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Fun√ß√µes atrasadoras</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> debounced<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>debounced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    debounced <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">throttle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> tempo</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A√ß√µes com tentativas</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">executaAcaoComDebounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando execu√ß√£o com debounce'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> debounced <span class=\"token operator\">=</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>acao<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout tentando chamar a fun√ß√£o debounced'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">debounced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> tempo <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">executaAcaoComThrottling</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando execu√ß√£o com throttling'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> throttled <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>acao<span class=\"token punctuation\">,</span> tempo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout tentando chamar a fun√ß√£o throttled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">throttled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> tempo <span class=\"token operator\">-</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","timeToRead":7,"frontmatter":{"date":"12/11/2021","path":"/debounce-e-throttle","title":"Debounce e Throttle","subtitle":"O que s√£o, para que servem e como funcionam essas t√©cnicas (ou padr√µes) parar adiar eventos","banner":{"author":"Kai Pilger","href":"https://unsplash.com/photos/1k3vsv7iIIc","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M440%208c0%209%201%2011%206%2011%203%200%203-1%203-11l-1-8h-8v8m584-6l1%207%202%2011a194%20194%200%20001%2017l1%2016c1%202%201%201%201-4v-7a2188%202188%200%200012%2063v8c-2%205-1%2014%201%2018%202%202%202%202%202%200-2-7-2-14-1-15%201-3%205%2020%203%2023-4%208-11%2016-13%2017-7%201-8%203-6%207%201%203%203%204%203%202%201-1%203%201%203%203l1%202-1%207c-3%207-2%2011%202%2012%204%200%202%204-4%206l-18%206-6%201c-3%200-4%201-5%203s-2%203-4%203h-2l-1%201c-4%200-9%202-9%204l-2%202v-2l-2-1-6%202-3%201-2%201-6%202-7%202c-4%200-8%202-8%204%200%201-2%202-4%201-2-2-7%200-6%201%200%202-8%204-10%203l-3%201c0%201-1%202-2%201l-2%201h-6a111%20111%200%2001-39%2011h-5l-2-1%201%202v1l-2%201c0%202-3%203-6%203l-5%201-9%203a742%20742%200%2000-47%2012h-3c-1%201%200%201%201%201l-1%201c-4%201-5%200-3-2%202-1%202-1%201-2-3-2-8%200-8%202l-5%203-9%202c-9%202-15%202-22%200-9-3-8-2-10-21-3-24-4-27-11-36-8-12-16-14-51-17l-30-4c-2%200-4-5-3-14%200-5-2-7-4-5h-3c-2-2-2-1-3%205s-4%209-5%204c-1-7-5-6-6%202l-1%206-72-7a793%20793%200%2001-89-11l-3-3-4-3c-2-2-4-3-4-1l-2%204c-3%204-4%204-28%201l-21-2c-6%200-7-1-8-8%200-7-1-9-4-7-2%200-2%202-2%205v6c0%201-2%202-5%202h-3l-1-7c0-7-1-10-4-8-2%200-3%203-3%209v5l-4-1-21-2c-26-3-35-1-44%207-8%207-9%209-9%2043a176%20176%200%2001-1%2034c2%201%204%20295%202%20300-2%204-2%206-2-96a149717%20149717%200%2000-3-263l-3%206c-3%206-3-3-2%20124a5192%205192%200%2001-1%20242c1%2010%204%2016%2013%2026%207%208%208%209%205%208l-1%202v3c-2-2-1%201%201%203l1%203v2h-2v1l1%208-1-1v16c-4%200%205%206%2011%208%203%200%204%202%204%2014%200%209%202%207-16%2025-10%2010-10%2011-6%2011%202%200%203%200%202%202l2%201c3%200%208-5%208-7s-4%200-6%202l-3%202%203-5%203-2h4c2%200%202%200%200-2-3-3%201-8%206-10%202%200%204-1%204-3s4-6%207-7c2-2%204-9%202-9l-5-9c-1-2%200-2%203-2l70%203-1%202c-3%202-5%207-6%2010l-5%203c-5%201-12%208-14%2013-2%204-4%206-6%206-7%200-13%209-11%2017l2%208c0%207%202%206%202-2%200-7%201-9%206-14l3-4c0-2%204-1%206%203%202%203%202%204%201%2010-1%208%200%2031%202%2034%201%202%203%201%206-3%203-3%201-28-1-31-7-7-6-20%203-28l5-5%202%203c3%206%205%205%206-3%200-6%201-8%205-13l2-5h28c3%200%204%201%204%202l1%2013c1%2016%203%2019%207%2010%201-3%202-5%201-14-1-12-1-12%2014-11l10%201-5%205c-4%203-5%206-7%2012l-4%209-1%207c0%204%200%205%201%202%200-5%202-8%203-7v2l-1%203c1%201%201%201%202-1l1-2v2l-1%203c-1%201-2%203-2%207l-2%2011c0%203%200%204%203%208l3%205%208%202c10%200%2016%201%2028%203l20%204c22%203%2024%204%2024%208l-1%208c-10%2010-8%2014%203%205l5-4c5-3%208-9%204-9v-1h6c5%201%206%201%209-1%204-3%205-3%2070%208%2037%206%2035%206%2035%208l-1%203c3-3%204-1%202%202l-2%204c1%201%205-4%206-7%200-3%202-3%2017%200l10%201v3l-1%203h221l2-6c2-8%204-9%205-1%202%207%202%207%207%207h5v-5l-1-8-1-3%207-2%2010-2c15-1%2020%200%2021%201a258%20258%200%20004%2019h13l2-5c2-4%203-5%206-7%206-3%209-5%209-7%200-3-3-2-6%200-1%202-4%202-8%203-7%200-10-2-11-7v-4l5-1c8-3%2053-13%2056-13h3l3%2013%205%2026c0%202%201%202%205%202%207%200%208-2%206-10a199%20199%200%2001-5-34%20101%20101%200%200131-7c1-1%201-1%203%201l5%202%2026-4c2%200%202%201%204%208l2%2013c0%204%201%205%205%2010%206%207%206%207%2014%206%2010-3%209-3%2011%205l2%209%2017%201h16V0h-176v2m-9%208c-2%203-5%205-6%205l-4%203c-2%206-8%2012-29%2033a10757%2010757%200%2000-95%2089l-6%201c-3-1-3-2-5%208a147%20147%200%2001-30%2030c0%204-13%2013-22%2015l-2%203-4%2018-1%207-1%203-2%204-1%202-1%207-1%208c-2%205-2%2010-1%2010v1l-1%201%202%201-2%201v1l30-8%208-5a505%20505%200%200147-45l11-10%2023-21a6878%206878%200%200161-56c13-9%2016-15%2020-35a1205%201205%200%200115-69c1-7%201-7-3-2m109%2035l-10%203c-18%203-26%205-26%208h3l7-1%209-2%2011-4%207-1c3-1%205-4%202-4l-3%201m-672%2077c-2%201-2%201-2%206%201%206%202%207%207%208%204%200%205-1%204-7-1-8-3-9-9-7m156%2029l1%201%201%206c-1%207%201%2012%204%2013%202%200%202%200%202-7a291%20291%200%2001-2-14c-2-2-6-1-6%201m432%2099c-19%205-21%205-23%203s-2-2-9-1l-13%204-7%203a931%20931%200%2000-108%2028%203693%203693%200%2000-70%2023c-5%205-13%209-15%209-3-2-5%200-6%205l1%206c2%204%202%208%200%2013-3%206-6%207-23%2011-2%200-4%205-3%209%200%203%200%204-2%206l-2%202%202%2020c3%2026%202%2024%207%2023a577%20577%200%200155-3c4%200%208-5%207-7-1-1-1-1-4%202l-4%203v-3l2-2%204-3c2-2%202-2%204-1l4%202%209%202%2016%202c12%201%2012%201%2014%206%203%204%203%204%203-1a286%20286%200%2001-3-14c-4-18-4-31-1-31l17-14c3-3%205-3%205%201%200%202-2%204-8%2010-10%209-10%2011-8%2023l2%2014c0%2010%207%2014%2012%208%204-4%209-7%2010-6%201%202-1%206-4%207-3%202-9%2010-9%2014%200%203%203%2012%205%2011v3c-1%201-9%205-10%204l-1%201-1%201-1-2h-1c-2%201%202%2024%204%2025%201%201%2012-10%2012-12l2-4c3-3%203-2%203%200s1%203%204%204l3%202-11%209c-11%207-12%2010-12%2018l9%2049%201%203%202-3%203-3%2010-7%2010-7c4%200%203%209-2%2013l-8%206c-8%205-8%207-4%2026%202%2014%203%2016%206%2016l10-3c5-3%207-4%208-3%202%202%201%204-5%2010s-7%209-5%2016c1%202%201%203-1%207-2%203-2%205-2%2012%200%2010-1%2011-6%2013-2%201-2%201-2%207l9%2049c1%201%2020-3%2022-4l5-1%2011-2a164%20164%200%200123-5l14-3%206-2%206-1%2028-6a460%20460%200%200136-9l4-2c2-1%204-2%205-1l2-3c1-2%202-3%204-3l11-4a495%20495%200%200119-7c-2%201-2%201-2-7%201-9-2-23-4-27-3-4-1-6%207-7%205-1%207-2%2011-5l4-3-3-12a971%20971%200%2001-12-62%205106%205106%200%2001-36-198l-9-40-2-9%201%207v8l-8%202c-9%202-8%202-14-8-4-7-5-8-4-10s0-10-1-11l-5%201m-53%2021l-10%208-4%205%201%209%2011%2063c3%2012%204%2018%206%2018l3-2c2-2%202-2%202-14l-1-16c-2-7-1-9%204-13%203-3%204-5%204-7-1-3-3-2-5%202-4%205-8%205-11%202-2-2-3-4-3-12l-3-14c-3-11-3-12%205-20%2011-11%2011-18%201-9m-59%2051a170%20170%200%2001-16%2013%202507%202507%200%20009%2062v7l4%2011%201%201c2%200%2010-7%2010-9l2-1c1-1%202-5%200-5s-6-6-6-8c-1-5%200-7%205-12l6-5%201-1%202-3c1-1%202-6%200-6-2-1-8%203-10%208-3%205-4%205-9%202-2-1-3-3-3-6l-4-20c-3-9%200-17%2010-22%204-3%208-7%208-10%201-4-1-3-10%204m-486%2033h4l2%201-4%201c-4-1-5%200-6%201l-1%202-1%201h2c2-1%206%201%206%203s-3%200-4-2c-1-1-1-1-1%201-2%203-4%205-5%204l-2%201v1c2%200%201%202-2%202-2%201-2%201-1%202%202%201-1%203-3%202l-2%201%202%201v2l-1%202-2%201-2-1v-2h-4l-3%201v1l-1-1-2-2c-6-1-6-1-5%201%200%203%200%203-3%202-2%200-2%200-1-2%202-1%202-1%200-1h-2l-1%201h-1v1l1%201%201%201h-1l-2-2h-3v1l1%201-2%201v-1l-1-1-1%201-2%202c-2%200-3%203-1%203s1%202-2%203l-2%202h2l3-1%202-2v5l-1%201h-1l-1-2-1%203c1%203-1%203-1%200-1-2-1-2-2-1l-1%205v2l-3%203v3l2%204c1%204%201%204-1%204h-4l-1%201%206%201h4l-3%201c-4%200-7%202-6%204%200%203%201%204%202%203l-1-2%202-2%204-2%203-1h2c0%203-1%205-2%205v-1l-1-1-2%202h-1l-2-1v2c2%201%202%201%200%201l2%201%204%202h-4l-3%201-1%201h-11l-2-2h2l2-1v-5l1%202%201%201%201-2c0-1%200-2%202-1l1-1-3-1-4-1%202-1c3%201%206-1%204-3-3-3-2-3%201-3h3l-2-1c-2%200-6-6-4-7v-1h-2l-1-1%203-1h2c0-1-2-2-5-1h-3l2-1%202-1%203-1c2%200%202%200%201%201v1c2%202%203%200%202-4l-1-2c0%203-3%202-4%200l-1-1-3-1-3-1c-1%201%200%201%201%202%204%201%204%203%200%202l-4-2-3-1c-2%200-2%200%200%201%203%201%203%201%202%202s-1%201%202%201l4%201c2%201%201%203-2%203v1l-2%201c-2%200-3%200-2%201l2%201%206%201h-11l2%202c2%200%202%200%201%201s-2%200-3-1h-1l-2%201v-1l-1-1h-2l3-1c3%200%203-1%200-2-2-1-3-1-2-2l-2-3c-2-1-2-1-3%201%200%202-2%203-2%201h-2l-1-1v1l-1%202c-1%201-1%201%201%201v1l-1%202c1%201%202%200%203-1l1-2%201-1c2%201%202%203%200%203l1%201c3%201%203%202%200%201-2%200-4%200-5%202l-2%202v4h2v2l3%202%201%201c-4%200-7%203-5%204l1%202v2l1%204c0%202%201%203%202%203l1%202c-1%201%203%2010%204%209l1%201%202%203c2%201%203%202%202%203h3v-2c-1-1%200-1%201-1l3%201%202%201-1%201c-1%202-2%202-2%200h-1c-2%201%200%207%203%207%201%200%201%204-1%205-1%201-1%201%201%201v1c-1%201-1%204%201%205v5l-1%206%201%205v17c0%207%201%209%202%209h2l5%201%205%201%2015%201%2014%201h6l9%201%208-1v-2l1%202c0%203%204%201%205-2%200-3%202-3%201%201l1%202%204-1c2%200%202-1%202-5%200-3%200-4%201-3l2%201%201%201%202%201c1-1%201-5-1-7-1-2-1-2-1%200%201%203%201%203-1%203l-2-1-1-3-1-4v-3c1-1%201-1-1-2l-1-1-1-4-2-2%201%203v3c-1%201-1%200-2-2l-1-4c-1-1-1-1%201-3%202-1%202-1%201-2l-1-2%201-1-2-1v1l-1%201-2-2c-1-2-1-2-2-1%200%201-1%201-2-1s-2-2-2-1h-1l-2-3h2l1%201%202-2%201%203c0%202%200%202%202%200l1-2c-2-1-2-4-1-4l1-1-2-1-3-1%201-1v-1h-3c-2%200-3%200-2-1v-3c2%200%204-2%202-2-2-2-5%200-5%202s0%202-1%201l-2-1-5-4c-4-4-5-6-2-4s10%203%2012%202c1-1%200-2-3-3h-5c-1%201-3%200-3-2%201-1-1-4-3-4l-1%202-3%201c-1-1-2%200-2%201l2%201c2%200%202%200%201%201h-4l-2%201c-1%201-2%200-2-1l1-1%202-3%203-3c2%200%203-2%200-2v-2l2-2h2c1%202%203%202%204%202%201-1%201-1-2-3s-5-4-3-4c1%201%205-4%205-6v-2c1%200%202-1%202-3%201-3%204-4%206-2l2%202%202%201%205%202%206%201-4%201c-5-1-7%201-3%202l1%202%202%202%201%202%202%202c2%200%202%201%202%203l1%202%201%201-2%201v1l2%201c1-1%203%201%202%202l1%202%202%203%202%204v3c-2%201-1%202%201%201%202%200%202-4%200-6-1-2-1-2%202-1%204%200%205-1%201-4l-2-3%203%201c4%204%205%202%203-4s-1-7%201-1l3%203c1%200%201-2-1-3v-2c2-1%201-2-3-3-3%200-4%200-3%201%200%203-1%202-3%200-1-2-1-2-2-1l-3-2c-1-2-2-3-1-4l1%201h2c0-1%202-2%204-1l3-1h1c2%204%205%206%206%206l-3-4c-2-2-2-3-1-3l3%202%202%201c2-1-2-4-6-4-7-1-10-2-9-4h-1c-1%201-1%201-1-1%200-3%200-4-2-4l-2%201-4-1c-5-3-7-5-5-5s2-1%200-3c-2-3%201-3%203%200h4c2-1%202-1-3-2-5-2-5-2-5-5l1-2c1-1%201%200%201%202v1h2c1%202%205%201%204%200h-2c-2%200-2%200-1-1%202-2%202-4%200-4l-3-1c-1-2%200-3%202-1l3%201%203%201-3-2-3-1-1-2-1-2h-2c-1-2%201-2%204%200%205%203%206%202%204-2-1-3-1-3-2-2%200%202-1%202-1%201h-2l-1-1%202-1%202-2-1-1v-1c2-1%203%200%202%201l1%202c2%201%202-1%200-6h3c2%201%203%200%201-2-3-2-2-3%200-3l1-1%201-2v-2c0-2%200-3%202-3l2-3c-1-1%200-2%201-2%201-1%201-2-1-3l-3-1-1-1h4c2%201%204-1%202-2-1-1-1-1%201-1h2l-2-2-6-2c-3%200-3%200-2%202M92%20386c-2%208-1%209%204%2011%204%201%205%200%205-6%200-5-1-7-6-8-2%200-3%200-3%203m756%204l-9%207-1%201%206%201c5%200%206%200%209-3%204-4%206-8%205-11s-2-3-10%205m-379%2010c-3%200-2%202%201%202l8%202%203%202c2%200%203%201%203%202h-3c-1-1-3-2-4-1v-1l-1-2h-12c-1%201-2%200-4-1l-3-2c-1%202%204%205%207%205h1v3c2%202%202%204%200%204v-2h-1c-2%200-2%200-3-2l-2-2v2c1%202%200%204-1%202l-2-1c-1%202%203%204%205%203%200-1%201-1%201%201v2h-1l2%201c2%201%202%201%202%203-1%202%200%203%202%204l3%204c2%203%202%204%200%204v1l2%202c0%202%202%201%204-1l3-2v-2h3l2-2%201-3%201-1c3%200%203-3%201-5-3-2-3-3%200-3%201%201%202%200%202-1l2-1c2%200%205-4%204-6l-2-1h-1c0-2-3-1-3%201%200%201-1%201-3-1-1-1-2-2-1-3l2%201c1%202%202%200%201-2l-2-2-2%202h-2l-3-1c-2%200-2%200-1-1v-1h-1l-1%201v-1h-7m486%2017c0%204%200%205-3%207l-5%205c-1%202-3%203-3%202l-4-2-4-4c0-3-6-1-8%203l-8%205c-9%207-10%207-6%209%203%202%205%206%203%209-1%202%200%203%204%204%202%201%204-1%207-5%204-10%2015-18%2023-18%205%200%209-3%208-6-2-7-2-8%200-10%203-2%203-3-1-3h-4l1%204m-864%202c-1%201-2%204-1%209%200%203%203%205%207%204%204%200%205-6%203-11-2-3-6-4-9-2m926%2026c-14%209-14%209-11%2021a569%20569%200%20016%2039%20721%20721%200%20018%2042c2%209%203%2010%208%206%203-3%203-3%203-13l-1-16c-3-10-2-13%205-20%203-3%204-5%202-10-2-3-5-4-5-2l-2%201-4%202c-3%202-4%202-5-3%200-6%201-9%203-9l3-1%202-2c1%200%202-4%201-7-1-4-3-4-4-1-1%202-1%202-2%201l-3-1c-3%201-6-5-5-9l1-4c2%200%2010-9%2010-12%201-3%200-7-1-7l-9%205M90%20455c-3%203-3%2013%200%2013%204%202%209%201%209-1%204-8-3-18-9-12m872%2030l-4%203-3%202-8%206c-8%206-9%207-6%2022a1427%201427%200%200113%2082c2%203%2011-1%2012-6v-8l-2-9-2-7c-2-2-2-5-2-9%200-5%200-5%205-10l7-5c3%200%205-4%205-6-1-4-5-2-8%202l-3%203-4%202c-1%202-2%202-4%201-4-2-6-6-6-14l-1-10-2-9c0-8%201-8%2010-15s10-9%2010-13c-1-4-3-5-7-2m-906%202c-3%203-3%2010%200%2012%205%204%209%200%207-8%200-6-4-7-7-4m32%206c-2%205-1%2011%202%2012%206%203%209%200%209-8-1-7-9-10-11-4m-35%2032l-3%203%202%202c3%203%209%204%209%202%202-4%201-8-2-9s-3-1-6%202m35%206c-1%203-2%204-1%207%200%204%201%205%205%205%204%201%204%201%205-3%202-7%200-11-4-12-3%200-3%200-5%203m-74%2067c-4%202-6%2011-2%2013%206%202%2010-6%206-12l-4-1m1042%2032l-16%2010c-3%203-2%2015%202%2015%203%200%209-2%2010-4l1-2%207-5c4-5%205-6%205-10%200-8-2-8-9-4m-349%204l-6%207-2%202-5%203c-8%208-15%208-85%204-11-1-15%200-17%201h-9l-23-3c-12%200-13%201-5%208%206%206%207%206%2012%207l6-1c-2-2%204-1%205%201l1%204c0%204-3%203%2055%2013l19%204a842%20842%200%200069%209c-2-5-7-48-7-62%200-3-1-3-8%203M8%20635c-3%202-2%2011%202%2014%205%204%208%202%208-4%201-8-5-14-10-10m-2%2040c-5%203-5%2013-1%2017%202%202%207%203%2010%201%202-1%205-13%203-16-2-2-10-4-12-2m390%203c-3%202-3%2028%200%2030%203%203%204%200%204-16s-1-18-4-14m-40%2036c-2%205-2%2030%201%2032%201%201%201%201%204-1%202-3%202-4%201-10l-1-18-2-5-2-2-1%204M2%20716v17l1%204h5c7-1%207-1%207-11%200-7-1-8-2-10-2-1-10-2-11%200m319%201l-2%208%201%2015v10h3c3%200%203%200%202-2v-26c3-7%201-9-4-5m181%204v15a2482%202482%200%20013%2014h3v-13c0-13-1-18-4-18l-2%202m-58%2012c-3%203-4%205-4%2011v6h10v-9c-1-10-1-12-6-8'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/a9abf3d064b61a8833805b0e6fd1f07c/21095/banner.jpg","srcSet":"/static/a9abf3d064b61a8833805b0e6fd1f07c/36b10/banner.jpg 300w,\n/static/a9abf3d064b61a8833805b0e6fd1f07c/88367/banner.jpg 600w,\n/static/a9abf3d064b61a8833805b0e6fd1f07c/21095/banner.jpg 1200w,\n/static/a9abf3d064b61a8833805b0e6fd1f07c/97ce3/banner.jpg 1800w,\n/static/a9abf3d064b61a8833805b0e6fd1f07c/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"},"fixed":{"src":"/static/a9abf3d064b61a8833805b0e6fd1f07c/58d74/banner.jpg"}}}}}}},"pageContext":{}}}