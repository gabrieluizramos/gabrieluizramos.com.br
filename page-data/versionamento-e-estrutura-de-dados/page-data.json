{"componentChunkName":"component---src-templates-post-article-index-js","path":"/versionamento-e-estrutura-de-dados","result":{"data":{"markdownRemark":{"id":"9d935f76-599c-5e63-b670-1867c55e9723","html":"<p>Não sei se você se lembra, mas já comentamos sobre algumas estruturas de dados em outros posts por aqui. Falamos de <a href=\"https://gabrieluizramos.com.br/recursao-com-componentes-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">árvores e renderização recursiva de componentes em React</a> e também falamos de <a href=\"https://gabrieluizramos.com.br/entendendo-o-v8-peca-por-peca/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pilhas e filas quando comentamos sobre o V8</a>.</p>\n<p>Particularmente, gosto bastante de alinhar esses conceitos que podem parecer um pouco mais teóricos com algumas soluções práticas que estão presentes no dia-a-dia de todo mundo.</p>\n<p>Recentemente, numa conversa sobre Git com um amigo, percebi que seria interessante simular seu comportamento com JavaScript e que abriria possibilidades pra comentar um pouco sobre outra estrutura de dados: a <strong>lista ligada</strong>.</p>\n<h3 id=\"antes-de-tudo-vamos-comentar-um-pouco-sobre-como-o-git-funciona\" style=\"position:relative;\">Antes de tudo, vamos comentar um pouco sobre como o Git funciona</h3>\n<p>Se você já tem costume de trabalhar com Git, já deve ter se deparado com algumas imagens e algumas estruturas de como fica um histórico de commits, mais ou menos assim:</p>\n<p><span\n      class=\"gatsby-resp-image-wrapper\"\n      style=\"position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 690px; \"\n    >\n      <span\n    class=\"gatsby-resp-image-background-image\"\n    style=\"padding-bottom: 44.50867052023121%; position: relative; bottom: 0; left: 0; background-image: url('data:image/svg+xml,%3csvg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20width=\\'400\\'%20height=\\'177\\'%20viewBox=\\'0%200%20400%20177\\'%20preserveAspectRatio=\\'none\\'%3e%3cpath%20d=\\'M77%2060c-8%202-12%2011-9%2018%205%208%2017%209%2022%202%206-10-2-22-13-20m-56%202c-8%204-8%2016%200%2021%2011%207%2024-5%2017-17-2-6-11-8-17-4m105-1c-8%203-9%2017-1%2022%2010%206%2022-3%2019-14-2-7-10-11-18-8m51%201c-7%205-7%2016%200%2021%209%206%2021-2%2020-12-2-9-12-14-20-9m53%200c-10%205-6%2023%205%2023s18-11%2012-19c-4-6-11-8-17-4m51%200c-6%205-7%2012-2%2018%2010%2012%2028%200%2020-14-3-6-12-8-18-4m51%201c-6%206-5%2016%202%2020%209%205%2019-1%2019-11%200-11-13-16-21-9m8%2038h-20v13h42v-6l-1-7h-21m-13%2014v13h28v-13h-28m3%2021v7h22v-13l-11-1h-11v7\\'%20fill=\\'%23d3d3d3\\'%20fill-rule=\\'evenodd\\'/%3e%3c/svg%3e'); background-size: cover; display: block;\"\n  ></span>\n  <img\n        class=\"gatsby-resp-image-image lazyload\"\n        alt=\"Histórico de commits\"\n        title=\"Histórico de commits\"\n        data-src=\"/static/b53c550441a81910bb77ae9a97e537f6/15ec7/git-history.jpg\"\n        data-srcset=\"/static/b53c550441a81910bb77ae9a97e537f6/9ac50/git-history.jpg 173w,\n/static/b53c550441a81910bb77ae9a97e537f6/8d48c/git-history.jpg 345w,\n/static/b53c550441a81910bb77ae9a97e537f6/15ec7/git-history.jpg 690w,\n/static/b53c550441a81910bb77ae9a97e537f6/af659/git-history.jpg 1035w,\n/static/b53c550441a81910bb77ae9a97e537f6/89b2d/git-history.jpg 1380w,\n/static/b53c550441a81910bb77ae9a97e537f6/b17f8/git-history.jpg 1600w\"\n        sizes=\"(max-width: 690px) 100vw, 690px\"\n        style=\"width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;\"\n        loading=\"lazy\"\n      />\n    </span></p>\n<p>Outra forma de visualizar esse histórico é com algumas ferramentas mais visuais como a \"<a href=\"https://git-school.github.io/visualizing-git/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visualizing Git</a>\" que exibe de forma clara o que iremos implementar hoje.</p>\n<p>Todos os <strong>commits</strong> que realizamos ao executar o comando <code class=\"language-text\">git commit</code> são organizados de maneira sequencial. Essa organização acontece através da referência de um objeto chamado <code class=\"language-text\">HEAD</code>. A cada novo <strong>commit</strong>, esse objeto <code class=\"language-text\">HEAD</code> é \"apontado\" pro <strong>commit</strong> que acabou de ser criado mas também armazena uma referência ao <strong>commit</strong> anterior.</p>\n<p>Essa estrutura assemelha-se muito com uma estrutura de dados chamada de <strong>lista ligada</strong> (ou <strong><em>linked list</em></strong>) onde, um dado elemento possui uma referência (como, por exemplo, uma chave \"<em>next</em>\") para um elemento seguinte. A única diferença é que, ao invés de manter uma referência à um próximo elemento, o comportamento é o inverso: <code class=\"language-text\">HEAD</code> está sempre atualizada com o <em>commit</em> mais recente e possui referências para <strong>commits</strong> anteriores.</p>\n<p>Para entender tudo isso de forma mais prática, nada melhor do que simular esse comportamento! Ao final desse post, teremos uma pequena imitação de como o Git funciona usando somente JavaScript.</p>\n<p>Implementaremos os métodos mais básicos como <em>add</em>, <em>commit</em>, <em>log</em> e <em>status</em> de forma bem resumida mas com as devidas tratativas para simular um repositório. Dessa forma, podemos entender um pouquinho mais como essa estrutura de dados é trabalhada.</p>\n<p>Ao final do post, nossa API será mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> git<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrepo\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando o projeto'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index2.html'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inserindo segundo arquivo HTML'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajustando CSS'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<small>\n<p><strong>Obs</strong>: após pensar nessa API e comentar sobre a ideia do post com um amigo, fiquei sabendo que existe um nome mais tradicional pra essas implementações que usam encadeamento de métodos chamado Interface Fluente (ou <em>fluent interface</em>), que visa nomear e desenvolver os métodos de forma a deixar sua leitura humanamente mais fluida. Caso queira dar uma olhada, <a href=\"https://martinfowler.com/bliki/FluentInterface.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse post do Martin Fowler</a> e <a href=\"https://en.wikipedia.org/wiki/Fluent_interface\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">essa página da Wikipedia</a> são bem interessante (em inglês).</p>\n</small>\n<h3 id=\"vamos-pro-codigo\" style=\"position:relative;\">Vamos pro código!</h3>\n<p>Para começar, vamos criar a estrutura do objeto que vai implementar a API que acabamos de comentar, com um rascunho de seus métodos e campos que vamos precisar.</p>\n<h4 id=\"estrutura-inicial\" style=\"position:relative;\">Estrutura inicial</h4>\n<p>Vamos criar um objeto chamado <strong>git</strong> que vai possuir os métodos <strong>init</strong>, <strong>add</strong>, <strong>commit</strong>, <strong>log</strong> e <strong>status</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// criamos estrutura inicial do objeto git</span>\n<span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Os métodos <strong>add</strong> e <strong>commit</strong> devem receber, cada um deles, um parâmetro, sendo um <strong>arquivo</strong> (ou <em>file</em>) para o método <strong>add</strong> e uma mensagem (ou <em>message</em>) para o método <strong>commit</strong>. Vamos adicioná-los nas assinaturas das funções:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// adicionamos o parâmetro file</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// adicionamos o parâmetro message</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como simularemos uma lista ligada ao manipular o valor de <code class=\"language-text\">HEAD</code>, vamos criar essa propriedade com um valor nulo, inicialmente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// criamos head com o valor null</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O que nos falta agora é apenas definir a área de preparação dos <strong>commits</strong> do Git, também conhecida como <em>staging area</em>. Essa área de preparação é utilizada quando adicionamos arquivos para realizar um <strong>commit</strong> através do comando <strong>add</strong> e é justamente por isso que possui esse nome.</p>\n<p>No nosso caso, como apenas simularemos o comportamento do Git, podemos criar um simples array para manter o nome dos \"arquivos\" salvos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// criamos stage como um array vazio</span>\n  stage<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para que possamos encadear as chamadas dos métodos e atingir o modelo de API que especificamos anteriormente é necessário que todos os métodos retornem uma referência ao próprio objeto do Git. Podemos atingir isso de uma forma bem fácil retornando o próprio objeto em cada uma das funções:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// adicionamos o retorno do próprio objeto em todos os métodos</span>\n<span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  stage<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso já temos uma estrutura inicial pronta e podemos começar a pensar na implementação de cada um dos métodos. O método <strong>init</strong> por si só já está pronto. Usaremos ele apenas para nos aproximarmos da API que é implementada pelo próprio Git e não precisaremos de mais nada.</p>\n<h4 id=\"metodo-add\" style=\"position:relative;\">Método <em>add</em></h4>\n<p>Como comentamos anteriormente, o método <strong>add</strong> está ligado à área onde os arquivos e modificações são preparados para, futuramente, um <strong>commit</strong> ser realizado.</p>\n<p>Em nossa implementação essa área é simulada pelo array <strong>stage</strong>. Como esse array apenas conterá os nomes dos \"arquivos\" que devem entrar no próximo <strong>commit</strong>, a implementação do método <strong>add</strong> será bem simples. Tudo que precisaremos fazer é dar um <strong>push</strong> e adicionar o arquivo recebido como parâmetro nesse mesmo array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  stage<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// adicionamos o item no array de stage</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para nossa pequena implementação isso já é o suficiente!</p>\n<h4 id=\"metodos-de-status\" style=\"position:relative;\">Métodos de <em>status</em></h4>\n<p>Esse método em nossa solução também será bem simples. Tudo que ele precisará realizar é exibir uma mensagem de log com as alterações que serão adicionadas no próximo <strong>commit</strong> caso haja algum valor na nossa \"<em>stage area</em>\". Caso não tenha nada por lá, podemos exibir a mensagem uma mensagem como <code class=\"language-text\">Nothing to commmit</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  stage<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// criamos uma variável status que verifica</span>\n    <span class=\"token comment\">// se existe álgo na \"stage area\"</span>\n    <span class=\"token comment\">// caso exista, exibe os arquivos</span>\n    <span class=\"token comment\">// caso não exista, exibe uma mensagem padrão</span>\n    <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Changes to commit </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Nothing to commit'</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Tire alguns segundos para brincar com esses dois métodos através de <code class=\"language-text\">git.add(&#39;arquivo-qualquer&#39;)</code> e <code class=\"language-text\">git.status()</code>. Você verá que nossa simulação de Git já está começando a tomar sua forma!</p>\n<p>Agora vamos para os métodos mais \"complicados\" de nossa implementação: <strong>commit</strong> e <strong>log</strong>.</p>\n<h4 id=\"realizando-commits-e-a-referencia-de-head\" style=\"position:relative;\">Realizando <em>commits</em> e a referência de <code class=\"language-text\">HEAD</code></h4>\n<p>Para iniciar o método de <strong>commit</strong>, vamos começar fazendo uma validação. Caso a nossa <em>stage area</em> esteja vazia, mostraremos uma mesma mensagem de <code class=\"language-text\">Nothing to commit</code> como fizemos anteriormente.</p>\n<p>Para facilitar a leitura, a partir de agora irei omitir os campos e os demais métodos desse objeto, dessa forma podemos focar somente em nas funções que estamos desenvolvendo, ok?</p>\n<p>Vamos lá:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// caso o array de stage esteja vazio</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// exibimos a mensagem</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// nossa lógica de commit entrará aqui</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora vamos pra criação do <strong>commit</strong>! A cada vez que um <strong>commit</strong> é realizado, a <em>stage area</em> deve ser apagada. Sabemos que o valor de <strong>head</strong> também será alterado pra um novo <strong>commit</strong> a cada vez que isso acontecer.</p>\n<p>Podemos começar com isso então: vamos \"limpar\" nossa <em>stage area</em>, criar um objeto <strong>commit</strong> vazio e apontar nossa referência de <strong>head</strong> para esse novo <strong>commit</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// criamos nosso commit vazio</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// apontamos head para o novo commit</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// limpamos a stage area</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora precisamos fazer a lógica para construir o objeto do <strong>commit</strong> com os valores necessários. Precisamos inserir os seguintes valores em um <strong>commit</strong>:</p>\n<ul>\n<li>um identificador (simulando o hash utilizado pelo Git);</li>\n<li>a mensagem recebida;</li>\n<li>os arquivos da nossa <em>stage area</em>;</li>\n<li>a data atual;</li>\n<li>criar uma referência ao commit anterior.</li>\n</ul>\n<p>Vamos fazer isso por partes:</p>\n<h5 id=\"criando-um-identificador\" style=\"position:relative;\">Criando um identificador</h5>\n<p>Poderíamos criar um hash para cada commit mas, para facilitar nossa vida, vamos adotar uma convenção aqui e deixar as coisas mais simples. Nossos <strong>commits</strong> serão sequenciais compostos por apenas um número.</p>\n<p>Por exemplo:</p>\n<ul>\n<li>nosso primeiro commit será <code class=\"language-text\">#1</code>;</li>\n<li>o segundo será <code class=\"language-text\">#2</code>;</li>\n<li>o terceiro será <code class=\"language-text\">#3</code>;</li>\n<li>e assim por diante.</li>\n</ul>\n<p>Com isso, podemos dizer que o prefixo do nosso <strong>commit</strong> é um jogo da velha (<code class=\"language-text\">#</code>) e descobrir o \"hash\" do <strong>commit</strong> atual. Após isso, podemos somar <code class=\"language-text\">+ 1</code> ao commit atual para gerar o identificador do próximo <strong>commit</strong>.</p>\n<p>Podemos fazer isso da seguinte forma:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// criamos uma variável com o prefixo #</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// descobrimos o hash atual, caso exista algum valor me head</span>\n      <span class=\"token comment\">// caso não exista, iniciamos com 0</span>\n      <span class=\"token keyword\">const</span> currentHash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// concatenamos o prefixo com a somatória (+ 1) do \"hash\" atual</span>\n      <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Feito isso, podemos adicionar esse \"hash\" no objeto de <strong>commit</strong> que criamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> currentHash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// adicionamos o hash no commit criado</span>\n        hash<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"adicionando-a-mensagem-os-arquivos-e-a-data-atual\" style=\"position:relative;\">Adicionando a mensagem, os arquivos e a data atual</h5>\n<p>Para adicionar esses valores, podemos apenas passar o parâmetro <code class=\"language-text\">message</code> recebido, além de utilizarmos os valores presentes na nossa <em>stage area</em>. Para nos ajudar com a data atual, podemos construir um objeto com <code class=\"language-text\">new Date()</code> que já será o suficiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> currentHash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        hash<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// adicionamos a mensagem recebida</span>\n        message<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// adicionamos o valor atual da nossa stage area</span>\n        files<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// criamos um novo objeto de data</span>\n        date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Com isso, só nos resta referenciar o <strong>commit</strong> anterior para começarmos a trabalhar com nossa estrutura de lista ligada.</p>\n<h5 id=\"referenciando-o-commit-anterior\" style=\"position:relative;\">Referenciando o commit anterior</h5>\n<p>Embora possa parecer um pouco confuso, tudo que precisaremos agora é armazenar uma referência ao objeto do <strong>commit</strong> que estava em <strong>\"head\"</strong> antes desse novo <strong>commit</strong> que estamos gerando. É através dessa referência que a lista de <strong>commits</strong> poderá ser acessada futuramente: a cada vez que um novo <strong>commit</strong> é criado, ele possuirá uma referência \"apontando\" para o <strong>commit</strong> anterior.</p>\n<p>Faremos isso criando um campo <strong>previous</strong> (que significa \"anterior\") e atribuindo à ele o próprio valor que existia em <strong>\"head\"</strong> anteriormente. Simples assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> currentHash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        hash<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">,</span>\n        date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// criamos um valor previous apontando</span>\n        <span class=\"token comment\">// para o commit anterior</span>\n        previous<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Como já havíamos atualizado o valor de <strong>head</strong> com o novo <strong>commit</strong>, tudo já está pronto nesse método.</p>\n<h4 id=\"metodo-de-log-percorrendo-toda-a-lista-de-commits\" style=\"position:relative;\">Método de <em>log</em> percorrendo toda a lista de commits</h4>\n<p>Agora, para poder exibir nosso histórico de <strong>commits</strong>, vamos trabalhar no método <strong>log</strong>.</p>\n<p>Vamos começar criando uma pequena validação e exibindo uma mensagem <code class=\"language-text\">No commits yet</code> caso ainda não exista nenhum <strong>commit</strong>. Podemos verificar se algum <strong>commit</strong> já existe através do valor que estamos armazenando em <strong>head</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// caso não exista nenhum commit</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// exibimos uma mensagem</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Caso existam <strong>commits</strong>, precisaremos exibí-los do mais recente ao mais antigo. Como podemos exibir bastante informação em nosso log, vamos criar um divisor com apenas alguns traços (<code class=\"language-text\">-</code>). Vamos criar uma variável <code class=\"language-text\">log</code> que será um array com todas as mensagens de log formatadas antes de serem exibidas:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// criamos um divisor com um traço (-) repetido 100 vezes</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// criamos um array que irá armazenar as mensagens de log</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para percorrer nossa lista de <strong>commits</strong> precisaremos de uma variável que nos auxilie, igual já estamos acostumados a realizar um laço de repetição (como o <em>for</em>) e uma variável que nos ajuda com um índice. Vamos chamar essa variável de <code class=\"language-text\">cursor</code>, pois ela será responsável por conter a referência de cada um dos <strong>commits</strong> ao longo do nosso laço de repetição.</p>\n<p>O valor da variável <code class=\"language-text\">cursor</code> será, inicialmente, a referência que temos em <code class=\"language-text\">head</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// criamos o cursor com a referência de head</span>\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>O laço <code class=\"language-text\">while</code> cairá como uma luva aqui. Tudo que precisaremos fazer é executar esse laço de repetição enquanto existir um valor na variável <code class=\"language-text\">cursor</code>. Ao fim do laço, atribuíremos à essa variável a referência do <strong>commit</strong> anterior através de sua própria referência com <code class=\"language-text\">cursor.previous</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora só nos resta formatar a mensagem de commit que queremos exibir. Vamos exibir algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Commit: ${identificador}\nMessage: ${mensagem}\nDate: ${data}</code></pre></div>\n<p>Podemos usar esse \"template\" para montar as strings da mensagem que queremos. Como essa mensagem será composta por 4 linhas, vamos criar um array para cada uma de suas partes. Cada uma dessas linhas será um valor nesse array:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// criamos o array com a mensagem de log do commit</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// seu valor inicial é o identificado do commit</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Commit: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// seguido por sua mensagem</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// a data que foi criado</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n        cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Agora, podemos juntar esse array de mensagem em uma única string e utilizar a quebra de linha <code class=\"language-text\">\\n</code> para unir seus pedaços com o método <code class=\"language-text\">.join</code>. Dessa forma, começamos a formatar a mensagem no log como queremos.</p>\n<p>Adicionaremos essa nova string gerada no array de <code class=\"language-text\">log</code> que criamos anteriormente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// criamos uma variável com a quebra de linha</span>\n      <span class=\"token keyword\">const</span> newline <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Commit: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// unimos o array de mensagem usando a quebra de linha</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>newline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// realizamos o push no array de log</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>newline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para finalizar nosso <strong>log</strong>, tudo que precisamos fazer é unir todos os seus valores com o método <code class=\"language-text\">.join</code> também, mas utilizaremos dessa vez nosso divisor e duas quebras de linha (uma antes e uma depois) para que nossa mensagem essa exibida formatada corretamente no console:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> newline <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Commit: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>newline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// unimos o array de logs usando uma quebra de linha</span>\n      <span class=\"token comment\">// antes e outra depois do divisor</span>\n      <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newline<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>divider<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newline<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// exibimos no log o histórico de commits</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>E terminamos de desenvolver por aqui! Agora vamos ver como ficou nosso código ao final do processo e ver seu funcionamento.</p>\n<h3 id=\"resultado-do-codigo\" style=\"position:relative;\">Resultado do código</h3>\n<p>Como omitimos alguns pedaços de código para facilitar a leitura, aqui está o código completo da nossa implementação de Git usando JavaScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  stage<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> currentHash <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> hash <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentHash<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        hash<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">,</span>\n        files<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">,</span>\n        date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        previous<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> commit<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No commits yet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> divider <span class=\"token operator\">=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> newline <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> cursor <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cursor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Commit: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>hash<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Message: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Date: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>cursor<span class=\"token punctuation\">.</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>newline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cursor <span class=\"token operator\">=</span> cursor<span class=\"token punctuation\">.</span>previous<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">const</span> history <span class=\"token operator\">=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newline<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>divider<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>newline<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>history<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Changes to commit </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Nothing to commit'</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Para executá-lo e ver resultado final, podemos rodar aquele exemplo que comentamos inicialmente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> git<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrepo\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Nothing to commit</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// No commits yet</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Nothing to commit</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Changes to commit index.html,style.css,bundle.js</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iniciando o projeto'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Nothing to commit</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index2.html'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inserindo segundo arquivo HTML'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'style.css'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ajustando CSS'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Nothing to commit</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Exibe histórico de todos os commits</span></code></pre></div>\n<p>Todas as mensagens de log devem aparecer no seu console como esperado, mais ou menos assim:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Nothing to commit\nNo commits yet\nNothing to commit\nChanges to commit index.html,style.css,bundle.js\nNothing to commit\nNothing to commit\nCommit: #3\nMessage: ajustando CSS\nDate: Mon Jul 12 2021 16:11:23 GMT-0300 (Brasilia Standard Time)\n----------------------------------------------------------------------------------------------------\nCommit: #2\nMessage: inserindo segundo arquivo HTML\nDate: Mon Jul 12 2021 16:11:23 GMT-0300 (Brasilia Standard Time)\n----------------------------------------------------------------------------------------------------\nCommit: #1\nMessage: iniciando o projeto\nDate: Mon Jul 12 2021 16:11:23 GMT-0300 (Brasilia Standard Time)</code></pre></div>\n<h3 id=\"mais-uma-estrutura-de-dados-pra-conta\" style=\"position:relative;\">Mais uma estrutura de dados pra conta</h3>\n<p>Espero que tenha se divertido com a nossa pequena simulação de Git usando JavaScript!</p>\n<p>Quando conseguimos enxergar uma estrutura de dados sendo aplicada de forma mais prática, acho que as coisas ficam bem interessantes, né?</p>\n<p>Além de tudo, isso anos ajuda a entender e perceber que alguns assuntos, mesmo que pareçam mais teóricos, são extremamente importantes e muitas vezes utilizados (sem que soubéssemos) em ferramentas do nosso cotidiano.</p>","timeToRead":14,"frontmatter":{"date":"12/07/2021","path":"/versionamento-e-estrutura-de-dados","title":"Versionamento e estrutura de dados","subtitle":"Simulando o comportamento de um repositório Git usando JavaScript e lista ligada","banner":{"author":"Chris Leipelt","href":"https://unsplash.com/photos/TcFq4-ulczU","image":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1200'%20height='750'%20viewBox='0%200%201200%20750'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2068v68h5c7%200%2011%203%206%204l-7%201H0v290h3l6%201c2%200%202%200%201-1s-1-1%201-1l4%201c1%202-3%203-9%203H0v303h4l4-1h1l3%201%202%201-7%201-7-1v12h583v-4l1-5c1-1%201%200%201%201l1%203v-6c-1-2-2-3-1-4l1%201%201%201v-2l-2-2c-1%200-2-1-2-4l1-5%202%202h1l1-2v-4l-1-6c1-4%200-5-1-8-2-3-2-3%200-4l-4-1c-7-1-9-2-7-4%201-1%2048%201%2050%203%202%201%201%203-1%203-2%201-2%204%202%207%203%202%204%203%203%201%200-2%201-2%2011-1l8%202%201%201%209%201c12%203%2017%203%2019%202%201-2%201-2-1-3-6-2-4-5%201-5h3l-4-3a973%20973%200%2001-47-11h-5c-1%200%204-5%207-6%204-1%2040%207%2044%2010%203%202%206%207%206%2010%200%201%207%202%2020%202l7%201%209%201c8%201%2011%202%2011%204%201%202%200%203-1%202-2%200-4%201-3%202%200%202%208%204%2023%204a1068%201068%200%200133%201c1%201-5%206-9%206a276%20276%200%2001-44-3c-1%200-7-6-7-8%201-2%200-2-7-2a517%20517%200%2001-34-3c1%201-1%204-4%206-4%201-9%201-20-1l-14-4c-13-2-22-7-20-11%201-1%200-2-9-2l-12-1-2-1c-1%201-1%201%201%201v2c1%200%201%206-1%2011l-3%204c-2%200-5%204-4%205l3-1c3-2%208%201%208%206l-1%205c-2%202-2%208%200%2010l1%204c0%202%2011%202%20299%202h300V434c-1-2-2-3-16-3l-20-1c0-4%2033-4%2035-1%201%201%201-45%201-144%200-80%200-145-1-144s-26%203-29%201v-1l1-1c0-1%203-2%2014-2l9-1h-13l-10-1c-2-1%206-1%2021-1h8V0h-196v4a5534%205534%200%2000-2%2087v4c1%203%200%205-2%204h-5c-4%201-3%201%206%201h12c1%202-1%202-5%202l-4%201h-2v1c1%201%201%201%200%200l-16-1h-14l14-2c5%200%205%200%203-1l-2-1%202-2c1-1%202-2%201-3l1-4v-4c-3-1-4%200-4%202l-1%203h-2V0H604v4a1557%201557%200%2001-3%2094c0%201-1%202-6%202h-8l19%201c7%200%209%201%203%202l-5%202h-21l-9-1c-5%200-6%200-5-1%201-2%204-2%209-2%207%200%208%200%209-2%200-2%201-3%205-3%206%200%206-1%204-12-2-9-3-9-4-1%200%206-2%208-3%203l-2-5h-2c-1%201-1%201-1-1l2-5c2-1%203-3%202-4%200-3-2-3-2%200l-1%203-1-37%201-37H194v45c0%2031%200%2045-1%2044-3-5-4-1-1%204l-1%202-3%201%2010%201c15%200%2016%200%2016%202s-3%203-13%202l-4-1a243%20243%200%2001-15-3l-6%201c-2%202-5%201-4%200l4-2c3%200%204%200%202-1-2%200-2-1-2-4v-5c-2-2-2-9-2-43l-1-42-87-1H0v68m215%2023c-5%203-4%204%203%203%207%200%204-1%2033%2012%2010%205%2014%207%2015%2010%201%202%201%202-2%202-3-1-4%203-1%204l19%207a587%20587%200%200125%2012c0%208%206%2011%2027%2014l4%201%203%201%207%201c5%202%2014%201%2017%200%203-3%202-4-3-4l-17-2a2794%202794%200%2000-34-9c-3-3-3-4%202-3h3c0-2-3-6-5-6l3-2a841%20841%200%200050%208c3%203%204%203%204%200%200-5-5-7-42-13-8-2-15%200-16%205-1%201-10-2-30-10-9-3-10-3-10-6-2-7-7-11-33-23-12-5-17-5-22-2m803%200c-3%201-7%205-7%207h2c2-2%2010-3%2013-2a1553%201553%200%200036%2010c0-2-3-4-13-8-19-7-26-9-31-7m-404%203c-3%202-4%206-1%204%204-2%2010-1%2020%202%2022%207%2029%2010%2032%2013l2%203-3-1-2%201v2c-1%201%200%203%203%203%202%200%202%201-1%202-4%202-6%201-21-4-10-4-20-6-24-6-2%200-2%200%200%201v2c-2%200%200%202%207%204l7%202h3l3%202%208%203c8%203%2014%203%2018-1%202-1%203-3%202-3v-1a708%20708%200%200141%2011c-1%205%207%2010%2020%2011l19%202c12%201%2015%201%2019-3%203-4%203-5%200-3-3%201-16%200-26-2h-12c-14-1-14-1-16-5-2-2-2-2%201-2s3%200%204-2c0-3-1-3-11-5l-33-7c-3%200-4-1-4-4-1-6-6-9-23-14l-17-6c-4-2-12-1-15%201m-65%202l-12%205c-19%207-25%2011-27%2017-1%203-1%203%201%204s-11%205-25%209a154%20154%200%2000-18%206l-3%203c0%203%201%203%2014-1a4175%204175%200%200138-14v-1l1-1-3-1h-3l2-3%2019-11a9053%209053%200%200028-11l5%201c-2-4-11-5-17-2m405-1l-35%2010c-5%203-11%2011-8%2012%201%200-25%206-36%207-4%201-5%201-5-1l-4-4c-4-2-17-2-37%201-11%201-14%202-17%207-2%203-1%203%203%201l9-2c31-4%2034-4%2036-6h2l3%202c1%200%206%204%204%204-3%200-4%202-3%203%201%202%204%202%2025-2%2016-3%2022-5%2020-6l2-1c5%200%207-3%201-3-2%200-2%200%202-3l6-5%208-2a159%20159%200%200133-9v-2c2-1-5-2-9-1m-743%2012c0%203%204%206%2022%2014%2021%2010%2026%2012%2030%209%205-2%206-6%200-4-3%201-6%200-19-6-12-6-25-11-27-11l-4-1-2-1m780%200c-3%200-4%2011-1%2017%202%204%202%204%200%204l-2%201h-2c-1-1-1%200-1%204l1%208c2%201%202%201%202-1s3-3%204%200l2%201v4c0%205-1%206-2%204s-3%207-2%209%200%202-2%201l-2-2a471%20471%200%20001%2015l2-6%201%205c0%208%200%209%202%2011v3c-1%201-1%202%201%205%202%204%203%204%204%202l3-3%202-4%201-2%201%203c1%201%201-4%201-12%200-11-1-14-2-15-3-2-2-20%201-20s0-8-4-12c-2-2-2-2-1-4%201-1%202-3%201-4l2-5c3-6%202-7-4-8l-7%201m-402%201c-2%200-2%201-2%204a114%20114%200%20012%2017c-1%204-1%204-3%202-2-1-2-1-2%202s0%204%202%204%204%208%202%2013v9c-1%201-1%201-1-1s-2-3-2-1v15c1-1%202%201%203%208a252%20252%200%20001%2016c0%204%202%205%202%200l2-2%201-2v-3l1%201h2c1-2%201-2%202-1%203%202%204-2%204-22%200-10%200-18-1-17%200%202-1%202-2%201-2-3-2-5%200-6l1-2%201-1%201-5-1-6v2l-1%202-2-4-1-3-1-2%201-2c1%200%202-3%201-5l1-6%201-5h-12m429%204c-2%202%200%203%206%207l9%203%206%203c4%203%2018%206%2024%203%204-2%204-3-1-3-6%200-20-4-28-8l-16-6v1m-465%205l-8%202-1%201-1%201-8%203c-10%205-17%207-19%206-3-2-4%200-1%202%203%204%2010%203%2020-2%207-3%209-4%208-5%200-2%202-3%202-1%201%201%2016-4%2017-6%201-1-1-4-2-4l-7%203m-415-1c-5%203-12%205-18%206l-6%201%202%202c3%203%2016%201%2016-2l2-1%202-2c-1-1%203-2%204-1%201%202%202%201%202-1-1-3-2-3-4-2m808%202l-17%205c-6%202-10%203-14%201-4-1-4%202%201%205%203%202%204%202%207%201%206%200%2015-3%2015-4l3-1%204-2h1c0%202%202%201%202-1h6l-2-1h-2l4-1h7l2-2v-1c2-3-4-2-17%201m-230-1c-3%201-7%205-7%206s3%201%207-1c3-1%2013-1%2030%202l11%201%207%201%202%201c2%200%202%200-1-3-4-4-7-5-25-6-16-2-20-2-24-1m346%202c0%202%2014%207%2021%207l4%202%201-1%202-1%201%201c-1%201%200%201%201%201l7%202c3%202%204%202%205%201%202-2%201-2-4-3a232%20232%200%2001-27-9c-6-2-11-3-11%200M58%20120h-5l-3%201-4%201c-5%200-14%200-21%202-6%200-15%205-15%207s2%201%204-1l8-2%2030-4c5-1%2011-1%2013%201%201%201%203%201%203-1s-9-6-10-4m1055%203c-6%204-5%206%202%204%204-2%206-2%209-1h7c3%200%203-1%201-2-3-3-15-4-19-1m-938%2039c0%2031%200%2035%202%2037l1%205c-2%208-2%2012-1%2013l2%201c1-2%202-17%200-21l2-4c1-2%202-2%205%200l4%201c0-1-2-5-4-5l-1-2-2-2v-2l1-7%201-7c1-1-1-8-3-9-2%200-1-5%201-5l1-1-4-12c1-3%200-4-1-4s-2-3%200-3c2-1%201-4-1-4l-2-2-1%2033m280-33l-10%201c-20%202-32%206-33%2012v2l4-2c2-3%205-3%2011-4a556%20556%200%200039-4c6%202%207%201%202-3-3-2-8-3-13-2m309%203c-3%201-1%203%204%204a207%20207%200%200047-1l1-2c1-1-1-1-5-1a1914%201914%200%2001-47%200m106%202c-2%203-5%203-31%206a527%20527%200%2000-26%202c1%204%206%205%2018%204l16-2c13-1%2022-4%2024-8s1-6-1-2m-801%201l-9%206c-1-1-4%200-8%201h-9c-2%200-2%200-2%202s1%202%206%202a59%2059%200%200016-2c5-1%2011-10%207-10l-1%201m1039%203c1%205%208%209%2017%209l7%201h5l11%202c11%201%2012%201%2016-1l4-4c0-1-1-1-3%201a656%20656%200%2000-43-4c-9-1-12-2-12-4l-2-2v2m-637%207c-3%203-6%204-21%205l-17%203c-10%202-16%202-18%201-4-2-2%202%201%204%204%202%207%202%2015%201a787%20787%200%200137-7c3-2%205-5%205-8%200-2-1-2-2%201m-439-1l-11%201c-10%201-10%201-8%203s11%203%2015%201l5-1%203-1h1c2%202%203%201%203-1l-1-3-7%201m334%201c-5%200-3%203%203%204a347%20347%200%200048-1l-1-1c0-2-40-4-50-2m-178%209l-1%205v5c0%205%203%206%205%202l1-2v2l1%202%201-5-1-6h-2l-3-1%203-2c2-2%203-3%200-4-3-2-4-1-4%204m406%2077l-4%201v15c0%202%203-1%203-3l1-2%204-2%203-3v-4c-2-3-2-3-7-2m-411%2030l-2%203-1%203c-1%202-1%201-1-2l-2-4c-1-1-1%204-1%2062a2288%202288%200%20004%2067h1l-1%202v4c8%201%2015%201%2014-1l-1-4v-3l2%202%202%202v-51a7971%207971%200%2001-2-66c0%203%200%203-2%202-3%200-3-1-2-2%202-3%202-7%200-6l-1-2c2-4%202-5-2-7-5-3-5-3-5%201m406%201v4l-1%206c-1%205-4%206-4%201%200-6-1-5-1%201%200%207%201%209%203%207%202-1%202%201%202%2011%200%204-2%207-2%203l-1-2-1-2a1286%201286%200%20002%2089c2%200%202%201%202%204%200%207%202%2011%203%205l1-2%201%202c1%203%200%205-3%205s-5%202-4%203l-5%201c-7%200-9%201-7%203h4c1-1%202-1%205%201h9c3%200%203%200%201%201-1%201-1%201%201%201l2-1%203-2c4%200%204%200%201-1l-7-1c-4%200-5%200-3-1h6c4%200%205%200%204-2v-6c2%201%202-5%202-53%201-52%201-61-1-61l-1-1%202-1%201-2c0-3-2-8-3-8l-1-2c0-1-3-1-6%201-1%201-1%201-1-1%200-4-2-4-3%200m406%207l-2%201c-2%200-2%202-2%2011%201%2011%200%2012-1%2013l-3%201a488%20488%200%20000%2078c0%206%200%2011%201%2010%201-5%202-5%202%200l-1%205-1%201c-1-1-1%200-1%202%200%201%200%202%201%201%200-2%201-2%202-1%203%201%203%203%200%205s-2%204%202%202l4-1%202-1%207-7%201-56v-57l-3-2c-3-1-4-2-4-4-1-3-3-4-4-1M555%20391l-16%205c-14%204-20%208-20%2014%200%203-1%203-30%2011-15%204-16%204-16%206-1%203%201%203%207%201l10-2%204-3h1c2%201%2010-1%209-3-1-1%202-2%2010-2%206%200%206%200%209%203%204%204%2010%204%2022%200%207-2%207-3%207-5s0-2%201-1c2%204%2018-1%2017-4%200-3-9-2-17%202-3%201-18%206-23%206-3%201-7%200-7-2h1l1-1-1-1v-1l2%201h1c1-2%201-2-3-3l-3-1%203-3%205-4%2026-9c-4%200-3-1%201-2l6-1h2c-1%201%201%201%204%201l7%201%201%201%201-1-2-1v-1c2-1%202-1-2-3s-8-1-18%202m465-2c-1%201%200%201%202%201h5c1%201%201%201-3%201l-4%201h8l4-1c3%200%203%200%201%201l-2%201%203%201a417%20417%200%200118%203c1-2%203%200%203%202-1%200%201%202%205%203s7%203%209%205c2%203%205%202%203-2-4-6-7-8-27-13l-9-2c-6-2-16-2-16-1m-797%204c-3%202-7%206-5%206l5-2a2628%202628%200%200038%208c7%203%2012%205%2012%207l1%201%201%201h-7l1%202%206%204a86%2086%200%200021%205l10%202%2013%203c5%201%205%200%204-2-2-3-13-6-36-11-8-1-11-2-10-4s-2-6-6-8c-5-4-32-12-40-13l-8%201m406%201c-4%201-8%203-8%205h3c6-2%208-1%2023%205%2018%207%2026%2011%2028%2014%201%202%201%202-2%202s-4%200-4%202%201%203%202%203h3c2%202%202%202-1%203h-5l-3-1-11-4c-18-8-30-11-27-7v1c-3%200%204%203%2017%208l17%207c4%202%2013%200%2015-4%201-1%201-1%208%201a2692%202692%200%200038%2011c3%201%202-3-1-5s-3-2-1-2c6-3%2011-3%2035%202l11%201%205%202c4%203%206%201%203-2-3-4-6-5-14-6a467%20467%200%2001-34-5c-4%201-9%205-9%207s-15-2-18-5l-5-1-5-1-7-3c-5-1-6-1-5-2%202%200%202-1%200-5s-4-5-10-8l-34-14-4%201m310%206l-15%206c-6%202-11%209-10%2012s-1%204-2%202l-3%201c-3%201-3%201-1%201s1%201-3%202l-8%202h-2c-1-1-2-1-6%201-5%202-4%202%203%200%205-1-1%202-8%204l-12%205-1%202c0%202%204%201%2015-3l8-2%206-2%208-2%207-4%204-2c1%201%201%201%203-1%202-3%202-4-2-3-4%202-4%201-2-3%203-3%204-4%2020-11%207-3%208-4%206-4-2-1-2-1-1-2%204-2%201-2-4%201m-354%206l1%203c1%201%202%203%202%209-1%2010-1%2011-3%209h-2a3616%203616%200%20011%2014c0-9%200-9%202-6l1%208%201%206c1%202%201%2011-1%2014s2%2010%203%208c2-2%203-2%203%200%200%201%201%201%204-1s3-2%204-1%201-1%201-6c0-4%200-7-1-6l-1-2%201-4v-18l1-2c0-2-1-3-2-3l-1-1-4-3c-4-3-3-5%202-4l2-1c1-7%201-12-1-12-7-2-13-2-13-1m407%200c-3%202-4%204-2%204l2%202c0%203%203%207%205%207s7-9%207-13h-12m-23%205c-3%203-3%203-4%202s-2-2-3-1l-24%2010c-7%203-13%205-17%204l-4%201c0%202%205%204%208%204a78%2078%200%200025-9l7-2%208-3c2-1%208-7%208-9l-4%203m-754-2c0%205%2025%2016%2027%2011%201-1%201-1%201%201s11%206%2020%207c7%200%2015-4%2011-7l-3%201c-2%202-19-2-28-6l-8-2-8-2c-2%200-2%200-1%201l-1%202-1-2-3-1c-1%201-2%200-3-1-1-3-3-4-3-2m807%200l2%202v1c-3%200%205%203%209%204l9%202%207%201%205%202c2%202%209%202%2013-1%204-2%204-3-2-3l-16-3c-15-5-27-7-27-5m43%201c-1%202%202%204%205%203v1c-1%201%206%204%208%203h2l7%202%208%202%2010%202%208%202v-1c-2-2-2-2%201-2l3-1-3-1-12-2a155%20155%200%2000-23-6l-8-1-2-1h-4m52%203c-4%202-6%204-5%206l4-1c4-2%204-2%2035%201%2013%201%2014%202%2016%204%203%203%206%202%203-1-3-5-7-6-21-8-21-3-28-3-32-1m-654%203l-11%201c-16%201-26%204-30%208s-2%205%203%202c2-2%206-2%2011-3a482%20482%200%200038-3h6c-1-4-10-6-17-5m-140%202c-6%202-6%206-1%204%204-1%2010-1%2029%202l13%201c6%200%207%200%209%202%203%203%204%203%203%200%200-3-8-6-16-7l-14-2h-23m-220%202a521%20521%200%2001-22%207c-6%203-1%203%2013-1l20-6c0-2-4-2-11%200m75%205a2135%202135%200%20003%20100l1-6c2%200%202-2%201-8-1-10-1-27%201-29%201-1%201-2-1-4l-1-26c-1-23-2-31-4-27m809%205l1%207%201-2h3l1%2011c0%2013%200%2013-1%2012l-1-1v-3c-1-2-1-2-1%200%200%205-2%202-2-3-1-2-1%204-1%2015%200%2018%201%2023%202%2018%201-2%201-2%202-1h2l1-1%201-2v9l3-1%203-2%202-2h3v-11l-1%202h-4c-4-3-5-2-6%201l-3%202-2%201c-1%201-1-1-1-6s0-5%202-5l2-1h3c2%200%203%200%204-2v-2l2-2%202-2h-2l-2-2-3-6c-3-4-3-6%201-6%203%200%206-6%206-12l-1-7c-1-2-8-2-9-1l-3%201-1%202c0%202%200%202-1-1-1-4-2-4-2%203m-128-5l-16%203c-16%202-20%204-24%208s-2%206%203%202c1-2%204-2%2013-4l20-3h20c2%200%201-1-3-3-5-3-12-4-13-3m252%202l1%204c3%204%208%206%2022%207l21%202c4%201%2011%200%2014-3%203-2%202-4-1-2s-9%201-22-1l-18-2c-10-2-13-2-15-4l-2-1m-796%204c0%207%208%2012%2021%2012l11%202c2%200%203%200%202-1%200-1%201-2%204-1l2%201c-2%201%204%203%2010%203%205%200%208-1%2010-4%201-1%200-2-7-2l-18-1-16-2c-10-1-14-3-16-6-1-2-3-3-3-1m84%200h-11c-16%201-16%201-17%203a455%20455%200%200053-1l1-1-26-1m79%201c-2%202-5%203-13%204l-19%203c-14%202-20%202-23%200s-4-1-1%203c3%205%207%205%2039%200%2014-2%2017-3%2020-8%201-4%200-4-3-2m237%209c2%207%205%209%2016%2011%209%202%2016%202%2015%201l1-1%201%201c-1%201%201%202%208%203%2010%201%2015%201%2017-3%202-2%202-4%200-2-2%201-11%200-20-2l-10-1c-16-2-22-4-25-6-2-3-4-4-3-1m160%201c-1%202-2%202-16%204l-21%203c-14%203-16%203-18%200h-2c-1%205%2010%209%2015%206%202-1%204-2%207-1l4-1h2l2-1%209-1c12%200%2021-4%2021-10%200-2-1-1-3%201m-103%201c-6%201-5%203%203%204a172%20172%200%200037-2c-1-1%200-1%201-1l4%202c1%202%206%200%206-2s-1-2-24-2l-27%201m-190%2035c0%2022%202%2029%202%209%200-9%204-7%204%201%200%204%202%206%203%204s5-1%205%201c1%203%202%202%202-2l2-4c3-1%203-10%200-11l-4-2c-2-1-9-1-9%201l-1%201c-2%200-2-2-2-11l-1-11c-1-1-1%207-1%2024m-402%2069l-1%2047a12646%2012646%200%20012%2095h2v8h14c1-1%200-3-2-3v-1l-2-1v3c-2%200-3-3-2-4%205-3%206-3%207%200%202%205%202%201%202-50l-2-50c-3-3-3-8%200-6%201%201%201%201%201-4s0-6-2-6l-2-3-1-2-1-1h2l-1-2c-1-1-2-2-1-4h-4c-2%200-3%202-1%205v2l-2%205c0%205-1%206-3%203l1-3v-2c-2-1-2-3-2-12%200-11-1-16-2-14m409%2012l-2%208c0%204-1%206-2%205l-1-2-1-1-1%2012%201%2013%201%202-1%201c-1-1-1%2011-1%2035l1%2035%201-3%201-1%201-2c1-1%201-1%201%201s0%203%203%202c3%200%204%201%203%204l1%203%201%209%201%207h6v-55a341%20341%200%2000-3-63l-1-3c1-3%200-4-5-7h-4m406%207l-2%204-1%202-2-1-1-1-1%203c0%202%200%202%201%201%201-2%201-1%202%202l1%204c1-1%201%200%202%202l1%204c0%202-2%204-3%202h-1l-1%202a309%20309%200%20000%2066v13h1c0-2%207-8%208-7v2l3%206%205%205c1%202%201-17%201-47-1-52-1-57-5-57l-3-3c-3-5-3-5-5-2m-37%20120l-17%204c-10%202-11%203-15%207l-5%206c0%202%203%201%206-2s7-4%2033-10c11-2%2012-2%2016%200%205%201%205%201%204-2-2-5-10-6-22-3m-411%204l-20%207c-4%202-7%206-7%209%200%202-1%203-9%205l-12%203-11%204-7%201-3-3c-4-4-8-5-29-2-19%203-25%205-26%209l3-1c3-2%206-2%2013-2l8-1h2l11-1%2013-1%206%203c-2%200-6%203-5%205%200%201%205%201%2022-4l6-2%2011-2%208-3%201%203c2%205%209%206%2021%202a1303%201303%200%200126-9l2-3c3-2-8-1-23%204-11%204-16%205-20%205s-7-3-3-3l2-2c1-2%200-3-3-3s-3%200-2-2l6-5a373%20373%200%200034-9l8-2%204%202c6%203%206%202%205-1-2-3-7-6-11-6l-21%205m483-4l-5%204c-1%203-1%203%201%202%208-3%206-3%2034%204%2012%203%2016%204%2018%206%203%203%204%202%202-2-3-5-4-6-21-10-18-4-25-5-29-4m-801%204c-3%201-3%201-1%201%203%200%209%202%2011%204h3c3-1%2026%207%2028%2010l5%201c0-2-9-7-19-9l-8-3c-5-2-17-5-19-4m775%203l1%203-10-1c-13%200-20%201-18%203l4%201h1c0%201%2014%201%2016-1%202-1%2010%201%209%202h21v-2c-1-2-2-2-12-2l-10-1-1-5-1%203m-810%207c-4%200-6%200-5%201l-1%202c-1%201%201%201%204%201l6-1v-1l1%201c1%202%204%202%206%201h4c1%201%209%200%209-1h2l2-1c0-2-15-3-28-2m798%203l1%203%201%205c0%205%201%209%203%206h2v-1l-1-1%202-2%202-1%201-3c2-1%204-7%202-7a1315%201315%200%2001-13%201m-140%200a179%20179%200%2000-21%203c-3%201-6%203-7%206-3%203-2%204%202%201%203-3%204-3%2013-4l12-2c3-2%209-3%2010-1s11%201%2011-2c0-2-3-2-20-1m276%201c-3%201-7%205-7%206h6c2-2%205-2%2022-1a936%20936%200%200027%205c4%203%205%202%203-1-3-5-8-6-22-8-23-2-26-2-29-1m-218%201c-3%201-3%201%202%201h6l-7%201-10%202-12%202c-12%202-13%202-12%203v2l5%201a6550%206550%200%200141-4c2%205%2010%206%2023%203a720%20720%200%200127-8c-2%200-2%200%200-1%204-4-8-2-30%203-9%203-17%203-17%201%200-1%202-4%204-4v-1c-2-1-3-2-6-1l-5%201h-2l2-1h-9m164%202c0%202%204%204%207%203l4%201%2040%206%205%201-2-3-5-3a363%20363%200%2001-32-5c-14-2-17-2-17%200m-858%200c0%203%206%207%2018%2010l16%206c13%204%2022%204%2025-1%201-2-1-3-4-1l-3%201a444%20444%200%2000-43-11c0%202-2%201-5-2s-4-4-4-2m817%201c4%204%207%205%2012%205l7%202c5%202%2018%204%2021%203%203%200%208-5%207-6l-2%201c-2%201-6%201-22-3l-19-4h-6l2%202m-875%204l-2%201-4%201h-1l-2%201c-3%202-20%207-24%207-6%201-7%202-3%204%203%201%207%201%208-1l5-1c4%200%209-2%209-3h2l2-1c0-2%200-2%202-1h2l2-1c4%200%209-3%209-5s-4-2-5-1m-39%202l-16%205-2%201c-2-2-7%200-6%202l-1%201-1-2c0-1-1-1-3%201s-3%204%200%204l1%201-2%201c-4%200-9%202-6%203%203%200%2033-8%2033-10%200-1%201-2%203-2l4-2c0-2-3-4-4-3m154%200c-4%200-6%202-3%203l4%201%2031%207c11%202%2012%202%2011%204%200%203%203%208%207%2010l15%202a1089%201089%200%200134%202c4-3%203-4-5-4l-9-1-9-2c-21-1-29-3-31-6-1-2-1-2%203-2s4%200%202-3c-3-3-44-12-50-11m52%201c-2%200-8%205-7%206l6-2c4-3%2010-3%208-1-1%202%2015%202%2018%201%202-2%209%200%2010%202l4%201c3%200%204%200%203-1-3-2%201-1%204%201%205%202%206%201%201-2-6-3-38-7-47-5m476%202h-11c-11%201-15%202-11%204h2c-1-2%200-2%202-2%204%200%205%202%202%202-1%201%205%201%2014%201%2023%200%2024%200%2023%201%200%202%205%207%209%208l10-1%2019-2c16-1%2016-1%2018-3%204-2%206-6%204-6l-3%201-17%203a4151%204151%200%2000-36%201c-2-1-3-3%200-3%201%201%202%200%203-1%202-2%200-3-9-3a306%20306%200%2001-19%200m375%201c-2%200-2%201-1%203h22c2%200%203-1%203-2%200-2-1-2-11-2l-13%201m-181%203l-1%205v3l-1-3c0-2%200-3-2-3s-2%201-2%204c0%204%201%204%203%204l3%202c1%201%202%202%205%201%206-1%207-2%207-7v-2c-1%202-1%202-1%200s-2-4-5-5h-3c-1-1-2%200-3%201m129%202c-1%202-1%203%201%203l1%201c0%202%2026%204%2041%204%208%200%208%200%2011-2%202-4%202-5-1-3a258%20258%200%2001-50-3h-3m-644%205l-4%203-24%203-1%202h-9l-13%201-6%201%204%204c2%201%2017%200%2018-1l3-1c2%200%203%200%203-2h1c3%203%2023%200%2027-4%202-3%203-7%202-7l-1%201m-94%201a285%20285%200%2001-14%202c0%202%208%203%2017%203%205%200%207-1%205-2-1-1%200-1%201-1l2-1-1-2-10%201m12%201v3l1-1h1l13%201c12%200%2013%200%2013-2s-1-3-14-3c-12%200-13%200-14%202m-324%205c-3%203-10%205-17%205l-5%201-2%201-5%201c-3%202-5%202-6%201H21c-3%200-2%202%201%204%204%202%2024%200%2025-3h1c1%202%2022-1%2025-4%204-4%205-5%205-7%200-3-1-2-4%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.5957446808510638,"src":"/static/6cb0918d160b3570b5202843924c8afb/21095/banner.jpg","srcSet":"/static/6cb0918d160b3570b5202843924c8afb/36b10/banner.jpg 300w,\n/static/6cb0918d160b3570b5202843924c8afb/88367/banner.jpg 600w,\n/static/6cb0918d160b3570b5202843924c8afb/21095/banner.jpg 1200w,\n/static/6cb0918d160b3570b5202843924c8afb/97ce3/banner.jpg 1800w,\n/static/6cb0918d160b3570b5202843924c8afb/d23b7/banner.jpg 1920w","sizes":"(max-width: 1200px) 100vw, 1200px"}}}}}}},"pageContext":{}}}